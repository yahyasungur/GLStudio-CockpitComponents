///////////////////////////////////////////////////////////////////////////////
// This file is generated by GL Studio.  DO NOT EDIT.
// To modify, run "glstudio GLStudio-WarningLights.gls", edit, then select Code/Generate All.
// Generated from GLStudio-WarningLights.gls using GL Studio 7.0.0
///////////////////////////////////////////////////////////////////////////////
#include "GLStudio_WarningLightsApp.h"
#include "gls_version.h"
#include "disti_assert.h"
#define LIB_BASE_NAME "gls"
#include "gls_auto_lib.h"
#undef LIB_BASE_NAME


using namespace disti;

GLStudio_WarningLightsClass *gLStudio_WarningLights;
//////////////////// User Code from section: "file GLStudio_WarningLightsApp.cpp" ////////////

///////////////////////////////////////////////////////////////////////////////
void GLStudio_WarningLightsClass::Initialize ()
{
    
}
void GLStudio_WarningLightsClass::Calculate (double time)
{
    objects->Group::Calculate(time); // Do not remove (for normal operations)
    
    int rand = RampInt(time*0.1, 0, 39);
    
    if(rand%2 == 0)
    {
    	glsColor curColor = carpet1->GetFillColor();
    	curColor.A(254);
    	carpet1->SetFillColor(curColor);
    }
    else
    {
    	glsColor curColor = carpet1->GetFillColor();
    	curColor.A(0);
    	carpet1->SetFillColor(curColor);
    }
    
    if(rand%3 == 0)
    {
    	glsColor curColor = carpet2->GetFillColor();
    	curColor.A(254);
    	carpet2->SetFillColor(curColor);
    }
    else
    {
    	glsColor curColor = carpet2->GetFillColor();
    	curColor.A(0);
    	carpet2->SetFillColor(curColor);
    }
    
    if(rand%4 == 0)
    {
    	glsColor curColor = carpet3->GetFillColor();
    	curColor.A(254);
    	carpet3->SetFillColor(curColor);
    }
    else
    {
    	glsColor curColor = carpet3->GetFillColor();
    	curColor.A(0);
    	carpet3->SetFillColor(curColor);
    }
    
    if(rand%5 == 0)
    {
    	glsColor curColor = carpet4->GetFillColor();
    	curColor.A(255);
    	carpet4->SetFillColor(curColor);
    }
    else
    {
    	glsColor curColor = carpet4->GetFillColor();
    	curColor.A(0);
    	carpet4->SetFillColor(curColor);
    }
    
    if(rand%6 == 0)
    {
    	glsColor curColor = carpet5->GetFillColor();
    	curColor.A(255);
    	carpet5->SetFillColor(curColor);
    }
    else
    {
    	glsColor curColor = carpet5->GetFillColor();
    	curColor.A(0);
    	carpet5->SetFillColor(curColor);
    }
    
    if(rand%7 == 0)
    {
    	glsColor curColor = carpet6->GetFillColor();
    	curColor.A(255);
    	carpet6->SetFillColor(curColor);
    }
    else
    {
    	glsColor curColor = carpet6->GetFillColor();
    	curColor.A(0);
    	carpet6->SetFillColor(curColor);
    }
    
    if(rand%8 == 0)
    {
    	glsColor curColor = carpet7->GetFillColor();
    	curColor.A(255);
    	carpet7->SetFillColor(curColor);
    }
    else
    {
    	glsColor curColor = carpet7->GetFillColor();
    	curColor.A(0);
    	carpet7->SetFillColor(curColor);
    }
    
    if(rand%9 == 0)
    {
    	glsColor curColor = carpet8->GetFillColor();
    	curColor.A(255);
    	carpet8->SetFillColor(curColor);
    }
    else
    {
    	glsColor curColor = carpet8->GetFillColor();
    	curColor.A(0);
    	carpet8->SetFillColor(curColor);
    }
    
    if(rand%10 == 0)
    {
    	glsColor curColor = carpet9->GetFillColor();
    	curColor.A(255);
    	carpet9->SetFillColor(curColor);
    }
    else
    {
    	glsColor curColor = carpet9->GetFillColor();
    	curColor.A(0);
    	carpet9->SetFillColor(curColor);
    }
    
    if(rand%11 == 0)
    {
    	glsColor curColor = carpet10->GetFillColor();
    	curColor.A(255);
    	carpet10->SetFillColor(curColor);
    }
    else
    {
    	glsColor curColor = carpet10->GetFillColor();
    	curColor.A(0);
    	carpet10->SetFillColor(curColor);
    }
    
    if(rand%12 == 0)
    {
    	glsColor curColor = carpet11->GetFillColor();
    	curColor.A(255);
    	carpet11->SetFillColor(curColor);
    }
    else
    {
    	glsColor curColor = carpet11->GetFillColor();
    	curColor.A(0);
    	carpet11->SetFillColor(curColor);
    }
    
    if(rand%13 == 0)
    {
    	glsColor curColor = carpet12->GetFillColor();
    	curColor.A(255);
    	carpet12->SetFillColor(curColor);
    }
    else
    {
    	glsColor curColor = carpet12->GetFillColor();
    	curColor.A(0);
    	carpet12->SetFillColor(curColor);
    }
}

// Object generated implementations

InterfaceListType* GLStudio_WarningLightsClass::GetCppInterfaceDescription(InterfaceListType* addToThisList)
{
    // Create a list if it doesn't exist
    if (!addToThisList)
        addToThisList = new InterfaceListType;

#ifndef GLS_NO_DESCRIPTION
    static const char* localList[][3] = { 
        {"","------ GLStudio_WarningLightsClass ------",""},
        {"Initialize(","void Initialize()","This code is called immediately after creating objects"},
        {"Calculate(","void Calculate(double time)","This code is called every frame"},
        NULL
    };

    int index = 0;
    while(localList[index][0])
    {
        addToThisList->InsertObject(InterfaceDescriptionClass(
            localList[index][0],
            localList[index][1],
            localList[index][2]));
        index++;
    }
#endif //GLS_NO_DESCRIPTION
    return addToThisList;
}
void GLStudio_WarningLightsClass::GetCppInterfaceDescriptionFree(InterfaceListType* list)
{
    // Delete the list itself
    delete list;
}
#ifdef WIN32
#pragma optimize("", off)
#endif
unsigned char * GLStudio_WarningLightsClass::rgb_data_0[] = {
    (unsigned char *)"\170\332\355\235\171\214\225\145\276\347\301\006\273\121\221\026\220\115\024\144\121\226\202\222\115\026\331\367\175\107\131\232\315\005\221\175\337\367\125\026\001\105\104\331\124\150\045\064\166\142\272\323\111\347\046\323\231\144\222\311\275\177\114\146\046\063\363\307\114\146\111\346\237\271\177\334\144\072\367\046\067\063\103\364\231\363\171\332\327\173\352\345\234\123\125\324\171\213\213\365\251\344\223\103\025\207\102\136\277\365\074\317\367\267\075\215\032\325\370\243\163\216\137\345\270\230\343\137\346\370\333\034\337\347\010\042\042\042\042\042\042\031\360\335\017\236\103\244\020\337\075\200\047\275\227\343\357\163\374\207\034\137\345\330\226\143\124\216\237\065\052\317\107\307\034\037\345\370\073\177\176\105\104\104\104\104\104\344\047\306\377\311\361\307\034\103\353\350\235\247\345\370\317\205\376\216\046\115\232\204\147\236\171\046\074\377\374\363\241\107\217\036\241\262\262\062\364\357\337\377\076\006\014\030\020\136\171\345\225\320",
    (unsigned char *)"\263\147\317\320\271\163\347\320\261\143\307\320\241\103\207\107\232\347\236\173\116\104\104\104\104\104\062\244\155\333\266\241\125\253\126\241\165\353\326\042\005\151\323\246\115\364\227\057\276\370\142\170\351\245\227\242\347\304\233\362\232\360\362\313\057\207\356\335\273\107\057\332\256\135\273\360\344\223\117\206\306\215\033\027\363\321\377\073\307\256\034\277\250\245\157\176\052\307\351\374\357\305\337\321\274\171\363\320\251\123\247\350\213\307\215\033\027\346\314\231\023\126\256\134\031\266\154\331\022\366\354\331\023\016\034\070\020\016\035\072\124\205\043\107\216\204\223\047\117\206\367\337\177\077\034\074\170\060\154\333\266\055\154\332\264\051\154\334\270\121\104\104\104\104\104\244\040\033\066\154\010\353\327\257\217\257\042\205\330\272\165\153\330\277\177\177\364\234\207\017\037\216\176\164\357\336\275\321\233\046\360\371\316\235\073\243\246\126\254\130\021\146\315\232\025\106\216\034\031\372\366\355\033\332\267\157\037\236\170\342",
    (unsigned char *)"\211\102\076\372\017\071\172\324\320\073\077\233\343\257\362\377\074\337\363\205\027\136\010\003\007\016\014\223\047\117\016\157\274\361\106\130\262\144\111\144\341\302\205\361\277\141\301\202\005\361\353\300\327\022\026\057\136\034\226\056\135\032\377\173\217\035\073\026\377\115\371\377\236\107\011\236\175\372\377\207\210\210\210\210\210\144\163\366\336\267\157\337\175\340\047\310\313\211\340\057\117\237\076\035\116\234\070\021\077\107\067\273\166\355\212\176\031\166\354\330\021\301\147\257\135\273\066\054\137\276\074\054\133\266\054\202\127\235\070\161\142\314\015\223\303\376\371\317\177\236\366\320\377\043\307\200\152\274\163\323\034\277\113\376\314\143\217\075\026\176\371\313\137\206\256\135\273\306\334\067\337\173\320\240\101\241\127\257\136\061\377\115\356\233\072\356\232\324\224\223\277\156\326\254\331\117\012\342\012\362\140\240\235\372\374\163\042\017\133\273\042\152\120\324\240\110\355\300\207\120\237\233\206\272\156\136\251\355\156\331",
    (unsigned char *)"\262\245\064\140\320\000\074\365\324\123\321\237\375\342\027\277\050\012\376\230\367\240\037\152\274\351\061\036\061\142\104\314\021\343\157\251\001\247\336\072\345\143\377\123\216\366\045\374\363\241\344\275\077\373\331\317\142\115\071\171\147\300\223\077\375\364\323\321\123\333\137\056\042\042\042\042\042\042\217\062\344\202\237\175\366\331\350\235\201\136\145\146\174\245\074\357\157\162\074\136\300\073\117\375\141\226\167\364\316\304\173\360\364\170\146\374\074\137\363\031\213\210\210\210\210\210\310\117\211\307\037\177\074\264\150\321\042\172\140\374\064\257\251\031\143\073\013\364\074\377\327\374\071\141\324\114\224\230\113\126\245\046\233\074\065\063\362\360\353\324\165\047\376\135\004\075\240\213\022\275\371\165\202\270\016\061\236\144\366\236\372\223\174\272\164\351\022\373\117\370\165\126\032\044\076\111\214\221\265\026\015\242\167\237\275\024\322\040\367\067\120\367\252\006\105\015\212\032\054\237\376\360\043\350\217\357\315\374\145\356",
    (unsigned char *)"\004\242\036\227\236\323\127\137\175\125\032\070\350\000\270\023\012\155\240\303\352\064\230\254\151\220\367\165\356\213\036\226\347\237\267\045\277\207\037\056\320\073\135\205\246\115\233\306\272\161\152\306\351\271\146\146\330\133\157\275\025\326\255\133\027\347\204\155\336\274\131\044\316\145\147\336\172\062\233\235\336\175\172\366\131\323\210\361\324\145\237\306\063\263\026\017\031\062\044\114\233\066\055\316\262\133\275\172\165\234\321\310\174\167\237\277\044\372\333\275\173\167\234\047\301\114\106\346\110\060\317\260\117\237\076\165\352\105\111\342\214\304\153\130\233\247\114\231\022\147\045\256\132\265\112\015\112\025\015\062\257\004\335\241\101\146\203\242\307\067\337\174\063\356\343\354\245\152\120\324\240\250\301\007\317\241\220\303\143\206\362\204\011\023\242\037\171\357\275\367\302\366\355\333\343\337\221\314\375\225\206\115\162\077\024\167\101\175\360\301\007\341\374\371\363\341\350\321\243\321\223\340\045\112\151\254\200\057\376\372",
    (unsigned char *)"\007\357\334\044\307\337\260\016\222\233\051\345\235\223\367\020\133\304\277\217\035\073\366\307\073\254\130\053\071\253\046\263\316\104\130\273\320\054\363\360\056\135\272\024\156\335\272\025\276\371\346\233\160\343\306\215\270\236\022\237\256\355\132\211\076\231\021\320\255\133\267\060\170\360\340\270\137\263\136\276\373\356\273\161\235\306\243\373\354\045\321\037\353\046\276\231\365\362\312\225\053\341\366\355\333\341\316\235\073\341\263\317\076\013\357\274\363\116\354\121\171\020\015\362\347\210\247\023\013\232\064\151\122\274\177\200\357\307\171\221\175\333\347\057\371\032\144\035\074\165\352\124\370\364\323\117\243\006\177\363\233\337\204\253\127\257\306\175\223\272\010\065\050\152\120\324\140\355\153\155\223\363\040\271\224\361\343\307\207\271\163\347\106\117\302\214\145\357\376\222\004\074\007\376\000\017\175\346\314\231\160\371\362\345\250\277\157\277\375\066\376\232\273\245\112\151\215\271\143\370\350\037\076\247\136\273\155\216\356\071",
    (unsigned char *)"\376\041\231\161\127\252\267\232\134\067\177\036\275\342\241\237\177\376\371\250\333\212\212\212\070\233\233\370\043\236\106\144\350\320\241\221\141\303\206\305\373\325\210\013\316\234\071\063\346\210\277\376\372\353\160\367\356\335\070\157\276\272\270\117\176\214\221\070\167\062\367\234\273\317\223\273\322\231\237\227\324\352\370\354\005\330\113\023\375\015\037\076\074\214\031\063\046\256\217\363\347\317\217\367\321\377\366\267\277\015\067\157\336\214\347\074\172\135\152\123\237\230\314\004\245\006\047\351\031\240\136\214\370\267\032\224\142\032\034\075\172\164\364\030\363\346\315\213\173\070\153\040\032\344\134\211\226\324\240\250\101\121\203\065\363\316\211\037\301\327\320\063\300\237\115\146\302\123\237\310\276\316\374\047\021\110\146\164\047\132\301\103\120\077\175\374\370\361\360\373\337\377\076\134\277\176\075\352\262\324\272\307\367\101\157\215\033\067\376\277\271\257\215\313\361\072\336\204\357\133\254\026\034\357\214\026\223\031\142\316",
    (unsigned char *)"\340\226\272\200\147\246\176\207\230\017\165\066\251\336\202\242\365\071\171\261\037\347\331\111\235\352\275\146\314\230\021\153\042\210\103\316\236\075\273\106\263\036\130\177\363\327\110\065\050\165\201\270\342\305\213\027\303\331\263\147\143\377\111\165\065\214\152\120\324\240\064\164\015\002\271\224\054\172\370\245\141\302\375\317\370\147\172\013\310\011\227\322\035\353\337\017\367\066\323\367\174\201\032\010\074\171\241\236\124\274\062\357\257\113\277\252\110\032\364\106\175\027\120\267\120\052\346\203\167\046\276\343\163\223\162\102\255\027\275\371\314\155\040\026\131\135\334\221\031\165\076\067\051\047\344\351\310\273\320\173\122\152\337\126\203\242\006\245\241\153\060\311\073\077\110\337\225\110\051\026\055\132\024\065\110\076\245\130\216\070\251\165\370\301\017\177\333\270\161\343\177\215\247\346\153\351\034\014\237\047\163\274\175\276\122\156\250\355\141\316\310\364\351\323\223\170\116\225\230\066\032\105\173\324\150\243\133\237\231\224",
    (unsigned char *)"\373\236\002\326\114\146\037\062\303\244\120\256\205\130\070\265\140\150\260\272\072\011\221\007\231\277\064\153\326\254\360\366\333\157\207\121\243\106\251\101\121\203\242\006\213\274\207\236\173\152\157\253\233\161\054\362\040\071\075\364\307\074\045\176\135\254\166\221\370\041\236\071\367\371\177\317\371\222\077\363\171\176\074\047\321\051\161\036\172\372\255\223\220\254\364\072\165\352\324\070\003\054\035\117\114\356\140\243\307\236\075\273\272\372\132\221\007\201\136\075\346\215\214\030\061\242\140\337\012\147\106\356\303\040\046\156\235\242\144\301\313\057\277\034\347\160\122\017\221\216\043\252\101\121\203\322\320\065\110\076\060\271\053\027\117\342\171\120\312\015\232\143\106\016\367\371\060\313\241\330\373\320\040\236\071\347\121\376\061\367\372\035\363\023\363\163\314\311\075\152\324\314\276\360\302\013\326\156\113\046\260\036\122\267\303\074\211\164\375\054\371\146\164\112\257\064\263\111\174\136\222\005\150\213\170\067\263\115\322\173",
    (unsigned char *)"\166\062\333\063\271\307\334\347\045\131\300\036\113\017\040\072\114\307\252\325\240\250\101\151\350\032\114\146\060\261\137\227\352\265\022\171\120\250\261\341\176\150\146\334\165\357\336\275\244\177\306\227\220\363\353\324\251\323\275\136\275\172\335\347\237\371\234\170\043\167\014\031\353\221\254\364\312\274\116\152\147\323\167\027\044\063\266\371\375\142\265\024\042\165\205\265\220\173\354\321\140\272\107\200\317\251\025\143\055\175\356\271\347\174\136\222\011\304\262\251\203\140\016\304\017\165\141\152\120\324\240\250\301\274\263\042\061\034\162\175\236\007\045\013\250\253\341\056\037\316\203\325\371\347\076\175\372\104\177\374\342\213\057\336\343\327\151\377\234\344\236\101\377\054\131\325\113\240\057\342\067\351\230\042\361\107\364\111\115\017\063\113\174\136\222\005\254\173\304\150\320\140\272\247\212\163\043\161\035\143\070\222\045\254\157\324\305\262\017\027\362\056\152\120\324\240\064\144\015\122\003\221\304\160\074\017\112\126\376\071",
    (unsigned char *)"\271\017\227\070\115\051\377\334\257\137\277\350\135\212\371\147\326\111\162\317\346\237\045\053\350\151\141\137\146\115\114\337\373\207\177\046\326\315\236\135\323\373\171\105\152\013\175\175\324\044\242\301\164\237\112\376\271\321\371\357\222\025\254\157\354\263\304\012\323\165\213\152\120\324\240\064\164\015\022\333\046\237\202\006\365\317\222\225\177\146\336\022\336\031\035\026\173\037\153\040\071\352\352\374\063\136\134\377\054\131\372\147\362\316\304\034\113\371\147\074\216\317\113\262\200\070\067\153\034\375\054\305\374\063\336\332\163\243\144\171\156\144\057\106\147\364\255\250\101\121\203\242\006\253\372\147\316\203\326\043\112\226\376\031\215\351\237\345\121\363\317\351\073\045\365\317\122\037\060\047\121\377\054\017\273\006\202\270\267\336\105\324\240\250\101\375\263\074\134\377\214\067\326\077\213\376\131\104\377\054\172\027\021\065\050\372\147\021\375\263\350\237\105\364\317\242\167\021\121\203\242\177\026\321\077\213\376\131\377\054",
    (unsigned char
    (unsigned char
    (unsigned char *)"\250\250\250\342\237\211\365\260\136\242\143\375\263\144\351\237\251\163\100\257\351\272\260\304\077\263\147\353\237\045\313\374\063\153\046\373\066\353\247\347\106\171\030\061\234\016\035\072\304\275\226\275\127\015\212\032\024\065\130\125\203\370\225\236\075\173\252\101\311\064\237\307\131\220\063\141\051\377\334\257\137\277\250\307\056\135\272\334\353\335\273\167\025\377\114\036\006\035\263\136\222\227\321\077\113\026\240\053\164\207\326\322\036\031\137\223\324\362\260\256\372\274\044\013\210\153\267\156\335\072\326\077\244\327\071\152\310\222\030\116\376\372\050\122\116\320\031\032\244\227\245\111\223\046\152\120\324\240\250\301\224\177\246\036\266\157\337\276\366\340\113\146\376\231\365\215\263\140\051\215\361\173\225\225\225\321\237\344\326\305\173\324\104\264\150\321\242\312\367\041\006\104\254\207\176\003\375\263\144\345\237\361\057\364\124\245\373\135\360\314\150\320\372\155\311\272\146\007\355\025\322\030\065\020\304\030\131\003\075\067",
    (unsigned char *)"\112\126\160\126\114\064\230\336\153\325\240\250\101\121\203\117\306\263\040\171\077\162\204\076\057\311\002\172\227\321\037\172\053\366\036\374\012\071\147\342\074\355\333\267\377\216\371\115\371\347\107\374\063\132\245\306\233\170\117\072\026\044\122\356\270\143\272\367\224\175\232\170\167\272\066\102\044\213\270\143\172\166\130\022\303\241\207\005\015\322\147\340\263\222\054\143\211\152\120\324\240\250\301\307\013\366\106\223\363\033\072\164\150\324\242\317\112\262\364\320\205\064\230\100\256\031\177\314\132\110\235\067\076\205\172\331\174\015\223\173\106\253\043\106\214\260\176\126\062\367\057\351\257\241\115\372\362\007\016\034\030\153\307\174\116\122\337\020\147\114\064\110\355\230\317\104\324\240\250\101\237\211\324\057\344\003\007\017\036\034\306\216\035\033\137\175\046\222\145\014\247\124\315\065\261\034\074\063\063\041\350\157\246\056\047\235\257\346\153\023\046\114\010\063\147\316\214\363\235\174\256\122\237\120\243\103\374\146\314\230",
    (unsigned char *)"\061\261\146\307\036\002\171\030\347\106\366\352\321\243\107\307\127\353\160\104\015\212\032\124\203\122\377\265\335\303\207\017\017\063\146\314\210\236\304\173\324\344\141\201\177\356\325\253\327\217\363\231\310\065\247\375\063\161\306\271\163\347\206\045\113\226\104\037\135\050\107\050\222\025\324\154\217\033\067\056\256\227\263\146\315\212\163\045\174\056\122\237\320\233\317\231\021\015\262\026\132\007\041\152\120\324\240\032\224\372\007\377\214\037\171\347\235\167\142\136\305\147\042\017\313\077\323\327\114\136\031\377\214\227\116\373\147\146\214\055\133\266\054\254\136\275\072\154\334\270\061\346\000\175\166\122\237\361\306\351\323\247\207\245\113\227\206\367\336\173\057\114\231\062\305\034\264\324\173\035\317\370\361\343\243\006\337\175\367\335\170\166\114\337\253\041\242\006\105\015\212\144\013\236\145\303\206\015\141\313\226\055\141\367\356\335\261\037\332\347\042\365\131\273\235\357\237\251\335\246\017\272\220\177\346\173\314\233\067\057",
    (unsigned char *)"\352\364\320\241\103\341\300\201\003\361\317\370\214\245\234\036\231\173\011\212\375\076\061\157\326\312\235\073\167\106\015\122\007\341\163\223\162\317\212\110\317\256\313\147\300\200\001\121\203\333\267\157\017\107\216\034\211\147\307\122\357\027\171\220\165\260\224\037\121\203\242\006\245\241\153\220\071\263\153\327\256\015\007\017\036\014\147\316\234\011\247\117\237\216\063\216\175\166\122\256\072\033\352\136\253\363\317\314\003\353\323\247\117\254\321\246\317\271\220\177\116\172\120\361\315\247\116\235\012\227\057\137\016\027\056\134\210\065\265\306\036\245\256\074\363\314\063\261\376\241\324\335\124\314\271\333\274\171\163\070\172\364\150\324\336\245\113\227\302\302\205\013\275\317\112\352\014\367\126\161\377\000\167\244\261\156\026\173\037\153\035\071\227\143\307\216\205\163\347\316\305\165\360\315\067\337\264\237\100\312\022\353\146\116\042\353\140\251\373\062\324\240\250\101\151\350\032\004\346\330\135\274\170\061\234\077\177\076\134\273",
    (unsigned char *)"\166\055\134\271\162\045\326\051\346\317\077\026\251\015\304\001\231\243\315\075\316\065\271\133\034\377\114\056\231\071\360\245\374\063\060\057\342\323\117\077\015\237\175\366\131\370\342\213\057\302\215\033\067\142\034\162\330\260\141\161\376\030\353\252\165\265\122\223\330\042\276\227\236\173\142\206\350\212\370\115\115\326\113\274\363\307\037\177\034\256\137\277\036\276\374\362\313\260\147\317\236\060\162\344\310\320\241\103\207\230\077\124\177\122\223\075\032\237\314\076\115\315\315\153\257\275\026\327\060\356\065\255\056\036\310\276\116\254\233\370\315\325\253\127\303\315\233\067\143\016\206\232\106\364\114\015\205\032\224\232\150\220\365\212\075\232\275\027\375\241\103\326\301\122\061\034\065\050\152\120\324\340\137\140\176\330\355\333\267\243\037\371\374\363\317\303\255\133\267\302\341\303\207\303\354\331\263\343\171\221\376\174\362\063\170\152\316\227\042\011\150\202\034\063\271\023\352\257\373\367\357\037\173\351\107\215\032\025\222\173",
    (unsigned char *)"\234\253\233\217\130\033\377\014\223\046\115\212\261\036\326\113\364\012\254\241\344\246\351\217\136\264\150\121\230\063\147\116\324\065\063\046\210\007\211\044\240\013\172\001\136\177\375\365\260\140\301\202\060\171\362\344\250\133\326\071\264\134\235\136\361\312\350\057\211\337\240\077\142\220\173\367\356\015\157\275\365\126\230\077\177\276\272\223\373\100\023\311\374\071\064\302\354\221\025\053\126\304\076\276\151\323\246\305\070\016\161\107\326\324\352\346\043\362\336\117\076\371\044\306\157\022\015\222\203\241\226\154\325\252\125\121\327\152\120\212\151\060\131\003\027\057\136\034\065\310\154\021\276\106\135\054\336\203\175\133\015\212\032\024\065\130\375\254\142\316\204\234\007\177\367\273\337\105\377\214\016\211\351\120\033\201\057\041\307\267\176\375\372\260\146\315\232\070\077\107\044\001\115\254\133\267\056\376\232\263\340\324\251\123\343\335\174\370\347\066\155\332\124\233\117\251\255\177\006\336\107\035\055\232\005\362\321\150\365\304",
    (unsigned char *)"\211\023\061\366\263\177\377\376\350\147\166\355\332\025\373\125\105\166\354\330\021\373\245\066\155\332\024\265\272\174\371\362\030\147\241\007\200\171\164\304\263\321\142\115\142\326\275\173\367\216\075\057\137\175\365\125\324\037\361\033\142\341\304\277\367\355\333\027\163\322\076\163\051\246\303\155\333\266\305\331\043\324\034\322\273\107\316\044\321\040\376\271\046\032\044\076\316\032\210\006\211\045\122\227\163\366\354\331\052\032\164\375\223\142\032\334\272\165\153\234\305\371\366\333\157\307\170\316\304\211\023\177\274\123\227\163\243\032\024\065\050\152\260\146\065\014\364\227\222\277\243\066\021\377\114\175\042\171\025\316\205\307\217\037\217\032\105\223\370\151\021\074\052\153\023\063\275\210\257\320\217\102\116\217\331\304\324\303\162\026\054\065\217\051\355\237\321\053\336\231\136\350\352\374\163\322\063\310\173\311\347\360\167\047\353\044\377\055\234\115\361\364\306\173\044\037\142\322\344\210\211\363\240\125\174\013\261\030\326\276",
    (unsigned char *)"\332\316\037\241\266\147\354\330\261\321\003\361\063\300\317\104\342\317\325\236\024\203\075\226\073\057\210\337\320\077\117\074\034\357\114\356\271\046\365\142\351\065\220\132\063\276\027\153\037\171\027\064\310\171\100\015\112\165\153\041\071\027\064\110\056\146\320\240\101\261\177\200\271\070\152\120\324\240\250\301\332\327\203\223\057\304\373\060\157\226\372\007\374\011\071\105\174\021\265\216\324\317\212\020\247\301\077\000\132\141\375\302\007\343\105\350\047\250\315\375\125\234\037\271\273\212\031\360\324\322\342\251\037\144\136\031\176\235\127\221\102\260\266\345\123\135\255\166\155\172\376\131\157\325\237\324\126\207\265\131\053\253\353\351\127\203\242\006\105\015\252\101\171\170\032\024\251\057\350\071\045\137\335\263\147\317\350\237\251\235\140\326\261\317\106\104\104\104\104\104\104\344\237\150\331\262\145\030\072\164\150\314\077\367\352\325\353\173\362\317\372\147\021\021\021\021\021\021\221\252\060\067\236\236\003\374\163\267\156\335",
    (unsigned char *)"\276\247\247\131\377\054\042\042\042\042\042\217\042\364\346\323\113\100\235\055\271\102\221\004\356\065\103\027\165\271\153\217\357\103\316\231\236\173\356\300\242\216\273\266\376\231\236\227\344\056\325\041\103\206\204\011\023\046\304\131\000\334\301\306\174\133\021\146\155\003\367\025\240\015\372\365\321\133\071\172\240\321\076\075\373\314\200\042\376\063\142\304\210\070\057\202\273\020\324\240\044\344\337\233\206\066\222\073\237\313\161\117\051\337\203\271\213\355\333\267\217\163\030\321\067\363\112\324\240\244\065\210\376\320\041\272\140\255\142\166\147\271\326\101\065\050\152\120\032\262\006\351\245\346\076\124\172\121\071\007\162\077\026\063\216\271\303\212\371\262\042\011\314\071\144\026\074\332\100\217\334\355\103\314\245\066\375\317\170\016\364\306\235\153\314\103\146\246\130\115\143\073\170\170\074\067\367\116\363\063\301\054\275\265\153\327\306\271\364\314\247\027\001\146\144\163\247\331\261\143\307\302\205\013\027\342\275\221\037\176",
    (unsigned char *)"\370\141\274\113\210\165\256\056\173\065\036\210\073\003\231\251\307\317\000\167\041\060\373\223\357\315\317\207\317\137\130\043\271\043\340\320\241\103\361\116\013\356\271\340\336\075\264\310\172\305\272\367\240\373\065\361\113\326\117\356\103\145\246\074\367\160\060\147\036\015\262\016\252\101\311\327\040\167\147\234\074\171\062\336\257\162\345\312\225\360\321\107\037\205\315\233\067\107\375\250\101\121\203\242\006\153\257\077\356\212\046\367\207\017\037\076\174\170\364\043\350\017\237\304\337\307\335\272\334\145\045\302\135\313\247\116\235\212\332\343\356\372\157\276\371\046\336\037\316\335\147\370\206\116\235\072\325\330\077\343\271\211\027\046\376\271\046\363\267\211\361\340\263\073\164\350\020\375\063\271\034\346\304\057\132\264\050\336\017\303\275\005\334\143\045\302\372\305\272\310\376\311\235\220\350\226\173\042\271\063\362\333\157\277\015\327\256\135\213\173\155\155\346\057\362\136\164\112\377\001\265\023\314\220\347\056\151\162\334\334",
    (unsigned char *)"\243\301\075\105\304\224\174\376\302\371\015\015\162\267\036\173\067\367\100\342\233\257\136\275\032\327\315\073\167\356\304\165\224\173\014\152\133\167\303\175\321\150\220\030\016\367\037\020\107\344\316\014\356\150\103\203\256\203\222\326\040\147\110\356\333\073\167\356\134\324\340\335\273\167\043\227\057\137\216\367\251\325\246\036\102\015\212\032\224\206\256\101\316\203\150\020\377\214\367\301\323\240\303\127\137\175\065\356\353\344\126\360\047\042\150\013\250\211\301\167\340\131\127\256\134\031\175\365\237\376\364\247\360\207\077\374\041\346\130\152\222\123\301\003\367\350\321\043\336\173\325\265\153\327\130\163\203\016\113\375\031\162\176\334\121\220\364\026\360\176\326\120\064\214\257\116\356\262\022\001\264\222\017\372\301\373\022\047\044\326\163\373\366\355\270\146\122\153\123\223\265\222\357\201\156\321\037\272\343\173\241\071\365\047\065\325\037\153\026\272\041\346\202\167\046\356\110\134\247\242\242\242\306\367\365\021\173\104\177\350",
    (unsigned char *)"\220\357\307\337\305\135\152\152\120\152\243\101\162\045\150\357\313\057\277\214\147\111\172\240\324\240\250\101\121\203\065\323\040\276\231\374\063\240\073\173\277\345\101\240\007\231\072\010\162\173\344\373\250\257\056\365\176\164\107\254\206\230\015\165\334\364\102\227\252\337\116\364\356\263\226\162\061\155\332\264\160\376\374\371\250\327\352\352\046\130\163\211\365\324\246\107\101\244\024\254\221\273\166\355\212\065\075\324\173\261\317\127\127\173\203\006\071\043\372\374\244\034\240\051\162\164\150\220\272\231\352\366\155\065\050\152\120\032\272\006\311\231\120\367\340\171\120\312\005\036\227\272\010\352\375\351\103\251\356\354\110\215\003\171\347\312\312\312\357\370\065\361\304\142\332\106\253\345\230\267\043\222\017\165\024\324\170\027\322\053\172\003\342\214\364\127\325\264\077\137\244\246\240\053\372\240\113\365\102\243\101\326\100\346\324\061\167\321\347\046\345\216\343\254\131\263\046\236\037\211\143\253\101\121\203\242\006\213\317\137",
    (unsigned char *)"\302\217\340\167\174\156\122\116\310\051\323\157\260\160\341\302\222\375\314\350\217\336\145\374\163\217\036\075\356\241\327\164\314\207\232\010\142\214\314\330\326\273\110\026\164\353\326\055\366\041\320\227\220\136\017\321\136\222\167\056\327\214\106\221\064\324\162\057\131\262\044\256\207\205\366\152\064\330\272\165\353\250\125\153\304\044\013\206\016\035\032\065\110\034\061\035\247\126\203\242\006\245\241\153\220\317\071\003\122\073\333\256\135\273\350\117\174\146\122\116\250\153\110\356\014\142\056\130\261\367\261\016\322\147\300\132\330\265\153\327\173\364\334\347\373\147\264\312\172\111\116\232\034\115\165\265\215\042\017\132\063\061\152\324\250\170\367\131\233\066\155\356\253\173\040\316\315\234\260\232\316\305\023\251\055\304\146\350\301\247\017\053\275\047\023\303\141\135\104\177\274\317\032\034\311\002\356\364\343\276\237\261\143\307\306\172\033\065\050\152\120\324\140\325\030\016\071\101\146\036\203\317\113\312\015\353\334\310\221\043",
    (unsigned char *)"\243\376\360\306\245\374\063\167\377\260\036\346\064\173\217\371\071\151\377\114\316\031\117\303\154\105\373\014\044\253\276\027\372\357\311\375\245\327\104\142\066\350\257\173\367\356\061\336\350\363\222\054\240\276\141\360\340\301\221\164\136\205\317\251\277\141\306\142\251\170\244\110\135\340\076\013\172\250\270\067\067\135\067\246\006\105\015\112\103\327\040\336\046\311\247\244\163\055\042\345\200\372\006\374\310\240\101\203\342\114\261\122\365\333\334\267\206\067\306\077\363\147\362\373\237\361\317\150\225\334\063\357\061\336\050\131\351\225\170\066\365\017\151\377\114\156\232\257\321\227\212\136\175\136\222\005\254\163\364\275\124\126\126\336\027\363\346\163\142\067\254\245\306\160\044\053\130\337\270\017\222\373\370\322\347\106\065\050\152\120\032\272\006\251\255\045\326\115\136\320\376\173\311\002\362\304\370\021\372\232\113\345\237\153\342\237\311\121\363\373\344\250\365\317\222\225\136\231\107\202\107\146\155\114\373\347\344\367\212\315",
    (unsigned char *)"\266\023\251\053\364\123\221\127\341\076\277\164\376\231\163\043\061\034\316\215\254\207\076\057\311\002\326\067\152\027\071\073\246\357\271\120\203\242\006\245\241\153\220\275\031\015\122\217\130\335\174\156\221\007\365\043\170\136\274\063\165\016\165\361\317\324\353\044\275\247\372\147\311\002\372\115\223\065\261\230\177\146\317\306\343\370\274\044\013\350\123\141\235\143\315\044\306\135\350\334\210\076\215\171\113\226\061\034\366\131\326\072\346\216\250\101\121\203\242\006\253\372\347\044\237\242\177\226\254\374\063\065\327\344\123\112\315\134\252\251\177\046\026\244\177\226\054\375\063\365\140\170\227\122\376\331\371\357\222\025\304\271\131\343\130\063\113\371\147\173\010\044\313\030\016\173\061\072\053\345\135\324\240\250\101\151\210\032\324\077\113\175\325\303\122\303\215\016\365\317\362\250\370\347\364\114\010\375\263\350\237\245\241\234\033\231\313\244\167\021\065\050\152\120\377\054\372\147\021\375\263\350\237\105\364\056\242\006\105\364",
    (unsigned char *)"\317\242\177\026\321\077\213\376\131\104\357\042\152\120\104\377\054\372\147\375\263\350\237\105\377\354\271\121\364\056\242\006\325\240\350\237\105\377\374\117\376\071\367\136\375\263\350\237\105\377\254\177\026\275\213\250\101\065\050\372\147\321\077\127\343\237\163\376\344\136\105\105\205\376\131\364\317\242\177\366\334\050\172\027\121\203\152\120\364\317\242\177\056\341\237\163\336\045\372\347\174\115\352\237\105\377\054\372\147\317\215\242\167\021\065\250\006\105\377\054\372\347\302\376\331\374\263\350\237\105\377\354\271\121\364\056\242\006\325\240\350\237\105\377\134\332\077\333\377\054\372\147\321\077\353\237\105\357\042\152\120\015\212\376\131\364\317\245\375\263\363\303\104\377\054\372\147\375\263\350\135\104\015\252\101\321\077\213\376\271\346\371\147\373\237\105\377\054\372\147\317\215\242\167\021\065\250\006\105\377\054\372\347\342\376\271\163\347\316\372\147\321\077\213\376\131\377\054\172\027\121\203\152\120\364\317\242\177\256\306",
    (unsigned char
    (unsigned char *)"\307\163\143\313\226\055\175\136\222\011\055\132\264\050\172\156\124\203\242\006\245\241\153\060\361\317\075\172\364\320\077\113\246\376\271\163\347\316\165\362\317\370\232\266\155\333\306\063\245\376\131\262\364\317\370\146\342\075\255\133\267\276\317\077\167\354\330\121\377\054\231\373\147\164\306\232\331\244\111\223\242\347\306\374\365\121\244\334\171\027\366\155\342\325\344\372\324\240\250\101\121\203\125\153\040\360\326\075\173\366\324\077\113\146\376\231\174\036\276\230\063\141\261\367\341\125\372\365\353\027\337\327\255\133\267\173\170\351\174\115\162\216\144\275\044\057\210\226\365\317\222\005\350\212\130\016\072\114\257\211\370\232\044\026\331\274\171\163\237\227\144\002\161\156\326\114\366\155\342\071\351\163\043\137\367\334\050\131\102\254\220\170\065\353\135\241\032\010\065\050\152\120\032\272\006\211\161\127\124\124\130\003\041\231\345\363\360\043\170\137\164\130\354\175\324\146\277\372\352\253\061\357\327\267\157\337\357\206\016\035",
    (unsigned char *)"\132\245\176\026\355\342\277\351\065\300\103\353\237\045\053\377\214\117\106\253\274\246\375\063\276\132\377\054\131\302\132\307\231\220\165\063\275\316\261\237\047\061\034\317\215\222\025\324\046\122\273\210\006\323\061\034\065\050\152\120\032\272\006\211\163\343\105\052\053\053\357\253\125\024\051\227\037\101\147\304\147\320\141\261\367\261\026\216\032\065\052\364\356\335\073\014\031\062\344\357\306\217\037\037\363\314\371\171\154\274\065\165\335\275\172\365\322\077\113\146\120\353\100\335\016\153\147\272\027\006\015\322\357\142\375\266\144\271\146\242\075\316\210\205\342\341\304\274\251\031\063\346\055\131\152\260\151\323\246\161\357\056\024\303\121\203\242\006\245\041\153\220\034\012\176\145\360\340\301\045\173\123\105\352\252\101\152\035\322\375\003\371\260\016\316\234\071\223\170\316\237\163\376\370\257\371\065\065\334\371\376\031\337\062\140\300\200\060\150\320\240\222\337\113\244\034\071\300\164\274\221\175\232\372\207\276\175\373\032\157",
    (unsigned char *)"\224\172\251\335\051\324\217\105\316\205\070\142\207\016\035\174\116\242\006\105\015\372\234\244\236\065\210\177\306\217\214\034\071\062\236\011\175\116\222\145\037\164\041\015\046\120\273\375\306\033\157\120\347\375\357\133\265\152\365\321\274\171\363\242\056\211\375\044\357\141\275\044\107\075\141\302\204\130\357\355\163\225\054\143\076\351\257\121\323\335\277\177\377\060\154\330\260\250\105\237\223\324\067\304\160\210\053\016\031\062\044\306\276\175\046\242\006\105\015\372\114\244\376\153\273\321\337\344\311\223\243\047\061\247\047\017\003\164\107\275\366\353\257\277\316\257\257\076\361\304\023\157\314\230\061\043\352\062\277\267\205\136\003\276\076\177\376\374\052\271\151\221\372\200\230\015\061\235\111\223\046\205\321\243\107\337\067\117\102\044\153\210\171\277\366\332\153\161\277\146\315\114\367\350\213\250\101\121\203\042\331\347\130\206\017\037\036\026\054\130\020\226\056\135\032\373\112\175\056\362\060\174\311\334\271\163\303\224\051\123",
    (unsigned char *)"\370\374\255\234\056\273\347\074\312\077\314\231\063\047\366\270\044\357\303\113\057\132\264\050\274\371\346\233\341\127\277\372\225\063\343\245\136\141\217\106\243\304\171\226\055\133\026\173\016\174\056\122\237\120\217\303\171\221\075\173\371\362\345\261\036\302\347\042\152\120\324\240\317\105\352\027\346\034\277\373\356\273\141\303\206\015\141\325\252\125\172\022\251\167\350\153\306\017\017\034\070\360\317\271\317\007\344\150\072\140\300\200\177\263\142\305\212\030\337\311\257\245\245\316\173\347\316\235\141\357\336\275\261\336\073\075\343\111\244\034\275\006\305\342\215\324\077\260\116\156\336\274\071\256\233\366\021\110\175\365\017\044\214\031\063\046\152\160\323\246\115\141\335\272\165\125\346\054\212\144\331\363\247\006\105\015\212\032\374\013\135\273\166\215\147\301\335\273\167\207\123\247\116\205\065\153\326\130\013\041\145\205\331\141\305\064\110\034\161\342\304\211\141\375\372\365\324\147\377\273\334\327\236\314\321\250\262\262\362\344",
    (unsigned char *)"\332\265\153\303\333\157\277\135\345\336\150\146\043\257\134\271\062\134\270\160\041\174\370\341\207\001\217\355\054\144\051\027\304\017\113\351\151\340\300\201\141\307\216\035\141\377\376\375\341\354\331\263\141\313\226\055\361\036\112\237\235\224\003\326\067\172\373\252\233\265\270\155\333\266\030\103\074\163\346\114\330\263\147\217\375\370\122\326\363\042\353\140\241\371\357\152\120\324\240\250\301\277\334\137\305\354\272\305\213\027\207\223\047\117\306\363\340\365\353\327\303\326\255\133\235\151\047\145\351\153\306\373\162\167\132\251\334\063\265\017\304\157\162\076\373\120\243\037\076\236\172\352\251\216\071\377\374\267\107\216\034\211\065\072\371\171\146\356\021\332\267\157\137\270\165\353\126\370\362\313\057\343\372\111\375\216\375\373\362\240\271\076\326\111\146\153\263\377\026\213\037\342\253\271\147\215\274\063\261\106\142\070\067\156\334\010\357\277\377\176\354\213\056\265\327\213\124\347\233\333\267\157\037\347\170\222\107\051\126\127",
    (unsigned char *)"\103\337\137\273\166\355\142\277\025\272\103\203\354\331\347\317\237\217\175\371\245\356\010\024\251\256\356\246\115\233\066\241\242\242\042\316\032\341\174\130\254\217\105\015\212\032\224\206\254\101\364\107\075\054\263\160\016\034\070\020\056\135\272\024\256\136\275\032\176\375\353\137\207\017\076\370\040\314\232\065\053\366\237\352\113\244\246\060\123\011\277\214\027\341\236\051\136\351\133\346\174\230\176\057\167\000\321\313\314\232\067\143\306\214\377\230\373\132\273\106\171\037\071\375\056\076\176\374\370\367\170\150\374\111\072\247\215\217\271\173\367\156\344\362\345\313\061\026\111\175\055\367\231\123\127\301\235\154\370\167\362\203\042\371\164\352\324\051\172\145\342\056\254\177\314\041\341\036\077\276\136\310\077\343\261\131\113\271\257\000\215\345\164\371\343\172\111\034\347\312\225\053\141\373\366\355\141\332\264\151\321\003\161\117\064\332\043\016\211\057\362\231\113\002\272\140\155\142\215\142\217\036\061\142\104\354\253\237\076\175",
    (unsigned char *)"\172\324\040\357\141\175\113\327\160\363\071\336\032\315\162\106\074\174\370\160\324\040\332\103\203\304\162\310\301\314\236\075\073\364\353\327\357\076\015\362\352\363\227\104\203\304\002\321\010\363\213\271\123\000\015\162\157\044\277\106\237\205\356\074\125\203\242\006\245\241\153\060\311\375\021\277\041\277\107\115\054\065\020\304\160\076\377\374\363\230\327\343\025\037\115\076\232\036\175\374\064\063\221\251\267\345\274\051\015\013\346\065\244\111\176\017\135\044\263\261\231\257\304\354\057\356\232\302\077\223\333\113\353\217\374\012\167\124\021\067\334\265\153\327\337\067\155\332\164\154\243\002\037\071\055\177\100\135\004\353\041\167\375\025\352\337\077\175\372\164\214\371\260\166\342\147\310\015\222\223\306\317\320\233\260\161\343\306\230\343\376\051\101\275\273\074\070\364\113\321\253\102\374\206\365\157\354\330\261\321\367\262\267\222\147\046\317\227\337\007\315\257\131\117\321\065\275\372\150\352\334\271\163\121\157\300\336\315\036\316",
    (unsigned char *)"\032\112\054\022\355\361\036\376\036\360\231\113\002\077\277\364\354\261\066\361\372\336\173\357\305\271\210\254\247\254\161\354\353\150\060\335\363\302\347\304\273\331\207\227\054\131\022\165\305\332\210\366\022\035\176\372\351\247\121\227\007\017\036\214\032\344\373\047\172\127\207\222\017\332\240\377\204\127\326\102\064\205\037\341\156\013\316\224\304\275\323\263\040\320\040\161\161\065\050\152\120\032\252\006\001\015\062\213\011\177\314\036\116\257\051\261\234\104\207\274\176\374\361\307\321\103\237\070\161\042\034\072\164\050\236\015\361\046\071\317\043\265\204\032\145\352\216\171\206\217\032\350\202\234\133\232\143\307\216\005\362\303\254\123\374\333\360\014\234\005\307\215\033\027\136\172\351\245\202\065\255\344\242\211\301\340\173\361\317\255\132\265\132\335\250\310\307\343\217\077\376\144\116\323\377\012\157\302\177\007\232\115\153\231\317\211\043\241\371\205\013\027\106\115\363\136\236\071\275\252\350\233\263\352\117\005\176\326\371\267",
    (unsigned char *)"\021\123\340\147\121\152\007\077\207\150\202\175\024\377\114\034\207\030\020\261\030\362\313\334\351\307\332\111\037\152\022\367\241\117\237\076\027\366\142\364\316\172\010\324\075\174\361\305\027\221\317\076\373\054\352\231\136\230\374\237\011\237\271\344\303\317\055\260\066\261\136\262\357\022\163\144\375\142\175\053\126\063\306\072\107\254\207\237\177\366\142\364\307\032\174\361\342\305\250\077\142\336\354\333\037\175\364\121\254\151\144\315\106\203\364\352\373\334\045\255\101\136\331\053\071\067\062\207\211\171\234\304\301\251\201\140\357\046\206\130\110\203\304\310\325\240\250\101\151\250\032\114\346\327\121\073\213\366\320\041\365\257\253\127\257\216\173\072\132\043\217\107\134\207\337\347\034\230\370\021\336\207\166\245\166\360\377\207\347\313\314\253\107\011\152\023\222\174\062\165\324\274\346\103\375\041\167\361\341\073\270\003\015\275\025\233\027\106\136\205\272\232\144\255\253\250\250\270\236\373\172\343\106\045\076\236\175\366\331\356",
    (unsigned char *)"\107\217\036\375\157\254\213\370\023\356\272\052\325\123\215\327\341\374\111\015\144\002\075\010\077\025\170\206\344\251\210\121\220\067\225\332\101\275\066\232\045\237\214\137\301\053\363\074\171\145\076\130\322\203\112\335\104\022\253\341\225\131\360\324\366\020\367\346\347\201\032\037\326\331\251\123\247\306\257\241\153\276\306\173\360\343\374\377\361\377\221\024\202\275\227\265\024\015\262\117\123\147\110\375\030\065\335\364\136\025\272\133\234\065\225\065\066\255\101\076\117\064\310\332\250\006\245\246\260\177\263\167\347\153\220\370\015\275\175\205\172\360\325\240\250\101\151\350\032\004\366\151\316\212\314\261\243\316\226\367\323\377\107\375\030\175\002\344\364\350\177\246\066\234\363\044\277\047\017\106\162\036\307\333\361\363\317\171\374\121\242\034\275\321\234\015\251\163\240\107\340\316\235\073\304\020\277\155\334\270\361\323\215\152\360\321\266\155\333\227\266\156\335\372\307\257\276\372\052\366\025\220\007\104\353\316\336\026\021\021",
    (unsigned char *)"\021\021\021\221\237\312\074\061\172\360\211\011\122\317\100\237\362\265\153\327\376\161\366\354\331\307\233\064\151\362\104\243\132\174\074\366\330\143\115\046\117\236\274\375\312\225\053\177\376\372\353\257\143\217\013\365\020\324\337\222\067\244\127\201\331\117\245\356\116\025\021\021\021\021\021\021\371\347\060\367\035\377\112\335\002\175\244\324\317\160\207\063\175\316\324\152\337\276\175\233\276\320\177\133\121\121\061\271\121\035\076\272\164\351\062\050\347\233\377\170\363\346\315\357\310\105\323\167\312\135\320\107\217\036\215\375\301\364\377\123\267\223\324\144\320\327\132\116\250\035\142\216\017\265\277\374\073\251\341\240\336\203\136\011\152\065\250\067\300\313\047\263\277\231\111\225\100\075\210\210\210\210\210\210\074\132\264\155\333\066\236\365\351\373\343\016\015\311\026\074\026\276\213\031\253\370\112\172\045\311\311\076\352\360\357\000\346\337\320\047\115\157\074\363\223\230\367\205\257\275\166\355\132\162\107\356\177\231\063\147",
    (unsigned char *)"\316\261\247\237\176\272\155\243\062\175\164\357\336\175\104\356\131\036\133\277\176\375\137\345\376\316\377\365\311\047\237\174\117\116\232\271\021\170\166\172\372\351\333\117\346\365\144\061\017\216\127\152\311\201\231\124\364\271\047\063\277\223\271\337\371\163\037\105\104\104\104\104\344\321\203\274\040\347\175\147\260\325\317\214\267\144\036\033\063\365\171\305\333\361\065\374\335\077\147\370\157\314\047\377\367\230\161\315\134\103\140\306\034\377\266\234\207\145\146\373\377\073\162\344\310\377\314\151\354\137\114\237\076\375\330\053\257\274\062\067\347\233\333\325\324\027\377\177\113\174\220\243"    };
  glsInlineImage GLStudio_WarningLightsClass::image_data_0(976,122,4,6408,GLS_CODEC_LZ77,704234865ul,false, 9992,0,240, GLStudio_WarningLightsClass::rgb_data_0, NULL);

#ifdef GLS_CREATEOBJECTS_OPTIMIZE
#ifdef WIN32
#pragma optimize("", on)
#endif
#endif

void GLStudio_WarningLightsClass::CreateObjects(void)
{
    const unsigned int frameAvailableAttributes = 2147483647;

    // Instance all fonts referenced by text objects in this class
    GlsArialRegular12::Instance();

    objects->InitialGroupCount(14);
    // Initialization code for GLPolygon warningLights
    warningLights = new GLPolygon();
    warningLights->VaSetVertices(4,
        255,255,255,255,    0.000000f,    0.000000f,    0.000000f,
        255,255,255,255,  976.000000f,    0.000000f,    0.000000f,
        255,255,255,255,  976.000000f,  122.000000f,    0.000000f,
        255,255,255,255,    0.000000f,  122.000000f,    0.000000f);

    warningLights->VaSetTexCoords(4,
            0.000000f,    0.000000f,    0.000000f,
            1.000000f,    0.000000f,    0.000000f,
            1.000000f,    1.000000f,    0.000000f,
            0.000000f,    1.000000f,    0.000000f);

    warningLights->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,   -0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
           -0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    warningLights->SetAvailableAttributes(frameAvailableAttributes);
    warningLights->Set(
        GLS_INSTANCE_NAME,           "warningLights",
        GLS_LOCATION,                0.000000000f, 0.000000000f, 0.000000000f,
        GLS_TEXTURE_INDEX,           0,
        GLS_TEXTURE_REPEAT,          FALSE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_LIGHTING_ENABLED,        0,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          976.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 122.000000000f, 0.000000000f,
                                     976.000000000f, 122.000000000f, 0.000000000f,
        NULL);

    DisplayFrame::InsertObject(warningLights,true,false);

    // Initialization code for Group text7Group
    text7Group = new Group();
    // Initialization code generated by DisplayObject class
    text7Group->SetAvailableAttributes(frameAvailableAttributes);
    text7Group->Set(
        GLS_INSTANCE_NAME,           "text7Group",
        GLS_LOCATION,                85.000000000f, 34.500000000f, 0.000000000f,
        GLS_BLINK_RATE,              1.000000000,
        GLS_TEXTURE_POINTS,          70.000000000f, -22.500000000f, -0.000000000f,
                                     -69.999992371f, -22.500000000f, -0.000000000f,
                                     -69.999992371f, 117.500000000f, -0.000000000f,
                                     70.000000000f, 117.500000000f, -0.000000000f,
        NULL);

    text7Group->PerformGroupCullCheck(0);
    text7Group->CullTestChildren(1);
    text7Group->InitialGroupCount(3);
    // Initialization code for GLPolygon carpet7
    carpet7 = new GLPolygon();
    carpet7->VaSetVertices(4,
          1, 85,  0,255,  -69.999992f,  -20.000000f,    0.000000f,
          1, 85,  0,255,   70.000000f,  -20.000000f,    0.000000f,
          1, 85,  0,255,   70.000000f,   20.000000f,    0.000000f,
          1, 85,  0,255,  -69.999992f,   20.000000f,    0.000000f);

    carpet7->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    carpet7->SetAvailableAttributes(frameAvailableAttributes);
    carpet7->Set(
        GLS_INSTANCE_NAME,           "carpet7",
        GLS_LOCATION,                85.000000000f, 35.000000000f, 0.000000000f,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_BLINK_RATE,              1.000000000,
        GLS_LIGHTING_ENABLED,        0,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          70.000000000f, -20.000000000f, 0.000000000f,
                                     -69.999992371f, -20.000000000f, 0.000000000f,
                                     -69.999992371f, 130.000000000f, 0.000000000f,
                                     70.000000000f, 130.000000000f, 0.000000000f,
        NULL);

    text7Group->Group::InsertObject(carpet7,true,false);
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text7
    // Base class initializers will be set up first.
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text7
    text7 = new GlsTextBox();
    text7->VaSetVertices(4,
          0,  0,  0,  0,    0.000000f,    0.000000f,    0.000000f,
          0,  0,  0,  0,   90.000000f,    0.000000f,    0.000000f,
          0,  0,  0,  0,   90.000000f,   45.000000f,   -0.000000f,
          0,  0,  0,  0,    0.000000f,   45.000000f,   -0.000000f);

    text7->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    text7->SetAvailableAttributes(frameAvailableAttributes);
    text7->Set(
        GLS_INSTANCE_NAME,           "text7",
        GLS_LOCATION,                39.000000000f, 12.000000000f, 0.000000000f,
        GLS_TEXTURE_REPEAT,          TRUE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_BLINK_RATE,              1.000000000,
        GLS_LIGHTING_ENABLED,        0,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
        NULL);

    // Set GlsTextBox specific initializers now
    text7->Set(
        GLS_TEXT_BORDER, 0.000000000f,
        GLS_TEXT_CELL_HEIGHT, 17.000000000f,
        GLS_TEXT_CELL_WIDTH, 16.000000000f,
        GLS_TEXT_CONSTRAIN_CELL_RATIO, true,
        GLS_TEXT_CONTROL_CELL_SIZE, false,
        GLS_TEXT_FONT, "Arial", "Regular", 12,
        GLS_TEXT_LINESPACING, 1.000000000f,
        GLS_TEXT_HALO, false, 0, 0, 0, 0,
        GLS_TEXT_LOCK_CELL_SIZE, true,
        GLS_TEXT_JUSTIFY, 1,
        GLS_TEXT_SHADOW, false, 0.129999995f, -0.129999995f, 128, 128, 128, 255,
        GLS_TEXT_STRING,
            "DOOR AJAR",
        GLS_TEXT_UPPERCASE, false,
        GLS_TEXT_WRAP, true,
        NULL);

    // Call initialize on the object after the Set methods so that the grid
    // will be sized properly before any row,column specific (individual characters) calls are made.
    text7->Initialize();
    text7->VerticalAlignment(GlsTextBox::ALIGN_CENTER);
    text7->LeftToRight(true);

   // Call GlsTextBox methods to set up individual character attributes.
    text7->Baseline(0.000000000f);
    text7->BgColor(GlsColor(255,255,255,0));
    text7->TextColor(GlsColor(255,255,255,255));
    text7->CharScaling(1.000000000f);
    text7->CharSpacing(1.000000000f);
    text7->FauxBold(false);
    text7->Inverse(false);
    text7->StrikeThru(false);
    text7->Underline(false);

    // Call initialize on the object after all character attribute methods
    // in case character settings affect the extents of the grid.
    text7->Initialize();

    // End of initialization code for GlsTextBox text7
    //--------------------------------------------------------------------

    text7Group->Group::InsertObject(text7,true,false);
    text7Group->CalculateBoundingBox();
    DisplayFrame::InsertObject(text7Group,true,false);

    // Initialization code for Group text7Group_1
    text7Group_1 = new Group();
    // Initialization code generated by DisplayObject class
    text7Group_1->SetAvailableAttributes(frameAvailableAttributes);
    text7Group_1->Set(
        GLS_INSTANCE_NAME,           "text7Group_1",
        GLS_LOCATION,                245.000000000f, 34.500000000f, 0.000000000f,
        GLS_BLINK_RATE,              1.000000000,
        GLS_TEXTURE_POINTS,          70.000000000f, -22.500000000f, -0.000000000f,
                                     -69.999992371f, -22.500000000f, -0.000000000f,
                                     -69.999992371f, 117.500000000f, -0.000000000f,
                                     70.000000000f, 117.500000000f, -0.000000000f,
        NULL);

    text7Group_1->PerformGroupCullCheck(false);
    text7Group_1->CullTestChildren(true);
    text7Group_1->InitialGroupCount(3);
    // Initialization code for GLPolygon carpet8
    carpet8 = new GLPolygon();
    carpet8->VaSetVertices(4,
         85, 76,  8,255,  -69.999992f,  -20.000000f,    0.000000f,
         85, 76,  8,255,   70.000000f,  -20.000000f,    0.000000f,
         85, 76,  8,255,   70.000000f,   20.000000f,    0.000000f,
         85, 76,  8,255,  -69.999992f,   20.000000f,    0.000000f);

    carpet8->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    carpet8->SetAvailableAttributes(frameAvailableAttributes);
    carpet8->Set(
        GLS_INSTANCE_NAME,           "carpet8",
        GLS_LOCATION,                245.000000000f, 35.000000000f, 0.000000000f,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_BLINK_RATE,              1.000000000,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          70.000000000f, -20.000000000f, 0.000000000f,
                                     -69.999992371f, -20.000000000f, 0.000000000f,
                                     -69.999992371f, 130.000000000f, 0.000000000f,
                                     70.000000000f, 130.000000000f, 0.000000000f,
        NULL);

    text7Group_1->Group::InsertObject(carpet8,true,false);
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text8
    // Base class initializers will be set up first.
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text8
    text8 = new GlsTextBox();
    text8->VaSetVertices(4,
          0,  0,  0,  0,    0.000000f,    0.000000f,    0.000000f,
          0,  0,  0,  0,   90.000000f,    0.000000f,    0.000000f,
          0,  0,  0,  0,   90.000000f,   45.000000f,   -0.000000f,
          0,  0,  0,  0,    0.000000f,   45.000000f,   -0.000000f);

    text8->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    text8->SetAvailableAttributes(frameAvailableAttributes);
    text8->Set(
        GLS_INSTANCE_NAME,           "text8",
        GLS_LOCATION,                199.000000000f, 12.000000000f, 0.000000000f,
        GLS_TEXTURE_REPEAT,          TRUE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_BLINK_RATE,              1.000000000,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
        NULL);

    // Set GlsTextBox specific initializers now
    text8->Set(
        GLS_TEXT_BORDER, 0.000000000f,
        GLS_TEXT_CELL_HEIGHT, 17.000000000f,
        GLS_TEXT_CELL_WIDTH, 16.000000000f,
        GLS_TEXT_CONSTRAIN_CELL_RATIO, true,
        GLS_TEXT_CONTROL_CELL_SIZE, false,
        GLS_TEXT_FONT, "Arial", "Regular", 12,
        GLS_TEXT_LINESPACING, 1.000000000f,
        GLS_TEXT_HALO, false, 0, 0, 0, 0,
        GLS_TEXT_LOCK_CELL_SIZE, true,
        GLS_TEXT_JUSTIFY, 1,
        GLS_TEXT_SHADOW, false, 0.129999995f, -0.129999995f, 128, 128, 128, 255,
        GLS_TEXT_STRING,
            "VACUUM LOW",
        GLS_TEXT_UPPERCASE, false,
        GLS_TEXT_WRAP, true,
        NULL);

    // Call initialize on the object after the Set methods so that the grid
    // will be sized properly before any row,column specific (individual characters) calls are made.
    text8->Initialize();
    text8->VerticalAlignment(GlsTextBox::ALIGN_CENTER);
    text8->LeftToRight(true);

   // Call GlsTextBox methods to set up individual character attributes.
    text8->Baseline(0.000000000f);
    text8->BgColor(GlsColor(255,255,255,0));
    text8->TextColor(GlsColor(255,255,255,255));
    text8->CharScaling(1.000000000f);
    text8->CharSpacing(1.000000000f);
    text8->FauxBold(false);
    text8->Inverse(false);
    text8->StrikeThru(false);
    text8->Underline(false);

    // Call initialize on the object after all character attribute methods
    // in case character settings affect the extents of the grid.
    text8->Initialize();

    // End of initialization code for GlsTextBox text8
    //--------------------------------------------------------------------

    text7Group_1->Group::InsertObject(text8,true,false);
    text7Group_1->CalculateBoundingBox();
    DisplayFrame::InsertObject(text7Group_1,true,false);

    // Initialization code for Group text7Group_2
    text7Group_2 = new Group();
    // Initialization code generated by DisplayObject class
    text7Group_2->SetAvailableAttributes(frameAvailableAttributes);
    text7Group_2->Set(
        GLS_INSTANCE_NAME,           "text7Group_2",
        GLS_LOCATION,                405.000000000f, 34.500000000f, 0.000000000f,
        GLS_BLINK_RATE,              1.000000000,
        GLS_TEXTURE_POINTS,          70.000000000f, -22.500000000f, -0.000000000f,
                                     -69.999992371f, -22.500000000f, -0.000000000f,
                                     -69.999992371f, 117.500000000f, -0.000000000f,
                                     70.000000000f, 117.500000000f, -0.000000000f,
        NULL);

    text7Group_2->PerformGroupCullCheck(false);
    text7Group_2->CullTestChildren(true);
    text7Group_2->InitialGroupCount(3);
    // Initialization code for GLPolygon carpet9
    carpet9 = new GLPolygon();
    carpet9->VaSetVertices(4,
         12, 59, 85,255,  -69.999992f,  -20.000000f,    0.000000f,
         12, 59, 85,255,   70.000000f,  -20.000000f,    0.000000f,
         12, 59, 85,255,   70.000000f,   20.000000f,    0.000000f,
         12, 59, 85,255,  -69.999992f,   20.000000f,    0.000000f);

    carpet9->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    carpet9->SetAvailableAttributes(frameAvailableAttributes);
    carpet9->Set(
        GLS_INSTANCE_NAME,           "carpet9",
        GLS_LOCATION,                405.000000000f, 35.000000000f, 0.000000000f,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_BLINK_RATE,              1.000000000,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          70.000000000f, -20.000000000f, 0.000000000f,
                                     -69.999992371f, -20.000000000f, 0.000000000f,
                                     -69.999992371f, 130.000000000f, 0.000000000f,
                                     70.000000000f, 130.000000000f, 0.000000000f,
        NULL);

    text7Group_2->Group::InsertObject(carpet9,true,false);
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text9
    // Base class initializers will be set up first.
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text9
    text9 = new GlsTextBox();
    text9->VaSetVertices(4,
          0,  0,  0,  0,    0.000000f,    0.000000f,    0.000000f,
          0,  0,  0,  0,   90.000000f,    0.000000f,    0.000000f,
          0,  0,  0,  0,   90.000000f,   45.000000f,   -0.000000f,
          0,  0,  0,  0,    0.000000f,   45.000000f,   -0.000000f);

    text9->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    text9->SetAvailableAttributes(frameAvailableAttributes);
    text9->Set(
        GLS_INSTANCE_NAME,           "text9",
        GLS_LOCATION,                359.000000000f, 12.000000000f, 0.000000000f,
        GLS_TEXTURE_REPEAT,          TRUE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_BLINK_RATE,              1.000000000,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
        NULL);

    // Set GlsTextBox specific initializers now
    text9->Set(
        GLS_TEXT_BORDER, 0.000000000f,
        GLS_TEXT_CELL_HEIGHT, 17.000000000f,
        GLS_TEXT_CELL_WIDTH, 16.000000000f,
        GLS_TEXT_CONSTRAIN_CELL_RATIO, true,
        GLS_TEXT_CONTROL_CELL_SIZE, false,
        GLS_TEXT_FONT, "Arial", "Regular", 12,
        GLS_TEXT_LINESPACING, 1.000000000f,
        GLS_TEXT_HALO, false, 0, 0, 0, 0,
        GLS_TEXT_LOCK_CELL_SIZE, true,
        GLS_TEXT_JUSTIFY, 1,
        GLS_TEXT_SHADOW, false, 0.129999995f, -0.129999995f, 128, 128, 128, 255,
        GLS_TEXT_STRING,
            "CABIN ALTITUDE",
        GLS_TEXT_UPPERCASE, false,
        GLS_TEXT_WRAP, true,
        NULL);

    // Call initialize on the object after the Set methods so that the grid
    // will be sized properly before any row,column specific (individual characters) calls are made.
    text9->Initialize();
    text9->VerticalAlignment(GlsTextBox::ALIGN_CENTER);
    text9->LeftToRight(true);

   // Call GlsTextBox methods to set up individual character attributes.
    text9->Baseline(0.000000000f);
    text9->BgColor(GlsColor(255,255,255,0));
    text9->TextColor(GlsColor(255,255,255,255));
    text9->CharScaling(1.000000000f);
    text9->CharSpacing(1.000000000f);
    text9->FauxBold(false);
    text9->Inverse(false);
    text9->StrikeThru(false);
    text9->Underline(false);

    // Call initialize on the object after all character attribute methods
    // in case character settings affect the extents of the grid.
    text9->Initialize();

    // End of initialization code for GlsTextBox text9
    //--------------------------------------------------------------------

    text7Group_2->Group::InsertObject(text9,true,false);
    text7Group_2->CalculateBoundingBox();
    DisplayFrame::InsertObject(text7Group_2,true,false);

    // Initialization code for Group text7Group_3
    text7Group_3 = new Group();
    // Initialization code generated by DisplayObject class
    text7Group_3->SetAvailableAttributes(frameAvailableAttributes);
    text7Group_3->Set(
        GLS_INSTANCE_NAME,           "text7Group_3",
        GLS_LOCATION,                85.000000000f, 90.500000000f, 0.000000000f,
        GLS_BLINK_RATE,              1.000000000,
        GLS_TEXTURE_POINTS,          70.000000000f, -22.500000000f, -0.000000000f,
                                     -69.999992371f, -22.500000000f, -0.000000000f,
                                     -69.999992371f, 117.500000000f, -0.000000000f,
                                     70.000000000f, 117.500000000f, -0.000000000f,
        NULL);

    text7Group_3->PerformGroupCullCheck(false);
    text7Group_3->CullTestChildren(true);
    text7Group_3->InitialGroupCount(3);
    // Initialization code for GLPolygon carpet1
    carpet1 = new GLPolygon();
    carpet1->VaSetVertices(4,
         59,  0, 85,255,  -69.999992f,  -20.000000f,    0.000000f,
         59,  0, 85,255,   70.000000f,  -20.000000f,    0.000000f,
         59,  0, 85,255,   70.000000f,   20.000000f,    0.000000f,
         59,  0, 85,255,  -69.999992f,   20.000000f,    0.000000f);

    carpet1->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    carpet1->SetAvailableAttributes(frameAvailableAttributes);
    carpet1->Set(
        GLS_INSTANCE_NAME,           "carpet1",
        GLS_LOCATION,                85.000000000f, 91.000000000f, 0.000000000f,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_BLINK_RATE,              1.000000000,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          70.000000000f, -20.000000000f, 0.000000000f,
                                     -69.999992371f, -20.000000000f, 0.000000000f,
                                     -69.999992371f, 130.000000000f, 0.000000000f,
                                     70.000000000f, 130.000000000f, 0.000000000f,
        NULL);

    text7Group_3->Group::InsertObject(carpet1,true,false);
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text1
    // Base class initializers will be set up first.
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text1
    text1 = new GlsTextBox();
    text1->VaSetVertices(4,
          0,  0,  0,  0,    0.000000f,    0.000000f,    0.000000f,
          0,  0,  0,  0,   90.000000f,    0.000000f,    0.000000f,
          0,  0,  0,  0,   90.000000f,   45.000000f,   -0.000000f,
          0,  0,  0,  0,    0.000000f,   45.000000f,   -0.000000f);

    text1->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    text1->SetAvailableAttributes(frameAvailableAttributes);
    text1->Set(
        GLS_INSTANCE_NAME,           "text1",
        GLS_LOCATION,                39.000000000f, 68.000000000f, 0.000000000f,
        GLS_TEXTURE_REPEAT,          TRUE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_BLINK_RATE,              1.000000000,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
        NULL);

    // Set GlsTextBox specific initializers now
    text1->Set(
        GLS_TEXT_BORDER, 0.000000000f,
        GLS_TEXT_CELL_HEIGHT, 17.000000000f,
        GLS_TEXT_CELL_WIDTH, 16.000000000f,
        GLS_TEXT_CONSTRAIN_CELL_RATIO, true,
        GLS_TEXT_CONTROL_CELL_SIZE, false,
        GLS_TEXT_FONT, "Arial", "Regular", 12,
        GLS_TEXT_LINESPACING, 1.000000000f,
        GLS_TEXT_HALO, false, 0, 0, 0, 0,
        GLS_TEXT_LOCK_CELL_SIZE, true,
        GLS_TEXT_JUSTIFY, 1,
        GLS_TEXT_SHADOW, false, 0.129999995f, -0.129999995f, 128, 128, 128, 255,
        GLS_TEXT_STRING,
            "GEAR WARNING",
        GLS_TEXT_UPPERCASE, false,
        GLS_TEXT_WRAP, true,
        NULL);

    // Call initialize on the object after the Set methods so that the grid
    // will be sized properly before any row,column specific (individual characters) calls are made.
    text1->Initialize();
    text1->VerticalAlignment(GlsTextBox::ALIGN_CENTER);
    text1->LeftToRight(true);

   // Call GlsTextBox methods to set up individual character attributes.
    text1->Baseline(0.000000000f);
    text1->BgColor(GlsColor(255,255,255,0));
    text1->TextColor(GlsColor(255,255,255,255));
    text1->CharScaling(1.000000000f);
    text1->CharSpacing(1.000000000f);
    text1->FauxBold(false);
    text1->Inverse(false);
    text1->StrikeThru(false);
    text1->Underline(false);

    // Call initialize on the object after all character attribute methods
    // in case character settings affect the extents of the grid.
    text1->Initialize();

    // End of initialization code for GlsTextBox text1
    //--------------------------------------------------------------------

    text7Group_3->Group::InsertObject(text1,true,false);
    text7Group_3->CalculateBoundingBox();
    DisplayFrame::InsertObject(text7Group_3,true,false);

    // Initialization code for Group text7Group_4
    text7Group_4 = new Group();
    // Initialization code generated by DisplayObject class
    text7Group_4->SetAvailableAttributes(frameAvailableAttributes);
    text7Group_4->Set(
        GLS_INSTANCE_NAME,           "text7Group_4",
        GLS_LOCATION,                245.000000000f, 90.500000000f, 0.000000000f,
        GLS_BLINK_RATE,              1.000000000,
        GLS_TEXTURE_POINTS,          70.000000000f, -22.500000000f, -0.000000000f,
                                     -69.999992371f, -22.500000000f, -0.000000000f,
                                     -69.999992371f, 117.500000000f, -0.000000000f,
                                     70.000000000f, 117.500000000f, -0.000000000f,
        NULL);

    text7Group_4->PerformGroupCullCheck(false);
    text7Group_4->CullTestChildren(true);
    text7Group_4->InitialGroupCount(3);
    // Initialization code for GLPolygon carpet2
    carpet2 = new GLPolygon();
    carpet2->VaSetVertices(4,
         85, 20, 21,255,  -69.999992f,  -20.000000f,    0.000000f,
         85, 20, 21,255,   70.000000f,  -20.000000f,    0.000000f,
         85, 20, 21,255,   70.000000f,   20.000000f,    0.000000f,
         85, 20, 21,255,  -69.999992f,   20.000000f,    0.000000f);

    carpet2->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    carpet2->SetAvailableAttributes(frameAvailableAttributes);
    carpet2->Set(
        GLS_INSTANCE_NAME,           "carpet2",
        GLS_LOCATION,                245.000000000f, 91.000000000f, 0.000000000f,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_BLINK_RATE,              1.000000000,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          70.000000000f, -20.000000000f, 0.000000000f,
                                     -69.999992371f, -20.000000000f, 0.000000000f,
                                     -69.999992371f, 130.000000000f, 0.000000000f,
                                     70.000000000f, 130.000000000f, 0.000000000f,
        NULL);

    text7Group_4->Group::InsertObject(carpet2,true,false);
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text2
    // Base class initializers will be set up first.
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text2
    text2 = new GlsTextBox();
    text2->VaSetVertices(4,
          0,  0,  0,  0,    0.000000f,    0.000000f,    0.000000f,
          0,  0,  0,  0,   90.000000f,    0.000000f,    0.000000f,
          0,  0,  0,  0,   90.000000f,   45.000000f,   -0.000000f,
          0,  0,  0,  0,    0.000000f,   45.000000f,   -0.000000f);

    text2->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    text2->SetAvailableAttributes(frameAvailableAttributes);
    text2->Set(
        GLS_INSTANCE_NAME,           "text2",
        GLS_LOCATION,                199.000000000f, 68.000000000f, 0.000000000f,
        GLS_TEXTURE_REPEAT,          TRUE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_BLINK_RATE,              1.000000000,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
        NULL);

    // Set GlsTextBox specific initializers now
    text2->Set(
        GLS_TEXT_BORDER, 0.000000000f,
        GLS_TEXT_CELL_HEIGHT, 17.000000000f,
        GLS_TEXT_CELL_WIDTH, 16.000000000f,
        GLS_TEXT_CONSTRAIN_CELL_RATIO, true,
        GLS_TEXT_CONTROL_CELL_SIZE, false,
        GLS_TEXT_FONT, "Arial", "Regular", 12,
        GLS_TEXT_LINESPACING, 1.000000000f,
        GLS_TEXT_HALO, false, 0, 0, 0, 0,
        GLS_TEXT_LOCK_CELL_SIZE, true,
        GLS_TEXT_JUSTIFY, 1,
        GLS_TEXT_SHADOW, false, 0.129999995f, -0.129999995f, 128, 128, 128, 255,
        GLS_TEXT_STRING,
            "OIL PRESSURE",
        GLS_TEXT_UPPERCASE, false,
        GLS_TEXT_WRAP, true,
        NULL);

    // Call initialize on the object after the Set methods so that the grid
    // will be sized properly before any row,column specific (individual characters) calls are made.
    text2->Initialize();
    text2->VerticalAlignment(GlsTextBox::ALIGN_CENTER);
    text2->LeftToRight(true);

   // Call GlsTextBox methods to set up individual character attributes.
    text2->Baseline(0.000000000f);
    text2->BgColor(GlsColor(255,255,255,0));
    text2->TextColor(GlsColor(255,255,255,255));
    text2->CharScaling(1.000000000f);
    text2->CharSpacing(1.000000000f);
    text2->FauxBold(false);
    text2->Inverse(false);
    text2->StrikeThru(false);
    text2->Underline(false);

    // Call initialize on the object after all character attribute methods
    // in case character settings affect the extents of the grid.
    text2->Initialize();

    // End of initialization code for GlsTextBox text2
    //--------------------------------------------------------------------

    text7Group_4->Group::InsertObject(text2,true,false);
    text7Group_4->CalculateBoundingBox();
    DisplayFrame::InsertObject(text7Group_4,true,false);

    // Initialization code for Group text7Group_5
    text7Group_5 = new Group();
    // Initialization code generated by DisplayObject class
    text7Group_5->SetAvailableAttributes(frameAvailableAttributes);
    text7Group_5->Set(
        GLS_INSTANCE_NAME,           "text7Group_5",
        GLS_LOCATION,                405.000000000f, 90.500000000f, 0.000000000f,
        GLS_BLINK_RATE,              1.000000000,
        GLS_TEXTURE_POINTS,          70.000000000f, -22.500000000f, -0.000000000f,
                                     -69.999992371f, -22.500000000f, -0.000000000f,
                                     -69.999992371f, 117.500000000f, -0.000000000f,
                                     70.000000000f, 117.500000000f, -0.000000000f,
        NULL);

    text7Group_5->PerformGroupCullCheck(false);
    text7Group_5->CullTestChildren(true);
    text7Group_5->InitialGroupCount(3);
    // Initialization code for GLPolygon carpet3
    carpet3 = new GLPolygon();
    carpet3->VaSetVertices(4,
         85,  0,  0,255,  -69.999992f,  -20.000000f,    0.000000f,
         85,  0,  0,255,   70.000000f,  -20.000000f,    0.000000f,
         85,  0,  0,255,   70.000000f,   20.000000f,    0.000000f,
         85,  0,  0,255,  -69.999992f,   20.000000f,    0.000000f);

    carpet3->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    carpet3->SetAvailableAttributes(frameAvailableAttributes);
    carpet3->Set(
        GLS_INSTANCE_NAME,           "carpet3",
        GLS_LOCATION,                405.000000000f, 91.000000000f, 0.000000000f,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_BLINK_RATE,              1.000000000,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          70.000000000f, -20.000000000f, 0.000000000f,
                                     -69.999992371f, -20.000000000f, 0.000000000f,
                                     -69.999992371f, 130.000000000f, 0.000000000f,
                                     70.000000000f, 130.000000000f, 0.000000000f,
        NULL);

    text7Group_5->Group::InsertObject(carpet3,true,false);
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text3
    // Base class initializers will be set up first.
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text3
    text3 = new GlsTextBox();
    text3->VaSetVertices(4,
          0,  0,  0,  0,    0.000000f,    0.000000f,    0.000000f,
          0,  0,  0,  0,   90.000000f,    0.000000f,    0.000000f,
          0,  0,  0,  0,   90.000000f,   45.000000f,   -0.000000f,
          0,  0,  0,  0,    0.000000f,   45.000000f,   -0.000000f);

    text3->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    text3->SetAvailableAttributes(frameAvailableAttributes);
    text3->Set(
        GLS_INSTANCE_NAME,           "text3",
        GLS_LOCATION,                359.000000000f, 68.000000000f, 0.000000000f,
        GLS_TEXTURE_REPEAT,          TRUE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_BLINK_RATE,              1.000000000,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
        NULL);

    // Set GlsTextBox specific initializers now
    text3->Set(
        GLS_TEXT_BORDER, 0.000000000f,
        GLS_TEXT_CELL_HEIGHT, 17.000000000f,
        GLS_TEXT_CELL_WIDTH, 16.000000000f,
        GLS_TEXT_CONSTRAIN_CELL_RATIO, true,
        GLS_TEXT_CONTROL_CELL_SIZE, false,
        GLS_TEXT_FONT, "Arial", "Regular", 12,
        GLS_TEXT_LINESPACING, 1.000000000f,
        GLS_TEXT_HALO, false, 0, 0, 0, 0,
        GLS_TEXT_LOCK_CELL_SIZE, true,
        GLS_TEXT_JUSTIFY, 1,
        GLS_TEXT_SHADOW, false, 0.129999995f, -0.129999995f, 128, 128, 128, 255,
        GLS_TEXT_STRING,
            "STARTER",
        GLS_TEXT_UPPERCASE, false,
        GLS_TEXT_WRAP, true,
        NULL);

    // Call initialize on the object after the Set methods so that the grid
    // will be sized properly before any row,column specific (individual characters) calls are made.
    text3->Initialize();
    text3->VerticalAlignment(GlsTextBox::ALIGN_CENTER);
    text3->LeftToRight(true);

   // Call GlsTextBox methods to set up individual character attributes.
    text3->Baseline(0.000000000f);
    text3->BgColor(GlsColor(255,255,255,0));
    text3->TextColor(GlsColor(255,255,255,255));
    text3->CharScaling(1.000000000f);
    text3->CharSpacing(1.000000000f);
    text3->FauxBold(false);
    text3->Inverse(false);
    text3->StrikeThru(false);
    text3->Underline(false);

    // Call initialize on the object after all character attribute methods
    // in case character settings affect the extents of the grid.
    text3->Initialize();

    // End of initialization code for GlsTextBox text3
    //--------------------------------------------------------------------

    text7Group_5->Group::InsertObject(text3,true,false);
    text7Group_5->CalculateBoundingBox();
    DisplayFrame::InsertObject(text7Group_5,true,false);

    // Initialization code for Group text7Group_6
    text7Group_6 = new Group();
    // Initialization code generated by DisplayObject class
    text7Group_6->SetAvailableAttributes(frameAvailableAttributes);
    text7Group_6->Set(
        GLS_INSTANCE_NAME,           "text7Group_6",
        GLS_LOCATION,                568.000000000f, 90.500000000f, 0.000000000f,
        GLS_BLINK_RATE,              1.000000000,
        GLS_TEXTURE_POINTS,          70.000000000f, -22.500000000f, -0.000000000f,
                                     -69.999992371f, -22.500000000f, -0.000000000f,
                                     -69.999992371f, 117.500000000f, -0.000000000f,
                                     70.000000000f, 117.500000000f, -0.000000000f,
        NULL);

    text7Group_6->PerformGroupCullCheck(false);
    text7Group_6->CullTestChildren(true);
    text7Group_6->InitialGroupCount(3);
    // Initialization code for GLPolygon carpet4
    carpet4 = new GLPolygon();
    carpet4->VaSetVertices(4,
          0, 85,127,255,  -69.999992f,  -20.000000f,    0.000000f,
          0, 85,127,255,   70.000000f,  -20.000000f,    0.000000f,
          0, 85,127,255,   70.000000f,   20.000000f,    0.000000f,
          0, 85,127,255,  -69.999992f,   20.000000f,    0.000000f);

    carpet4->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    carpet4->SetAvailableAttributes(frameAvailableAttributes);
    carpet4->Set(
        GLS_INSTANCE_NAME,           "carpet4",
        GLS_LOCATION,                568.000000000f, 91.000000000f, 0.000000000f,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_BLINK_RATE,              1.000000000,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          70.000000000f, -20.000000000f, 0.000000000f,
                                     -69.999992371f, -20.000000000f, 0.000000000f,
                                     -69.999992371f, 130.000000000f, 0.000000000f,
                                     70.000000000f, 130.000000000f, 0.000000000f,
        NULL);

    text7Group_6->Group::InsertObject(carpet4,true,false);
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text4
    // Base class initializers will be set up first.
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text4
    text4 = new GlsTextBox();
    text4->VaSetVertices(4,
          0,  0,  0,  0,    0.000000f,    0.000000f,    0.000000f,
          0,  0,  0,  0,  122.000000f,    0.000000f,    0.000000f,
          0,  0,  0,  0,  122.000000f,   45.000000f,   -0.000000f,
          0,  0,  0,  0,    0.000000f,   45.000000f,   -0.000000f);

    text4->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    text4->SetAvailableAttributes(frameAvailableAttributes);
    text4->Set(
        GLS_INSTANCE_NAME,           "text4",
        GLS_LOCATION,                510.000000000f, 68.000000000f, 0.000000000f,
        GLS_TEXTURE_REPEAT,          TRUE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_BLINK_RATE,              1.000000000,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          0.000001907f, 0.000000000f, 0.000000000f,
                                     0.000001907f, 0.000000000f, 0.000000000f,
                                     0.000001907f, 0.000000000f, 0.000000000f,
                                     0.000001907f, 0.000000000f, 0.000000000f,
        NULL);

    // Set GlsTextBox specific initializers now
    text4->Set(
        GLS_TEXT_BORDER, 0.000000000f,
        GLS_TEXT_CELL_HEIGHT, 17.000000000f,
        GLS_TEXT_CELL_WIDTH, 16.000000000f,
        GLS_TEXT_CONSTRAIN_CELL_RATIO, true,
        GLS_TEXT_CONTROL_CELL_SIZE, false,
        GLS_TEXT_FONT, "Arial", "Regular", 12,
        GLS_TEXT_LINESPACING, 1.000000000f,
        GLS_TEXT_HALO, false, 0, 0, 0, 0,
        GLS_TEXT_LOCK_CELL_SIZE, true,
        GLS_TEXT_JUSTIFY, 1,
        GLS_TEXT_SHADOW, false, 0.129999995f, -0.129999995f, 128, 128, 128, 255,
        GLS_TEXT_STRING,
            "ALTERNATOR",
        GLS_TEXT_UPPERCASE, false,
        GLS_TEXT_WRAP, true,
        NULL);

    // Call initialize on the object after the Set methods so that the grid
    // will be sized properly before any row,column specific (individual characters) calls are made.
    text4->Initialize();
    text4->VerticalAlignment(GlsTextBox::ALIGN_CENTER);
    text4->LeftToRight(true);

   // Call GlsTextBox methods to set up individual character attributes.
    text4->Baseline(0.000000000f);
    text4->BgColor(GlsColor(255,255,255,0));
    text4->TextColor(GlsColor(255,255,255,255));
    text4->CharScaling(1.000000000f);
    text4->CharSpacing(1.000000000f);
    text4->FauxBold(false);
    text4->Inverse(false);
    text4->StrikeThru(false);
    text4->Underline(false);

    // Call initialize on the object after all character attribute methods
    // in case character settings affect the extents of the grid.
    text4->Initialize();

    // End of initialization code for GlsTextBox text4
    //--------------------------------------------------------------------

    text7Group_6->Group::InsertObject(text4,true,false);
    text7Group_6->CalculateBoundingBox();
    DisplayFrame::InsertObject(text7Group_6,true,false);

    // Initialization code for Group text7Group_6_1
    text7Group_6_1 = new Group();
    // Initialization code generated by DisplayObject class
    text7Group_6_1->SetAvailableAttributes(frameAvailableAttributes);
    text7Group_6_1->Set(
        GLS_INSTANCE_NAME,           "text7Group_6_1",
        GLS_LOCATION,                570.000000000f, 34.500000000f, 0.000000000f,
        GLS_BLINK_RATE,              1.000000000,
        GLS_TEXTURE_POINTS,          70.000000000f, -22.500000000f, -0.000000000f,
                                     -69.999992371f, -22.500000000f, -0.000000000f,
                                     -69.999992371f, 117.500000000f, -0.000000000f,
                                     70.000000000f, 117.500000000f, -0.000000000f,
        NULL);

    text7Group_6_1->PerformGroupCullCheck(false);
    text7Group_6_1->CullTestChildren(true);
    text7Group_6_1->InitialGroupCount(3);
    // Initialization code for GLPolygon carpet10
    carpet10 = new GLPolygon();
    carpet10->VaSetVertices(4,
         85, 85,127,255,  -69.999992f,  -20.000000f,    0.000000f,
         85, 85,127,255,   70.000000f,  -20.000000f,    0.000000f,
         85, 85,127,255,   70.000000f,   20.000000f,    0.000000f,
         85, 85,127,255,  -69.999992f,   20.000000f,    0.000000f);

    carpet10->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    carpet10->SetAvailableAttributes(frameAvailableAttributes);
    carpet10->Set(
        GLS_INSTANCE_NAME,           "carpet10",
        GLS_LOCATION,                570.000000000f, 35.000000000f, 0.000000000f,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_BLINK_RATE,              1.000000000,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          70.000000000f, -20.000000000f, 0.000000000f,
                                     -69.999992371f, -20.000000000f, 0.000000000f,
                                     -69.999992371f, 130.000000000f, 0.000000000f,
                                     70.000000000f, 130.000000000f, 0.000000000f,
        NULL);

    text7Group_6_1->Group::InsertObject(carpet10,true,false);
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text10
    // Base class initializers will be set up first.
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text10
    text10 = new GlsTextBox();
    text10->VaSetVertices(4,
          0,  0,  0,  0,    0.000000f,    0.000000f,    0.000000f,
          0,  0,  0,  0,   90.000000f,    0.000000f,    0.000000f,
          0,  0,  0,  0,   90.000000f,   45.000000f,   -0.000000f,
          0,  0,  0,  0,    0.000000f,   45.000000f,   -0.000000f);

    text10->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    text10->SetAvailableAttributes(frameAvailableAttributes);
    text10->Set(
        GLS_INSTANCE_NAME,           "text10",
        GLS_LOCATION,                524.000000000f, 12.000000000f, 0.000000000f,
        GLS_TEXTURE_REPEAT,          TRUE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_BLINK_RATE,              1.000000000,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
        NULL);

    // Set GlsTextBox specific initializers now
    text10->Set(
        GLS_TEXT_BORDER, 0.000000000f,
        GLS_TEXT_CELL_HEIGHT, 17.000000000f,
        GLS_TEXT_CELL_WIDTH, 16.000000000f,
        GLS_TEXT_CONSTRAIN_CELL_RATIO, true,
        GLS_TEXT_CONTROL_CELL_SIZE, false,
        GLS_TEXT_FONT, "Arial", "Regular", 12,
        GLS_TEXT_LINESPACING, 1.000000000f,
        GLS_TEXT_HALO, false, 0, 0, 0, 0,
        GLS_TEXT_LOCK_CELL_SIZE, true,
        GLS_TEXT_JUSTIFY, 1,
        GLS_TEXT_SHADOW, false, 0.129999995f, -0.129999995f, 128, 128, 128, 255,
        GLS_TEXT_STRING,
            "FLAPS",
        GLS_TEXT_UPPERCASE, false,
        GLS_TEXT_WRAP, true,
        NULL);

    // Call initialize on the object after the Set methods so that the grid
    // will be sized properly before any row,column specific (individual characters) calls are made.
    text10->Initialize();
    text10->VerticalAlignment(GlsTextBox::ALIGN_CENTER);
    text10->LeftToRight(true);

   // Call GlsTextBox methods to set up individual character attributes.
    text10->Baseline(0.000000000f);
    text10->BgColor(GlsColor(255,255,255,0));
    text10->TextColor(GlsColor(255,255,255,255));
    text10->CharScaling(1.000000000f);
    text10->CharSpacing(1.000000000f);
    text10->FauxBold(false);
    text10->Inverse(false);
    text10->StrikeThru(false);
    text10->Underline(false);

    // Call initialize on the object after all character attribute methods
    // in case character settings affect the extents of the grid.
    text10->Initialize();

    // End of initialization code for GlsTextBox text10
    //--------------------------------------------------------------------

    text7Group_6_1->Group::InsertObject(text10,true,false);
    text7Group_6_1->CalculateBoundingBox();
    DisplayFrame::InsertObject(text7Group_6_1,true,false);

    // Initialization code for Group text5Group
    text5Group = new Group();
    // Initialization code generated by DisplayObject class
    text5Group->SetAvailableAttributes(frameAvailableAttributes);
    text5Group->Set(
        GLS_INSTANCE_NAME,           "text5Group",
        GLS_LOCATION,                730.000000000f, 90.500000000f, 0.000000000f,
        GLS_BLINK_RATE,              1.000000000,
        GLS_TEXTURE_POINTS,          70.000000000f, -22.500000000f, -0.000000000f,
                                     -69.999992371f, -22.500000000f, -0.000000000f,
                                     -69.999992371f, 117.500000000f, -0.000000000f,
                                     70.000000000f, 117.500000000f, -0.000000000f,
        NULL);

    text5Group->PerformGroupCullCheck(false);
    text5Group->CullTestChildren(true);
    text5Group->InitialGroupCount(3);
    // Initialization code for GLPolygon carpet5
    carpet5 = new GLPolygon();
    carpet5->VaSetVertices(4,
          0,  0,127,255,  -69.999992f,  -20.000000f,    0.000000f,
          0,  0,127,255,   70.000000f,  -20.000000f,    0.000000f,
          0,  0,127,255,   70.000000f,   20.000000f,    0.000000f,
          0,  0,127,255,  -69.999992f,   20.000000f,    0.000000f);

    carpet5->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    carpet5->SetAvailableAttributes(frameAvailableAttributes);
    carpet5->Set(
        GLS_INSTANCE_NAME,           "carpet5",
        GLS_LOCATION,                730.000000000f, 91.000000000f, 0.000000000f,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_BLINK_RATE,              1.000000000,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          70.000000000f, -20.000000000f, 0.000000000f,
                                     -69.999992371f, -20.000000000f, 0.000000000f,
                                     -69.999992371f, 130.000000000f, 0.000000000f,
                                     70.000000000f, 130.000000000f, 0.000000000f,
        NULL);

    text5Group->Group::InsertObject(carpet5,true,false);
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text5
    // Base class initializers will be set up first.
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text5
    text5 = new GlsTextBox();
    text5->VaSetVertices(4,
          0,  0,  0,  0,    0.000000f,    0.000000f,    0.000000f,
          0,  0,  0,  0,   90.000000f,    0.000000f,    0.000000f,
          0,  0,  0,  0,   90.000000f,   45.000000f,   -0.000000f,
          0,  0,  0,  0,    0.000000f,   45.000000f,   -0.000000f);

    text5->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    text5->SetAvailableAttributes(frameAvailableAttributes);
    text5->Set(
        GLS_INSTANCE_NAME,           "text5",
        GLS_LOCATION,                684.000000000f, 68.000000000f, 0.000000000f,
        GLS_TEXTURE_REPEAT,          TRUE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_BLINK_RATE,              1.000000000,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
        NULL);

    // Set GlsTextBox specific initializers now
    text5->Set(
        GLS_TEXT_BORDER, 0.000000000f,
        GLS_TEXT_CELL_HEIGHT, 17.000000000f,
        GLS_TEXT_CELL_WIDTH, 16.000000000f,
        GLS_TEXT_CONSTRAIN_CELL_RATIO, true,
        GLS_TEXT_CONTROL_CELL_SIZE, false,
        GLS_TEXT_FONT, "Arial", "Regular", 12,
        GLS_TEXT_LINESPACING, 1.000000000f,
        GLS_TEXT_HALO, false, 0, 0, 0, 0,
        GLS_TEXT_LOCK_CELL_SIZE, true,
        GLS_TEXT_JUSTIFY, 1,
        GLS_TEXT_SHADOW, false, 0.129999995f, -0.129999995f, 128, 128, 128, 255,
        GLS_TEXT_STRING,
            "OXYGEN",
        GLS_TEXT_UPPERCASE, false,
        GLS_TEXT_WRAP, true,
        NULL);

    // Call initialize on the object after the Set methods so that the grid
    // will be sized properly before any row,column specific (individual characters) calls are made.
    text5->Initialize();
    text5->VerticalAlignment(GlsTextBox::ALIGN_CENTER);
    text5->LeftToRight(true);

   // Call GlsTextBox methods to set up individual character attributes.
    text5->Baseline(0.000000000f);
    text5->BgColor(GlsColor(255,255,255,0));
    text5->TextColor(GlsColor(255,255,255,255));
    text5->CharScaling(1.000000000f);
    text5->CharSpacing(1.000000000f);
    text5->FauxBold(false);
    text5->Inverse(false);
    text5->StrikeThru(false);
    text5->Underline(false);

    // Call initialize on the object after all character attribute methods
    // in case character settings affect the extents of the grid.
    text5->Initialize();

    // End of initialization code for GlsTextBox text5
    //--------------------------------------------------------------------

    text5Group->Group::InsertObject(text5,true,false);
    text5Group->CalculateBoundingBox();
    DisplayFrame::InsertObject(text5Group,true,false);

    // Initialization code for Group text7Group_6_3
    text7Group_6_3 = new Group();
    // Initialization code generated by DisplayObject class
    text7Group_6_3->SetAvailableAttributes(frameAvailableAttributes);
    text7Group_6_3->Set(
        GLS_INSTANCE_NAME,           "text7Group_6_3",
        GLS_LOCATION,                730.000000000f, 34.500000000f, 0.000000000f,
        GLS_BLINK_RATE,              1.000000000,
        GLS_TEXTURE_POINTS,          70.000000000f, -22.500000000f, -0.000000000f,
                                     -69.999992371f, -22.500000000f, -0.000000000f,
                                     -69.999992371f, 117.500000000f, -0.000000000f,
                                     70.000000000f, 117.500000000f, -0.000000000f,
        NULL);

    text7Group_6_3->PerformGroupCullCheck(false);
    text7Group_6_3->CullTestChildren(true);
    text7Group_6_3->InitialGroupCount(3);
    // Initialization code for GLPolygon carpet11
    carpet11 = new GLPolygon();
    carpet11->VaSetVertices(4,
         85,  0,127,255,  -69.999992f,  -20.000000f,    0.000000f,
         85,  0,127,255,   70.000000f,  -20.000000f,    0.000000f,
         85,  0,127,255,   70.000000f,   20.000000f,    0.000000f,
         85,  0,127,255,  -69.999992f,   20.000000f,    0.000000f);

    carpet11->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    carpet11->SetAvailableAttributes(frameAvailableAttributes);
    carpet11->Set(
        GLS_INSTANCE_NAME,           "carpet11",
        GLS_LOCATION,                730.000000000f, 35.000000000f, 0.000000000f,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_BLINK_RATE,              1.000000000,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          70.000000000f, -20.000000000f, 0.000000000f,
                                     -69.999992371f, -20.000000000f, 0.000000000f,
                                     -69.999992371f, 130.000000000f, 0.000000000f,
                                     70.000000000f, 130.000000000f, 0.000000000f,
        NULL);

    text7Group_6_3->Group::InsertObject(carpet11,true,false);
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text11
    // Base class initializers will be set up first.
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text11
    text11 = new GlsTextBox();
    text11->VaSetVertices(4,
          0,  0,  0,  0,    0.000000f,    0.000000f,    0.000000f,
          0,  0,  0,  0,   90.000000f,    0.000000f,    0.000000f,
          0,  0,  0,  0,   90.000000f,   45.000000f,   -0.000000f,
          0,  0,  0,  0,    0.000000f,   45.000000f,   -0.000000f);

    text11->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    text11->SetAvailableAttributes(frameAvailableAttributes);
    text11->Set(
        GLS_INSTANCE_NAME,           "text11",
        GLS_LOCATION,                684.000000000f, 12.000000000f, 0.000000000f,
        GLS_TEXTURE_REPEAT,          TRUE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_BLINK_RATE,              1.000000000,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
        NULL);

    // Set GlsTextBox specific initializers now
    text11->Set(
        GLS_TEXT_BORDER, 0.000000000f,
        GLS_TEXT_CELL_HEIGHT, 17.000000000f,
        GLS_TEXT_CELL_WIDTH, 16.000000000f,
        GLS_TEXT_CONSTRAIN_CELL_RATIO, true,
        GLS_TEXT_CONTROL_CELL_SIZE, false,
        GLS_TEXT_FONT, "Arial", "Regular", 12,
        GLS_TEXT_LINESPACING, 1.000000000f,
        GLS_TEXT_HALO, false, 0, 0, 0, 0,
        GLS_TEXT_LOCK_CELL_SIZE, true,
        GLS_TEXT_JUSTIFY, 1,
        GLS_TEXT_SHADOW, false, 0.129999995f, -0.129999995f, 128, 128, 128, 255,
        GLS_TEXT_STRING,
            "HYD PUMP",
        GLS_TEXT_UPPERCASE, false,
        GLS_TEXT_WRAP, true,
        NULL);

    // Call initialize on the object after the Set methods so that the grid
    // will be sized properly before any row,column specific (individual characters) calls are made.
    text11->Initialize();
    text11->VerticalAlignment(GlsTextBox::ALIGN_CENTER);
    text11->LeftToRight(true);

   // Call GlsTextBox methods to set up individual character attributes.
    text11->Baseline(0.000000000f);
    text11->BgColor(GlsColor(255,255,255,0));
    text11->TextColor(GlsColor(255,255,255,255));
    text11->CharScaling(1.000000000f);
    text11->CharSpacing(1.000000000f);
    text11->FauxBold(false);
    text11->Inverse(false);
    text11->StrikeThru(false);
    text11->Underline(false);

    // Call initialize on the object after all character attribute methods
    // in case character settings affect the extents of the grid.
    text11->Initialize();

    // End of initialization code for GlsTextBox text11
    //--------------------------------------------------------------------

    text7Group_6_3->Group::InsertObject(text11,true,false);
    text7Group_6_3->CalculateBoundingBox();
    DisplayFrame::InsertObject(text7Group_6_3,true,false);

    // Initialization code for Group text7Group_6_4
    text7Group_6_4 = new Group();
    // Initialization code generated by DisplayObject class
    text7Group_6_4->SetAvailableAttributes(frameAvailableAttributes);
    text7Group_6_4->Set(
        GLS_INSTANCE_NAME,           "text7Group_6_4",
        GLS_LOCATION,                890.000000000f, 90.500000000f, 0.000000000f,
        GLS_BLINK_RATE,              1.000000000,
        GLS_TEXTURE_POINTS,          70.000000000f, -22.500000000f, -0.000000000f,
                                     -69.999992371f, -22.500000000f, -0.000000000f,
                                     -69.999992371f, 117.500000000f, -0.000000000f,
                                     70.000000000f, 117.500000000f, -0.000000000f,
        NULL);

    text7Group_6_4->PerformGroupCullCheck(false);
    text7Group_6_4->CullTestChildren(true);
    text7Group_6_4->InitialGroupCount(3);
    // Initialization code for GLPolygon carpet6
    carpet6 = new GLPolygon();
    carpet6->VaSetVertices(4,
         85,  0,255,255,  -69.999992f,  -20.000000f,    0.000000f,
         85,  0,255,255,   70.000000f,  -20.000000f,    0.000000f,
         85,  0,255,255,   70.000000f,   20.000000f,    0.000000f,
         85,  0,255,255,  -69.999992f,   20.000000f,    0.000000f);

    carpet6->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    carpet6->SetAvailableAttributes(frameAvailableAttributes);
    carpet6->Set(
        GLS_INSTANCE_NAME,           "carpet6",
        GLS_LOCATION,                890.000000000f, 91.000000000f, 0.000000000f,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_BLINK_RATE,              1.000000000,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          70.000000000f, -20.000000000f, 0.000000000f,
                                     -69.999992371f, -20.000000000f, 0.000000000f,
                                     -69.999992371f, 130.000000000f, 0.000000000f,
                                     70.000000000f, 130.000000000f, 0.000000000f,
        NULL);

    text7Group_6_4->Group::InsertObject(carpet6,true,false);
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text6
    // Base class initializers will be set up first.
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text6
    text6 = new GlsTextBox();
    text6->VaSetVertices(4,
          0,  0,  0,  0,    0.000000f,    0.000000f,    0.000000f,
          0,  0,  0,  0,   90.000000f,    0.000000f,    0.000000f,
          0,  0,  0,  0,   90.000000f,   45.000000f,   -0.000000f,
          0,  0,  0,  0,    0.000000f,   45.000000f,   -0.000000f);

    text6->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    text6->SetAvailableAttributes(frameAvailableAttributes);
    text6->Set(
        GLS_INSTANCE_NAME,           "text6",
        GLS_LOCATION,                844.000000000f, 68.000000000f, 0.000000000f,
        GLS_TEXTURE_REPEAT,          TRUE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_BLINK_RATE,              1.000000000,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
        NULL);

    // Set GlsTextBox specific initializers now
    text6->Set(
        GLS_TEXT_BORDER, 0.000000000f,
        GLS_TEXT_CELL_HEIGHT, 17.000000000f,
        GLS_TEXT_CELL_WIDTH, 16.000000000f,
        GLS_TEXT_CONSTRAIN_CELL_RATIO, true,
        GLS_TEXT_CONTROL_CELL_SIZE, false,
        GLS_TEXT_FONT, "Arial", "Regular", 12,
        GLS_TEXT_LINESPACING, 1.000000000f,
        GLS_TEXT_HALO, false, 0, 0, 0, 0,
        GLS_TEXT_LOCK_CELL_SIZE, true,
        GLS_TEXT_JUSTIFY, 1,
        GLS_TEXT_SHADOW, false, 0.129999995f, -0.129999995f, 128, 128, 128, 255,
        GLS_TEXT_STRING,
            "FUEL PUMP HIGH",
        GLS_TEXT_UPPERCASE, false,
        GLS_TEXT_WRAP, true,
        NULL);

    // Call initialize on the object after the Set methods so that the grid
    // will be sized properly before any row,column specific (individual characters) calls are made.
    text6->Initialize();
    text6->VerticalAlignment(GlsTextBox::ALIGN_CENTER);
    text6->LeftToRight(true);

   // Call GlsTextBox methods to set up individual character attributes.
    text6->Baseline(0.000000000f);
    text6->BgColor(GlsColor(255,255,255,0));
    text6->TextColor(GlsColor(255,255,255,255));
    text6->CharScaling(1.000000000f);
    text6->CharSpacing(1.000000000f);
    text6->FauxBold(false);
    text6->Inverse(false);
    text6->StrikeThru(false);
    text6->Underline(false);

    // Call initialize on the object after all character attribute methods
    // in case character settings affect the extents of the grid.
    text6->Initialize();

    // End of initialization code for GlsTextBox text6
    //--------------------------------------------------------------------

    text7Group_6_4->Group::InsertObject(text6,true,false);
    text7Group_6_4->CalculateBoundingBox();
    DisplayFrame::InsertObject(text7Group_6_4,true,false);

    // Initialization code for Group text7Group_6_5
    text7Group_6_5 = new Group();
    // Initialization code generated by DisplayObject class
    text7Group_6_5->SetAvailableAttributes(frameAvailableAttributes);
    text7Group_6_5->Set(
        GLS_INSTANCE_NAME,           "text7Group_6_5",
        GLS_LOCATION,                890.000000000f, 34.500000000f, 0.000000000f,
        GLS_BLINK_RATE,              1.000000000,
        GLS_TEXTURE_POINTS,          70.000000000f, -22.500000000f, -0.000000000f,
                                     -69.999992371f, -22.500000000f, -0.000000000f,
                                     -69.999992371f, 117.500000000f, -0.000000000f,
                                     70.000000000f, 117.500000000f, -0.000000000f,
        NULL);

    text7Group_6_5->PerformGroupCullCheck(false);
    text7Group_6_5->CullTestChildren(true);
    text7Group_6_5->InitialGroupCount(3);
    // Initialization code for GLPolygon carpet12
    carpet12 = new GLPolygon();
    carpet12->VaSetVertices(4,
        255,  0,  0,255,  -69.999992f,  -20.000000f,    0.000000f,
        255,  0,  0,255,   70.000000f,  -20.000000f,    0.000000f,
        255,  0,  0,255,   70.000000f,   20.000000f,    0.000000f,
        255,  0,  0,255,  -69.999992f,   20.000000f,    0.000000f);

    carpet12->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    carpet12->SetAvailableAttributes(frameAvailableAttributes);
    carpet12->Set(
        GLS_INSTANCE_NAME,           "carpet12",
        GLS_LOCATION,                890.000000000f, 35.000000000f, 0.000000000f,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_BLINK_RATE,              1.000000000,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          70.000000000f, -20.000000000f, 0.000000000f,
                                     -69.999992371f, -20.000000000f, 0.000000000f,
                                     -69.999992371f, 130.000000000f, 0.000000000f,
                                     70.000000000f, 130.000000000f, 0.000000000f,
        NULL);

    text7Group_6_5->Group::InsertObject(carpet12,true,false);
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text12
    // Base class initializers will be set up first.
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text12
    text12 = new GlsTextBox();
    text12->VaSetVertices(4,
          0,  0,  0,  0,    0.000000f,    0.000000f,    0.000000f,
          0,  0,  0,  0,   90.000000f,    0.000000f,    0.000000f,
          0,  0,  0,  0,   90.000000f,   45.000000f,   -0.000000f,
          0,  0,  0,  0,    0.000000f,   45.000000f,   -0.000000f);

    text12->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    text12->SetAvailableAttributes(frameAvailableAttributes);
    text12->Set(
        GLS_INSTANCE_NAME,           "text12",
        GLS_LOCATION,                844.000000000f, 12.000000000f, 0.000000000f,
        GLS_TEXTURE_REPEAT,          TRUE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_BLINK_RATE,              1.000000000,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
        NULL);

    // Set GlsTextBox specific initializers now
    text12->Set(
        GLS_TEXT_BORDER, 0.000000000f,
        GLS_TEXT_CELL_HEIGHT, 17.000000000f,
        GLS_TEXT_CELL_WIDTH, 16.000000000f,
        GLS_TEXT_CONSTRAIN_CELL_RATIO, true,
        GLS_TEXT_CONTROL_CELL_SIZE, false,
        GLS_TEXT_FONT, "Arial", "Regular", 12,
        GLS_TEXT_LINESPACING, 1.000000000f,
        GLS_TEXT_HALO, false, 0, 0, 0, 0,
        GLS_TEXT_LOCK_CELL_SIZE, true,
        GLS_TEXT_JUSTIFY, 1,
        GLS_TEXT_SHADOW, false, 0.129999995f, -0.129999995f, 128, 128, 128, 255,
        GLS_TEXT_STRING,
            "SURFACE DE-ICE",
        GLS_TEXT_UPPERCASE, false,
        GLS_TEXT_WRAP, true,
        NULL);

    // Call initialize on the object after the Set methods so that the grid
    // will be sized properly before any row,column specific (individual characters) calls are made.
    text12->Initialize();
    text12->VerticalAlignment(GlsTextBox::ALIGN_CENTER);
    text12->LeftToRight(true);

   // Call GlsTextBox methods to set up individual character attributes.
    text12->Baseline(0.000000000f);
    text12->BgColor(GlsColor(255,255,255,0));
    text12->TextColor(GlsColor(255,255,255,255));
    text12->CharScaling(1.000000000f);
    text12->CharSpacing(1.000000000f);
    text12->FauxBold(false);
    text12->Inverse(false);
    text12->StrikeThru(false);
    text12->Underline(false);

    // Call initialize on the object after all character attribute methods
    // in case character settings affect the extents of the grid.
    text12->Initialize();

    // End of initialization code for GlsTextBox text12
    //--------------------------------------------------------------------

    text7Group_6_5->Group::InsertObject(text12,true,false);
    text7Group_6_5->CalculateBoundingBox();
    DisplayFrame::InsertObject(text7Group_6_5,true,false);


    objects->CalculateBoundingBox();


    CullingEnabled(true);

    Initialize();

}

void GLStudio_WarningLightsClass::Create(void)
{
  theWindow = new OpenGLWindow(0,0,_width,_height,Name(),this);
  theWindow->end();
  WindowFlags(FL_RGB|FL_DOUBLE|FL_DEPTH|FL_STENCIL|FL_ACCUM|FL_ALPHA|FL_MULTISAMPLE);
  BackgroundColor(173,173,173,255);
  FrameInterval(33333);
  theWindow->resize(0,0,_width,_height);
  theWindow->show();
  theWindow->make_current();
}

#ifndef GLS_CREATEOBJECTS_OPTIMIZE
#ifdef WIN32
#pragma optimize("", on)
#endif
#endif
GLStudio_WarningLightsClass::GLStudio_WarningLightsClass(const char *name,int width,int height)
       : glsDisplayFrame(name,width,height)
{
    // Cause link time version check between header files and library.
    GLS_CHECK_VERSION_ID();

    static const char initializeLibraryData[] = 
#    ifdef GLS_FORCE_LICENSE_REQUIREMENT
    "";
#    else
    /* ETC_PA_156873_2104
RT_UNLIMITED: true
CLASS_NAME: GLStudio_WarningLightsClass */
    "\236\244\201x]\301\174\226\222\227s\242\226\222\243\175\227\247g\216h\267\210\202u\174\202\233\305\255\274\274\271\274\265y\252\225\257\263\211\305\273\312\312A\235\237t\247\264\217\275\273"
    "\244\213\260Wy\300\267\327\254\233\271\345\263\312\270\331\325\246\273\252\174\254\255\271\270\277\245\335\220\312\250\000MC0CFQDLbq/W5XVQEHxIqNgnmsh0VPkyiQIUe7ZS3Ta0ozWFv72tdc77PvTsWgg=";
#    endif

    InitializeLibrary(initializeLibraryData,this,true);
    Create();

    CreateSplash();
    texturePalette->PaletteSize(2);
    texturePalette->SetInlineTexture(0, image_data_0);
    _materialPalette[0] = Material(GlsColor(51, 51, 51, 255), GlsColor(204, 204, 204, 255), GlsColor(0, 0, 0, 255), GlsColor(0, 0, 0, 255), 1.000000000f);
    _materialPalette[0]._colorMaterialMode = (disti::ColorMaterialMode_e)0;
    _sound_player = NULL;
    RemoveSplash();
}
int main(int argc,char *argv[])
{
  try
  {

    glsCommandLine::Instance()->ReadCommandLine(argc,argv);

    gLStudio_WarningLights = new GLStudio_WarningLightsClass("GLStudio-WarningLights",975,122);
    gLStudio_WarningLights->CreateObjects();

//////////////////// User Code from section: "Main Initialization" ////////////
///////////////////////////////////////////////////////////////////////////////
    gLStudio_WarningLights->SetRedraw();

    Timer frameTimer;
    do
    {
//////////////////// User Code from section: "Main Loop" //////////////////////
///////////////////////////////////////////////////////////////////////////////
        gLStudio_WarningLights->RecordCalculateStart();
        gLStudio_WarningLights->Calculate(frameTimer.ElapsedSecondsDouble());
        gLStudio_WarningLights->RecordCalculateEnd();
    }
    while(gLStudio_WarningLights->FrameAnimate());

    // Delete the instance
    delete gLStudio_WarningLights;

  }
  catch(DistiException e)
  {
    Error(e.what());
  }
  return 0;
}
