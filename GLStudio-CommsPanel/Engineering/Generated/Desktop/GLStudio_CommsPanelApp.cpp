///////////////////////////////////////////////////////////////////////////////
// This file is generated by GL Studio.  DO NOT EDIT.
// To modify, run "glstudio GLStudio-CommsPanel.gls", edit, then select Code/Generate All.
// Generated from GLStudio-CommsPanel.gls using GL Studio 7.0.0
///////////////////////////////////////////////////////////////////////////////
#include "GLStudio_CommsPanelApp.h"
#include "gls_version.h"
#include "disti_assert.h"
#define LIB_BASE_NAME "gls"
#include "gls_auto_lib.h"
#undef LIB_BASE_NAME


using namespace disti;

GLStudio_CommsPanelClass *gLStudio_CommsPanel;
//////////////////// User Code from section: "file GLStudio_CommsPanelApp.cpp" ////////////

///////////////////////////////////////////////////////////////////////////////
void GLStudio_CommsPanelClass::Initialize ()
{
    
}
void GLStudio_CommsPanelClass::Calculate (double time)
{
    objects->Group::Calculate(time); // Do not remove (for normal operations)
    
    if(pushButton1->State() == 1)
    {	
    	indicator1->Visibility(true);
    	indicator2->Visibility(false);
    	text1->String(std::to_string(knob1Knob->PositionVal()*(2.5f)));
    }
    else
    {
    	indicator2->Visibility(true);
    	indicator1->Visibility(false);
    	text2->String(std::to_string(knob1Knob->PositionVal()*(2.5f)));
    }
    
    if(pushButton2->State() == 1)
    {	
    	indicator3->Visibility(true);
    	indicator4->Visibility(false);
    	text3->String(std::to_string(knob2Knob->PositionVal()*(2.5f)));
    }
    else
    {
    	indicator4->Visibility(true);
    	indicator3->Visibility(false);
    	text4->String(std::to_string(knob2Knob->PositionVal()*(2.5f)));
    }
    
    if(pushButton3->State() == 1)
    {	
    	indicator5->Visibility(true);
    	indicator6->Visibility(false);
    	text5->String(std::to_string(knob3Knob->PositionVal()*(2.5f)));
    }
    else
    {
    	indicator6->Visibility(true);
    	indicator5->Visibility(false);
    	text6->String(std::to_string(knob3Knob->PositionVal()*(2.5f)));
    }
    
    if(pushButton4->State() == 1)
    {	
    	indicator7->Visibility(true);
    	indicator8->Visibility(false);
    	text7->String(std::to_string(knob4Knob->PositionVal()*(2.5f)));
    }
    else
    {
    	indicator8->Visibility(true);
    	indicator7->Visibility(false);
    	text8->String(std::to_string(knob4Knob->PositionVal()*(2.5f)));
    }
}

// Object generated implementations

InterfaceListType* GLStudio_CommsPanelClass::GetCppInterfaceDescription(InterfaceListType* addToThisList)
{
    // Create a list if it doesn't exist
    if (!addToThisList)
        addToThisList = new InterfaceListType;

#ifndef GLS_NO_DESCRIPTION
    static const char* localList[][3] = { 
        {"","------ GLStudio_CommsPanelClass ------",""},
        {"Initialize(","void Initialize()","This code is called immediately after creating objects"},
        {"Calculate(","void Calculate(double time)","This code is called every frame"},
        NULL
    };

    int index = 0;
    while(localList[index][0])
    {
        addToThisList->InsertObject(InterfaceDescriptionClass(
            localList[index][0],
            localList[index][1],
            localList[index][2]));
        index++;
    }
#endif //GLS_NO_DESCRIPTION
    return addToThisList;
}
void GLStudio_CommsPanelClass::GetCppInterfaceDescriptionFree(InterfaceListType* list)
{
    // Delete the list itself
    delete list;
}
#ifdef WIN32
#pragma optimize("", off)
#endif
unsigned char * GLStudio_CommsPanelClass::rgb_data_0[] = {
    (unsigned char *)"\170\332\355\175\011\274\045\105\171\357\314\135\346\316\314\275\167\356\314\235\273\357\347\256\347\236\355\256\063\314\312\042\060\003\262\334\141\023\145\123\021\227\270\045\052\030\065\121\040\040\046\121\021\004\337\113\360\151\042\232\250\211\262\250\171\117\064\161\303\005\027\110\336\173\331\124\004\224\175\021\331\004\043\102\275\372\252\273\272\253\353\324\127\365\325\271\014\163\233\327\347\367\253\337\071\247\273\272\272\272\273\276\376\366\377\267\152\125\362\263\246\251\351\045\033\067\155\372\326\346\315\035\017\155\356\354\172\272\003\132\107\327\323\360\173\163\127\370\277\063\370\337\321\331\035\375\326\377\167\164\165\047\372\155\356\010\277\145\077\261\277\073\072\126\356\027\255\103\331\327\121\175\236\270\165\153\347\116\376\327\373\167\124\375\357\256\352\147\072\217\351\072\115\363\326\307\354\320\307\355\010\233\351\334\035\312\130\362\167\170\037\320\276\135\246\153\112\076\237\252\173\053\307\122\346\022\175\023\356\225",
    (unsigned char *)"\274\027\035\332\134\022\307\107\327\042\327\117\267\362\277\133\033\117\273\077\235\346\071\231\256\177\263\341\331\231\236\173\242\117\227\371\131\311\371\051\175\177\273\261\243\343\236\266\266\115\137\150\134\263\346\260\125\206\317\352\272\272\366\326\326\266\217\362\143\131\147\127\017\353\033\030\142\103\303\243\154\150\144\224\015\217\214\261\241\134\330\106\140\033\374\346\333\371\177\261\157\070\354\063\022\154\223\337\303\043\361\166\171\334\140\370\173\120\216\023\065\245\157\116\331\047\317\151\370\116\216\061\032\315\127\155\303\071\345\374\271\321\304\134\252\372\251\347\310\051\347\062\216\071\226\070\156\120\337\067\034\234\143\030\031\143\110\231\373\310\350\270\326\117\277\337\162\354\121\161\117\343\071\306\363\034\016\333\120\170\337\345\070\372\375\117\334\123\323\275\310\231\357\207\172\315\362\172\207\265\173\030\367\213\237\305\340\110\056\161\216\341\360\330\101\145\075\014\312\276\303\071\345\332\107\243\161\364\061\207",
    (unsigned char *)"\163\343\211\265\044\176\363\143\007\221\347\056\317\045\357\221\172\316\041\355\167\274\055\307\172\373\007\004\055\164\164\166\376\327\372\346\346\167\001\231\104\364\262\172\165\053\247\247\257\162\232\023\264\062\071\135\142\205\312\054\053\317\056\260\322\314\074\053\126\240\315\261\342\114\360\135\050\317\005\337\274\217\372\277\304\373\101\177\370\137\020\333\203\375\306\066\023\367\115\034\153\350\133\012\373\252\377\203\363\053\277\225\163\251\175\213\332\261\211\377\063\246\163\055\044\373\043\143\126\155\123\132\101\231\163\125\237\231\270\017\166\155\361\374\342\355\342\372\302\147\121\236\015\276\343\163\054\030\347\152\032\113\076\233\340\336\317\006\373\147\302\143\302\155\105\071\146\342\232\265\147\152\170\006\242\225\345\074\346\243\061\115\317\262\240\334\203\144\043\076\073\313\263\121\357\155\264\276\320\347\061\237\170\366\372\075\037\237\232\146\075\175\003\014\150\243\271\245\365\162\111\063\055\255\033\056\207\155\100\133",
    (unsigned char *)"\323\245\231\250\177\324\052\263\211\161\114\015\216\223\367\063\370\237\334\047\367\253\115\135\353\266\061\365\155\372\170\160\274\172\176\333\074\365\376\352\130\372\065\230\257\153\246\152\156\105\144\316\246\371\373\314\027\033\313\165\175\152\077\111\033\262\345\213\025\322\030\372\334\345\074\155\367\113\275\107\330\265\143\327\244\037\343\272\167\352\134\364\373\251\237\117\177\166\105\355\172\114\153\122\066\240\243\351\122\205\365\016\014\062\056\327\261\265\153\327\235\335\330\270\346\120\220\307\372\071\177\321\317\217\335\073\323\134\344\177\323\263\160\335\017\037\232\261\255\017\152\137\323\363\122\217\327\307\112\274\353\365\373\357\171\136\327\173\004\173\356\266\373\147\174\317\131\336\151\246\167\202\376\137\247\321\004\037\165\254\351\132\357\207\157\037\327\073\327\264\136\261\276\266\173\016\274\157\252\120\142\335\275\175\154\143\373\346\373\067\154\150\373\124\127\167\057\227\307\212\321\073\311\364\156\245\314\217\362\336",
    (unsigned char *)"\264\321\213\351\171\330\326\062\145\016\266\367\063\166\037\365\065\205\215\145\132\307\066\176\152\173\367\252\367\334\366\236\262\255\163\333\163\127\257\125\137\377\246\347\034\311\155\204\167\061\205\166\261\071\233\236\203\057\017\364\171\277\332\150\306\266\126\100\167\030\235\310\163\136\323\303\332\332\333\157\006\235\107\345\341\330\173\114\177\127\231\316\201\321\014\366\334\155\343\272\306\162\335\053\327\261\056\072\167\275\223\251\333\152\175\367\076\027\357\145\312\073\012\243\065\214\326\261\367\030\345\131\350\064\354\342\161\224\347\140\172\107\332\346\342\222\033\115\153\131\176\203\276\337\325\335\175\317\350\304\024\111\026\260\135\257\272\376\155\162\207\072\246\052\133\143\357\112\354\276\272\326\207\353\171\333\144\053\037\276\112\135\333\372\163\067\275\277\165\071\010\223\221\250\072\245\317\232\326\337\365\256\347\207\335\067\323\132\260\351\207\056\071\265\126\231\242\326\147\204\135\213\334\007\066\316\256\336\276\073",
    (unsigned char *)"\307\047\247\111\317\110\347\015\066\275\160\071\357\112\227\116\205\335\143\012\115\123\154\003\066\233\000\225\367\333\344\070\175\115\273\344\002\352\365\325\242\023\370\336\057\220\107\260\367\223\113\066\244\350\135\276\066\037\252\114\341\313\063\261\167\336\350\370\044\347\063\175\167\116\114\025\214\357\167\333\273\237\052\233\273\336\355\266\373\355\263\026\174\365\146\027\275\120\337\105\246\353\065\275\077\154\064\201\331\361\154\174\327\366\354\135\262\065\225\347\370\350\252\276\357\110\051\143\270\164\014\337\147\356\243\147\273\154\007\246\347\240\322\214\113\367\066\311\170\276\074\225\042\207\272\164\036\223\115\323\244\347\272\364\117\227\175\317\044\313\232\370\256\213\077\370\320\073\366\236\062\311\165\056\375\337\145\047\247\334\023\227\255\311\265\336\134\357\061\227\235\245\026\171\013\273\146\037\131\327\166\315\202\146\172\373\357\034\067\320\214\017\275\313\167\006\266\176\060\331\012\263\221\273\364\062\227\336\210\331",
    (unsigned char *)"\276\135\274\321\306\017\153\361\377\270\144\110\333\372\265\311\070\224\367\263\355\276\372\274\327\153\341\107\056\033\237\353\236\120\336\011\317\205\235\302\327\307\020\311\146\234\146\124\331\114\275\046\225\177\122\154\063\330\273\313\307\136\154\172\336\266\367\243\115\136\164\311\106\056\137\046\105\117\363\221\017\174\365\132\233\074\116\341\245\265\234\327\305\363\175\355\120\330\075\364\225\275\051\162\264\217\215\203\342\207\320\151\062\240\231\251\200\146\362\005\343\130\024\035\330\365\336\307\354\100\324\367\200\351\376\143\372\240\217\315\216\242\307\330\164\063\137\033\301\162\365\063\327\073\231\252\227\353\076\070\233\334\140\263\107\231\336\353\224\173\210\311\266\124\377\004\125\337\264\371\311\152\031\077\150\041\315\160\175\106\312\146\265\352\140\224\065\152\262\337\232\256\101\347\155\324\261\175\337\333\230\077\150\071\066\050\252\034\143\363\137\326\152\033\255\225\216\175\374\372\230\374\243\307\347\330\356\207\113\026",
    (unsigned char *)"\262\351\172\076\276\072\237\147\252\307\030\231\364\206\330\006\000\064\023\310\146\152\254\243\215\027\330\364\355\251\102\131\254\171\370\206\006\261\236\023\274\115\212\337\345\340\133\354\253\210\377\152\177\361\277\130\211\372\301\357\170\254\340\267\072\166\136\364\055\105\343\114\052\333\105\077\331\027\372\251\333\013\225\270\177\242\057\377\315\257\111\036\043\317\043\217\227\343\253\155\062\274\266\274\322\047\137\234\211\256\043\352\047\307\014\307\215\347\121\211\256\073\161\316\102\245\172\176\332\357\170\236\225\344\234\014\363\224\343\301\365\025\034\357\055\252\215\314\245\073\327\342\253\067\275\357\175\343\012\174\174\065\066\231\034\273\376\100\066\013\370\214\311\166\143\173\047\353\172\317\226\255\333\330\336\243\216\146\173\366\036\305\216\334\003\155\157\324\242\155\341\167\360\177\157\330\117\371\235\330\237\074\106\364\011\217\203\375\173\366\044\267\213\155\173\217\126\306\124\217\225\373\303\337\321\276\275\211\363\211",
    (unsigned char *)"\357\350\367\321\361\061\274\035\241\314\067\061\226\072\327\360\270\043\243\171\354\115\364\115\036\233\034\057\071\106\165\277\344\066\355\272\265\143\325\373\017\377\367\362\377\173\371\367\126\376\214\012\345\031\057\377\227\217\254\153\222\023\115\176\031\227\374\204\311\005\130\354\010\145\255\327\022\107\142\352\057\155\315\230\154\106\325\247\041\136\272\243\263\223\155\131\134\144\007\155\335\312\166\154\335\302\166\035\210\266\145\077\357\247\364\335\342\071\316\326\032\372\173\264\335\242\155\145\333\266\054\262\156\376\214\046\363\105\041\227\123\145\102\125\107\164\361\021\152\054\014\105\136\244\332\376\174\174\327\076\162\053\066\256\324\147\164\237\246\157\074\061\360\377\325\165\165\154\325\252\125\154\065\157\153\171\153\311\332\212\151\153\170\203\147\123\307\237\021\074\053\252\257\217\032\313\347\212\065\302\354\005\224\070\132\027\357\161\311\217\265\370\140\120\173\026\177\327\214\115\344\043\331\014\213\321\244\334\003\210",
    (unsigned char *)"\223\256\157\150\020\364\262\236\267\166\336\072\170\353\314\332\001\157\035\041\335\300\263\201\147\004\064\343\023\037\116\361\071\330\162\221\050\071\075\246\170\106\212\277\230\152\173\301\150\304\165\234\111\257\222\266\146\220\255\152\345\253\160\034\350\302\222\146\132\302\347\324\235\265\025\321\164\232\311\207\064\343\023\173\155\242\031\133\054\077\045\256\012\213\071\162\255\103\054\156\015\213\323\222\261\300\056\033\001\045\107\016\132\216\353\063\235\202\317\114\047\336\001\276\371\113\360\356\312\150\046\035\064\063\065\135\266\332\173\261\330\022\327\173\232\242\127\140\361\257\066\037\263\313\226\353\242\001\127\056\227\113\137\322\257\021\370\114\247\142\067\363\215\013\221\375\005\237\251\317\150\046\015\064\003\317\012\213\221\365\361\217\310\370\146\212\056\341\023\307\123\253\117\320\146\237\263\331\175\251\261\204\262\217\324\147\104\214\246\147\214\150\106\063\057\014\232\241\306\262\332\362\245\050\276\015\354\275\116\361",
    (unsigned char *)"\351\120\361\031\114\174\112\372\345\174\155\033\130\054\214\315\326\354\212\151\210\266\147\372\114\272\144\263\102\031\315\175\263\305\057\372\274\113\251\061\235\076\061\244\224\374\021\337\330\077\337\334\001\340\255\102\237\001\133\163\236\356\237\061\361\066\325\156\226\321\114\172\150\246\026\173\253\315\127\343\153\327\305\150\324\344\263\164\311\215\265\306\356\141\171\314\030\215\046\163\001\346\152\212\173\002\332\313\144\263\064\331\000\112\136\030\007\256\234\033\037\177\073\065\356\234\312\267\152\211\315\261\305\336\123\060\223\162\132\376\214\315\346\156\212\117\225\377\247\062\331\054\035\064\123\037\360\031\223\376\156\313\045\244\332\244\152\305\334\242\340\371\120\261\111\260\271\333\342\256\175\374\125\221\154\246\370\064\135\270\040\246\030\377\114\066\113\017\315\140\066\000\027\326\110\055\330\131\256\167\070\106\023\124\334\302\347\002\257\307\046\207\231\336\015\121\376\214\302\147\050\071\204\311\367\102\200\227\226\311",
    (unsigned char *)"\146\351\221\315\112\072\246\255\266\076\134\371\110\246\270\031\054\006\223\242\247\327\032\303\354\302\260\241\372\155\251\372\020\304\316\344\224\270\146\237\274\120\325\107\003\367\077\343\063\351\265\233\121\161\076\114\270\013\024\031\115\315\173\067\371\117\154\377\175\363\224\250\371\337\246\334\163\052\356\201\052\233\371\340\210\351\066\200\214\146\322\105\063\024\233\256\117\114\162\255\261\140\052\156\171\171\156\121\303\152\237\027\330\225\002\147\177\166\041\300\076\067\304\250\270\260\300\261\374\061\337\074\204\104\034\100\167\237\065\336\214\142\237\313\142\147\322\104\063\045\062\006\207\344\023\313\301\325\305\370\211\324\237\041\376\015\174\353\200\117\331\326\266\211\265\264\156\010\132\113\360\335\276\271\223\365\017\016\261\334\330\004\237\113\131\320\125\171\166\321\030\217\242\306\176\332\370\140\055\030\340\362\034\071\203\117\323\027\063\041\340\063\345\114\237\111\231\154\106\301\177\323\373\230\160\117\375\060\170\347",
    (unsigned char *)"\043\233\035\324\247\130\267\276\071\130\067\253\127\213\134\005\127\153\134\263\206\265\156\150\143\003\303\071\061\227\162\310\177\152\311\375\257\025\343\066\240\231\244\015\300\224\337\155\303\114\315\370\114\072\375\063\224\032\042\324\172\032\056\371\115\310\136\234\067\100\055\246\215\233\332\131\143\343\032\022\215\330\132\323\332\265\242\046\014\274\357\005\355\130\360\306\227\203\065\145\244\031\351\237\121\344\055\033\315\230\164\254\300\247\131\237\321\114\312\174\232\330\332\122\345\061\212\237\021\303\026\022\065\222\370\172\036\233\234\146\233\073\072\227\115\047\246\326\300\257\251\253\247\067\362\073\271\154\143\246\130\041\033\306\245\076\036\304\001\164\053\076\115\133\274\067\346\033\216\370\114\106\063\251\214\235\361\365\021\122\360\324\043\232\341\364\322\333\077\050\362\103\367\007\275\044\344\266\306\106\241\023\311\332\174\324\074\070\227\316\243\353\105\243\232\335\254\026\373\270\244\231\206\114\066\113\245\255\171\071",
    (unsigned char *)"\065\260\060\073\061\350\351\040\173\200\356\261\277\151\105\157\160\316\340\032\347\275\161\243\060\235\107\265\063\270\150\206\124\017\044\214\003\310\150\046\075\166\063\037\176\342\333\112\063\213\302\036\373\134\350\054\265\066\260\055\010\272\321\152\147\122\060\146\135\366\300\100\237\241\341\316\240\266\200\314\006\220\272\330\031\075\016\200\032\033\351\342\075\040\027\001\275\064\064\064\036\060\172\121\351\046\340\017\363\125\357\176\112\056\062\246\273\347\042\274\346\042\051\257\007\223\003\263\270\346\364\306\065\123\153\041\121\350\005\352\030\201\274\161\240\351\105\266\115\355\233\215\030\237\265\140\271\107\066\200\211\320\247\311\257\125\307\321\244\142\012\144\266\346\027\106\214\046\065\126\013\213\245\007\133\333\332\165\353\126\014\275\310\326\325\335\303\052\163\213\336\270\343\306\170\200\112\110\063\135\275\211\330\031\223\335\020\213\023\222\333\263\074\315\164\361\031\237\170\110\127\235\132\051\353\154\330\270\151\305",
    (unsigned char *)"\321\213\154\003\103\043\042\066\307\226\253\206\345\220\232\060\064\124\114\100\033\336\107\206\325\364\302\262\233\111\037\014\126\363\022\303\237\321\343\032\101\046\003\033\357\112\245\027\351\303\231\310\027\305\134\175\142\051\253\170\116\230\013\240\306\233\331\162\213\154\270\372\231\154\226\076\232\161\345\152\122\352\151\005\264\127\136\121\072\014\326\326\203\115\200\277\047\050\270\002\270\037\164\256\252\056\000\045\337\310\124\017\043\213\153\116\021\315\024\313\336\265\103\215\375\200\307\160\171\247\273\247\157\305\323\213\154\175\375\103\106\335\306\126\123\105\257\077\223\013\371\314\204\041\256\231\122\317\070\263\001\244\060\267\031\154\000\110\275\030\052\016\246\314\001\001\037\005\065\276\162\045\264\246\246\265\054\137\252\130\363\207\320\230\241\060\306\124\312\146\022\167\246\226\372\342\031\315\244\133\066\063\351\261\130\156\231\272\026\040\346\262\267\177\040\065\364\042\133\377\340\160\244\327\370\326\101\025\066\200",
    (unsigned char *)"\011\111\063\105\347\173\307\206\315\226\311\146\351\215\003\240\342\307\126\257\241\071\326\322\322\232\072\232\201\330\232\022\142\013\300\260\064\325\367\113\234\077\063\215\336\077\227\377\047\343\063\351\303\321\064\341\162\141\371\276\246\065\000\357\351\301\221\134\352\350\105\326\023\001\036\241\347\335\120\352\352\250\371\063\152\236\246\315\257\211\331\346\063\076\223\266\334\146\034\223\211\202\021\013\162\131\373\176\212\355\177\076\132\117\157\277\210\043\365\211\341\324\343\232\365\332\200\276\165\323\300\326\237\321\314\312\246\231\072\265\226\206\241\166\263\053\077\127\345\075\360\236\154\116\241\134\026\311\147\255\033\022\330\003\124\077\144\300\147\046\022\064\203\325\017\260\335\133\054\267\271\053\153\007\274\101\315\246\315\274\065\153\174\246\344\031\113\246\313\047\151\361\311\330\162\244\135\165\250\314\270\113\263\011\074\000\233\237\013\253\223\243\307\150\326\205\317\247\075\174\126\355\131\073\340\155\303\252\270\066",
    (unsigned char *)"\240\212\073\103\305\065\322\337\235\022\347\173\125\212\154\314\125\072\115\175\175\204\363\346\203\241\253\343\316\120\363\327\114\161\025\360\034\144\056\136\023\304\141\257\012\152\152\146\355\300\066\170\026\215\232\376\253\342\001\140\270\251\130\256\277\244\231\341\321\361\324\322\213\154\271\261\111\143\016\277\256\323\351\166\263\321\050\177\146\032\365\205\232\142\050\252\144\067\316\347\332\332\332\204\234\270\041\154\255\022\163\047\374\255\266\226\015\022\217\247\265\152\137\242\155\220\277\133\303\126\075\136\013\162\236\026\313\130\055\312\074\132\135\307\205\307\212\355\033\332\354\363\105\132\113\153\253\365\074\372\376\226\252\353\153\245\315\123\357\323\322\052\216\225\367\172\103\333\106\041\223\120\143\147\314\071\145\101\276\162\332\151\306\144\007\260\305\166\107\372\314\330\144\124\263\211\342\003\266\141\154\226\302\170\075\025\153\112\340\270\251\070\153\162\233\300\126\010\160\173\144\123\217\053\205\307\105\373\264\174",
    (unsigned char *)"\273\140\334\060\167\041\161\076\303\171\146\264\261\224\337\325\363\235\113\354\057\150\307\125\367\133\210\316\021\367\303\317\253\376\257\276\266\370\070\171\157\314\367\156\056\061\266\310\341\125\347\246\317\105\031\303\224\153\345\123\373\113\136\063\320\136\332\151\246\175\163\107\202\146\060\035\076\351\377\235\147\243\120\347\254\073\131\347\314\125\147\020\343\343\265\346\221\333\362\064\260\070\353\370\031\317\242\266\122\112\315\052\054\227\333\126\303\261\252\157\171\316\013\163\056\232\213\107\036\076\206\217\112\251\175\211\325\052\303\152\224\271\174\235\100\223\340\113\117\073\315\014\016\347\234\161\316\325\367\046\316\005\030\067\140\317\332\326\041\206\341\151\222\221\135\161\004\130\356\202\155\355\143\361\034\066\132\266\325\004\365\311\205\267\321\061\065\327\117\267\331\370\340\272\270\344\144\333\166\312\173\320\365\276\200\167\363\013\101\237\031\341\327\040\343\001\060\173\061\206\075\333\345\300\236\265\341\017\272\152",
    (unsigned char *)"\046\252\153\303\126\007\010\133\353\352\361\224\167\044\232\343\056\307\056\317\170\141\306\371\326\121\241\326\004\166\305\362\121\260\114\153\251\117\341\123\027\011\263\225\106\166\263\125\351\265\233\001\256\230\340\023\241\015\300\126\173\107\137\357\152\214\146\055\330\034\372\073\112\255\305\236\207\163\303\263\342\337\123\141\035\320\274\330\037\154\217\326\125\330\107\356\233\012\373\311\375\362\370\351\360\271\347\225\163\114\207\307\004\375\147\343\363\106\143\047\307\011\372\310\163\317\206\363\232\211\352\224\106\277\265\161\242\153\012\373\044\307\214\307\126\257\025\346\033\135\267\062\177\171\315\362\070\171\335\352\371\247\303\161\300\036\051\217\237\322\257\131\273\117\321\075\225\347\011\345\077\165\156\005\013\175\370\340\110\344\013\351\366\317\300\334\363\305\112\115\376\373\070\106\263\340\364\315\330\344\001\210\337\231\137\130\144\373\366\355\143\113\113\373\330\361\113\113\154\337\122\360\073\370\136\012\333\276\250\305",
    (unsigned char *)"\333\367\051\155\051\372\206\261\222\143\044\307\332\247\035\263\057\061\116\330\177\337\276\304\070\113\332\170\121\237\252\161\226\220\161\227\252\346\037\134\363\222\326\147\011\271\266\140\336\373\302\363\232\372\312\173\150\234\253\034\347\370\045\373\176\155\333\211\113\047\260\023\367\235\300\026\371\063\222\170\000\076\072\230\351\175\332\334\334\222\132\232\001\114\032\223\036\152\363\353\307\370\146\123\125\165\316\174\145\025\101\063\374\370\346\346\146\066\062\062\302\306\162\071\066\231\033\141\323\374\167\201\177\027\370\167\061\027\264\102\056\336\226\150\271\270\117\242\057\034\253\365\215\366\053\377\013\043\332\270\246\363\030\316\233\070\217\062\156\161\304\074\007\175\156\352\271\252\346\156\330\126\314\125\137\263\272\135\375\056\216\030\346\243\035\127\165\037\107\252\317\003\307\116\363\147\062\312\277\133\370\063\232\234\056\326\134\273\110\215\321\004\274\376\264\322\314\306\115\233\215\166\146\127\015\335\310\077\023\341",
    (unsigned char *)"\001\314\133\261\110\361\274\263\040\016\240\256\256\076\360\233\101\036\051\304\364\144\355\200\267\015\341\367\032\325\377\155\300\004\244\332\343\222\161\315\243\251\244\027\310\221\033\031\233\110\360\010\133\075\114\275\215\046\162\001\346\254\170\202\270\217\070\211\157\326\034\306\315\164\146\361\136\053\242\031\343\232\153\250\261\224\260\025\204\307\257\347\174\053\165\162\331\272\365\126\337\006\352\337\015\373\105\370\146\112\354\014\045\346\250\052\117\263\230\345\317\244\015\337\314\205\135\357\302\064\003\054\200\316\256\236\324\321\114\147\167\117\125\236\246\112\053\246\030\264\104\354\314\304\024\132\033\320\225\253\027\217\075\233\345\234\245\056\347\314\215\053\343\252\151\006\276\015\130\077\351\262\061\067\060\211\177\211\371\115\254\262\131\045\224\315\302\272\315\266\167\212\111\346\123\357\167\076\243\231\364\140\150\130\352\002\250\272\056\305\317\013\072\160\333\012\306\002\324\333\346\316\056\241\373\143\061\250\066\137",
    (unsigned char *)"\171\314\147\342\232\115\076\270\212\211\270\014\310\237\311\360\232\123\211\007\100\251\007\150\303\010\200\367\065\330\136\323\242\373\003\217\241\324\136\267\325\056\003\336\332\025\372\147\114\370\146\324\234\202\114\066\113\147\156\063\206\131\107\315\047\221\164\323\335\273\362\061\316\172\373\006\042\373\262\157\115\132\143\034\200\342\237\121\353\214\332\342\061\063\232\111\077\126\223\013\047\223\212\061\011\015\174\036\053\225\136\232\133\132\102\275\237\036\223\213\335\233\234\254\331\224\057\126\351\105\024\036\046\307\234\312\360\232\123\103\063\001\346\312\234\063\306\312\253\176\136\130\213\017\374\353\053\061\116\006\152\251\233\060\315\250\361\141\352\266\200\317\364\337\051\357\043\246\033\231\170\117\125\375\231\214\146\122\125\177\306\126\357\034\313\107\260\341\346\227\102\275\266\241\261\161\305\306\374\273\144\062\127\355\367\070\117\323\156\003\260\321\214\274\367\223\031\126\323\013\242\006\255\015\253\211\262\266\144\235",
    (unsigned char *)"\063\210\033\136\011\374\145\160\150\204\124\153\307\226\207\247\137\247\310\005\350\255\216\321\304\356\045\306\147\062\175\046\175\266\146\054\037\023\315\065\043\344\341\111\272\201\234\264\325\317\103\255\146\024\227\171\355\132\141\337\202\271\140\271\312\066\376\212\307\176\317\305\064\023\306\233\231\164\177\027\017\227\261\341\031\315\244\111\066\233\167\327\364\042\276\177\115\357\155\130\253\220\067\177\040\352\152\102\355\250\051\005\303\315\307\116\206\305\235\305\367\106\251\331\044\060\316\335\271\004\230\214\227\317\142\147\122\046\233\315\133\345\023\127\155\132\323\173\131\177\257\226\147\026\330\070\137\127\317\147\375\263\256\236\136\024\363\300\067\127\017\313\173\215\374\063\123\366\374\031\133\174\100\041\243\231\324\305\316\110\073\227\115\246\067\345\321\232\144\020\053\336\046\347\067\245\020\077\140\177\326\332\004\214\077\201\367\057\152\313\300\234\146\274\162\203\114\357\005\075\257\125\325\147\072\173\161\074\000\014",
    (unsigned char *)"\307\102\267\063\146\372\114\172\143\064\135\170\004\230\135\000\223\347\022\153\047\314\205\224\166\053\360\053\302\372\176\356\150\245\111\340\106\111\334\065\027\037\264\361\114\127\034\262\216\157\246\363\031\052\246\100\206\327\374\302\250\333\354\212\217\162\345\311\273\162\010\342\332\233\213\142\255\014\215\214\011\254\244\132\364\235\246\246\046\266\151\363\146\066\234\033\013\362\223\015\264\142\303\060\262\315\317\230\307\255\344\100\303\367\230\042\233\325\202\023\041\355\362\031\315\244\107\066\003\173\115\311\200\035\101\221\351\227\213\057\042\145\072\340\073\100\077\340\027\204\232\312\020\237\057\361\026\327\160\232\220\265\323\300\146\015\176\122\210\003\205\076\003\103\071\241\007\300\361\245\020\233\216\062\157\123\075\113\133\236\013\206\141\125\054\253\070\232\005\043\157\243\326\200\316\152\151\244\313\006\120\012\365\031\052\056\000\051\116\336\202\175\207\143\162\316\207\364\263\020\305\104\302\373\027\364\154\300\122\222",
    (unsigned char *)"\171\013\001\306\141\200\277\130\260\324\027\167\341\203\332\336\017\256\170\325\130\237\211\145\063\025\267\321\047\136\017\032\344\230\147\064\223\076\237\246\017\366\254\015\133\320\227\047\271\232\011\343\324\344\377\050\132\352\033\330\060\144\175\260\335\315\064\323\177\047\304\110\027\022\330\256\176\270\044\101\156\163\175\106\063\051\212\235\261\305\065\327\022\357\153\302\123\163\325\310\263\375\166\141\112\351\371\217\056\134\105\223\136\206\351\150\266\271\214\115\346\253\152\066\271\352\316\232\362\332\204\117\063\243\231\024\330\000\352\253\150\206\032\217\111\251\203\347\203\243\353\302\035\256\065\136\324\126\073\327\026\203\154\243\061\225\257\101\274\047\045\347\314\045\043\146\266\346\024\321\214\126\177\306\067\366\137\137\217\256\265\207\331\341\174\060\047\051\230\112\324\074\071\052\116\251\051\057\040\302\236\355\355\257\302\320\300\344\126\023\375\145\064\223\116\074\000\037\331\307\265\246\134\030\271\265\142\367\142\165",
    (unsigned char *)"\224\051\265\053\154\072\232\216\223\141\343\241\072\375\211\070\000\203\117\223\342\347\255\342\063\131\156\163\252\150\306\344\053\247\332\213\135\176\035\254\026\007\325\126\240\277\343\061\173\230\073\246\162\326\033\303\336\066\127\225\317\230\160\147\154\270\160\052\115\001\315\116\346\063\273\131\032\343\000\050\161\036\056\033\032\205\036\252\352\003\131\360\132\134\372\063\225\146\050\270\362\266\130\064\063\237\232\017\143\064\373\253\352\151\372\314\045\313\323\114\133\056\000\236\163\146\252\125\104\221\065\250\265\275\154\174\207\122\373\304\167\135\332\342\144\134\372\034\306\103\245\154\066\141\250\101\353\212\313\121\337\067\031\315\244\050\016\240\130\046\331\315\174\361\001\174\061\322\250\347\245\332\347\260\332\037\024\333\202\256\347\333\372\104\065\150\047\013\050\335\273\374\065\231\076\223\136\254\046\137\135\306\265\236\050\076\101\152\334\201\055\266\215\152\077\266\341\375\141\166\074\233\174\026\363\231\376\104\236\246",
    (unsigned char *)"\257\316\226\331\315\322\347\323\054\170\370\130\250\264\201\325\312\202\265\241\257\113\320\251\144\255\234\251\102\305\070\216\172\234\070\046\254\305\203\346\337\363\276\060\056\034\067\071\135\216\176\273\342\141\174\165\041\310\245\063\325\237\261\321\260\211\367\145\064\223\136\114\100\065\117\004\323\263\051\170\371\106\273\032\037\273\074\003\165\275\143\233\021\254\265\331\371\305\040\117\200\367\201\337\140\103\122\151\022\376\127\146\347\371\261\201\177\177\042\374\137\054\007\371\005\220\043\243\317\271\124\011\306\202\066\063\007\337\133\202\343\065\054\013\152\074\002\266\037\253\015\110\315\237\216\150\046\323\147\322\225\163\146\251\261\342\033\327\214\305\364\302\171\266\036\264\203\335\164\323\367\331\253\316\171\015\033\341\357\347\301\221\061\366\226\267\274\215\375\354\147\077\143\257\172\325\253\331\336\243\136\054\176\277\362\354\127\261\276\301\021\101\033\375\303\243\354\370\175\047\260\133\157\275\225\275\346\065\257\343",
    (unsigned char *)"\162\320\000\073\346\270\343\331\217\177\362\023\166\303\015\067\010\272\001\336\244\322\014\214\175\312\251\057\145\267\337\176\273\070\356\027\277\370\005\273\367\336\173\331\167\277\373\135\101\073\072\277\301\160\314\114\376\107\123\075\315\116\205\146\154\070\200\030\017\223\030\075\031\315\244\315\077\263\174\337\243\111\337\225\307\202\055\166\367\301\207\261\047\236\170\202\235\367\366\167\260\256\276\101\266\155\307\056\261\226\341\363\356\167\237\057\326\337\275\367\335\307\156\274\361\106\266\345\240\355\154\347\356\103\330\302\342\101\354\232\153\257\145\117\075\365\024\073\370\320\027\261\316\236\001\166\371\345\037\146\362\163\352\113\117\143\303\243\023\211\363\001\255\315\055\154\141\077\375\351\117\105\237\113\057\275\214\235\177\376\205\354\274\363\376\120\360\237\274\207\156\204\311\156\161\156\163\076\364\151\116\033\261\025\135\066\072\131\227\043\303\067\113\037\036\000\305\226\104\255\113\143\262\137\001\315\000\015\374\362",
    (unsigned char *)"\227\277\144\157\171\353\271\154\323\346\116\366\267\237\376\214\130\323\317\076\373\054\173\317\371\027\260\015\233\072\330\025\127\176\104\154\273\377\376\373\331\075\167\337\315\151\352\076\361\377\063\237\371\254\340\075\205\122\205\375\307\177\374\047\373\337\377\347\377\262\273\356\272\213\135\175\365\047\331\040\347\105\372\034\200\327\034\163\334\022\173\340\376\007\330\247\376\346\157\131\067\347\117\275\003\303\344\130\114\127\315\153\025\107\123\320\314\344\264\027\266\100\265\076\023\140\234\327\051\064\323\025\326\155\312\332\201\153\360\034\332\127\005\165\347\154\270\063\076\176\175\254\237\036\247\077\306\327\124\100\063\017\263\127\277\346\265\354\370\245\023\330\063\317\074\303\076\164\331\145\234\066\356\141\027\135\364\136\266\271\253\227\035\167\374\222\330\376\367\177\377\071\166\310\241\207\263\253\076\372\077\004\315\234\161\326\313\205\134\166\312\251\057\023\377\317\171\365\153\331\245\037\272\214\335\317\371\022\360\024",
    (unsigned char *)"\075\247\001\176\017\160\132\132\332\167\222\070\347\377\372\362\015\042\166\130\217\025\302\162\001\154\265\061\223\070\232\223\002\017\100\305\153\266\371\142\115\376\257\110\237\011\151\006\352\234\155\312\332\212\150\033\127\045\153\003\252\066\000\237\174\253\132\142\051\201\317\354\342\064\363\300\003\017\010\236\162\313\055\377\314\276\371\255\033\205\254\164\317\075\367\260\213\057\276\104\360\021\210\255\277\371\346\133\370\276\157\261\346\326\215\354\332\153\257\023\072\111\201\237\033\366\377\345\125\037\145\217\077\376\070\233\235\133\140\373\116\070\111\320\317\153\137\367\173\134\067\032\257\232\373\070\227\321\172\373\207\331\322\011\047\262\307\036\173\234\135\161\305\225\154\070\067\356\264\063\373\370\203\324\272\315\152\276\053\245\226\255\156\067\253\013\363\121\033\303\147\324\270\237\133\303\363\160\216\064\317\107\266\072\255\236\204\254\015\350\362\167\123\261\216\260\334\224\361\251\042\333\271\353\140\241\277\074\364\320",
    (unsigned char *)"\103\102\257\331\263\367\150\101\013\040\077\135\164\361\173\005\137\350\037\314\011\335\346\311\047\237\144\257\177\303\033\331\043\217\074\302\076\360\301\113\205\134\125\344\364\165\373\035\167\260\257\174\345\053\274\157\116\330\300\156\273\355\066\366\305\057\176\111\330\023\204\315\074\074\147\211\237\363\320\303\216\020\076\333\266\366\116\316\317\056\147\367\161\236\004\166\264\011\151\333\166\340\145\330\342\153\344\065\347\054\330\263\256\034\040\225\157\303\074\173\172\372\130\127\127\067\353\356\356\341\337\274\165\343\015\152\312\101\237\116\336\077\332\036\035\323\253\364\355\115\036\243\174\047\217\353\115\214\233\074\137\257\230\227\332\277\123\314\263\027\351\257\154\343\337\242\037\172\115\275\211\276\235\141\177\323\374\361\375\325\327\350\156\275\125\363\251\276\226\360\236\310\006\347\356\355\217\260\140\154\271\301\024\174\073\027\356\052\254\251\035\234\146\036\174\360\041\301\033\056\343\172\074\350\363\133\016\332\041\266",
    (unsigned char *)"\275\367\275\357\023\353\136\364\333\011\375\036\024\374\344\321\307\036\145\207\037\261\207\165\367\017\262\063\316\074\113\034\373\226\267\276\115\364\005\074\200\253\070\337\001\372\333\276\153\267\070\266\030\362\264\203\017\075\214\323\310\275\354\275\227\134\042\160\056\076\177\315\065\134\377\271\233\125\146\027\002\371\314\323\107\212\305\376\344\306\046\340\076\336\011\262\047\346\223\161\325\324\210\152\305\205\371\250\245\260\225\243\266\030\376\137\024\370\123\345\020\363\252\244\354\253\376\235\034\243\042\216\133\014\317\261\250\215\277\040\306\015\260\264\026\022\363\120\373\310\143\243\363\207\071\346\352\030\305\031\303\274\347\026\265\153\132\124\306\137\104\317\145\232\207\070\337\334\142\234\007\317\177\127\300\217\240\314\101\335\137\121\376\227\224\173\133\322\256\275\042\372\250\327\031\337\103\310\241\227\343\302\174\247\011\061\055\230\077\216\022\237\046\177\303\273\175\373\216\335\234\307\374\222\375\373\277\377\207\360",
    (unsigned char *)"\257\344\306\247\204\175\014\144\263\013\057\374\223\200\127\360\376\200\103\363\351\117\177\132\320\307\365\327\177\201\215\214\116\010\372\370\330\307\076\316\036\176\370\141\266\175\347\156\066\221\057\211\343\117\076\345\124\366\273\247\237\146\157\073\367\074\161\174\244\077\115\344\331\207\270\276\363\253\137\375\212\335\301\171\023\310\204\277\377\226\267\012\333\200\113\066\243\306\241\005\064\063\031\347\151\226\347\214\072\037\005\037\260\026\354\065\214\237\251\276\136\027\156\264\013\267\001\303\022\241\344\322\305\347\007\376\357\266\111\122\345\141\114\027\245\274\303\143\276\136\361\216\105\361\261\057\273\362\375\051\361\216\142\133\251\302\116\074\371\045\134\267\177\221\260\011\004\307\125\270\236\176\042\333\306\351\111\346\077\003\037\070\150\333\116\166\332\351\147\010\372\220\076\374\243\217\071\226\035\173\334\222\342\123\012\360\376\116\342\143\036\372\242\043\102\375\076\236\023\254\147\220\377\316\172\305\331\342\234\043",
    (unsigned char *)"\143\123\244\347\342\302\133\116\326\154\212\151\306\307\116\126\053\266\017\045\177\232\202\377\141\222\241\061\136\112\315\237\245\370\272\175\142\130\155\062\016\126\373\205\172\176\133\054\026\032\133\345\051\157\141\153\106\317\041\160\341\355\301\272\205\365\245\366\037\341\374\142\122\263\173\001\215\000\117\220\153\021\366\301\357\321\211\151\203\275\167\012\365\315\102\177\360\337\210\161\210\366\162\162\254\230\122\203\126\247\231\132\162\250\247\303\353\236\012\343\202\240\115\101\203\155\341\177\360\055\311\375\001\117\231\211\372\346\225\276\340\347\225\276\336\174\310\173\246\242\361\324\337\345\350\133\366\251\032\113\031\117\237\227\332\127\235\107\164\274\034\267\120\321\306\237\111\234\043\276\236\352\071\350\375\246\302\276\325\363\011\276\047\145\137\365\272\305\134\344\165\224\243\357\174\321\274\055\261\075\234\357\224\022\257\245\347\270\333\060\147\325\167\022\245\316\006\205\237\272\152\347\331\336\201\024\035\302\044\067",
    (unsigned char *)"\122\144\000\227\076\247\306\150\112\232\241\326\207\257\172\227\362\266\260\145\233\320\371\300\327\273\215\363\327\355\134\257\333\266\163\127\370\275\133\350\154\333\371\376\355\321\276\335\342\067\360\150\321\302\355\361\276\270\057\034\053\373\213\375\073\166\047\306\201\163\312\377\060\007\365\074\333\345\171\242\343\167\207\307\354\116\314\165\173\070\367\350\174\360\173\327\301\321\030\320\357\040\276\155\307\256\103\202\163\354\014\257\147\227\162\055\073\203\171\004\367\141\167\334\107\371\216\316\041\357\311\316\335\211\353\335\026\366\025\307\357\222\327\273\053\232\273\274\147\121\377\035\372\361\273\242\173\052\347\262\003\276\371\176\360\261\333\326\075\346\237\064\361\115\335\216\140\302\255\160\325\031\360\221\011\051\262\010\045\046\310\224\067\355\222\343\165\074\200\116\004\343\134\257\323\204\307\123\163\175\217\037\237\313\345\330\336\075\173\330\121\107\355\145\107\357\335\303\216\331\273\227\035\233\150\173\242\337\307\204",
    (unsigned char *)"\377\217\111\154\013\177\357\121\373\032\366\133\306\255\152\321\130\173\264\061\203\163\323\307\334\143\230\113\362\277\276\355\330\350\032\223\143\037\123\165\114\162\273\251\035\243\315\377\030\343\374\342\175\307\354\251\276\206\027\363\066\306\237\221\264\221\232\260\060\050\076\014\133\177\112\216\001\346\217\327\365\130\052\376\040\325\006\346\303\267\154\162\147\124\117\123\311\071\163\371\143\114\367\016\144\113\250\321\003\366\377\106\336\232\171\153\343\155\143\326\126\104\203\347\001\376\263\325\253\353\204\117\123\255\067\101\305\146\302\344\017\123\355\047\137\235\226\142\273\246\142\023\120\164\110\037\275\121\037\117\372\064\135\165\323\135\062\250\214\067\003\277\331\332\320\377\274\071\153\007\274\311\330\231\146\045\016\000\336\347\172\215\026\237\234\051\012\326\271\015\377\205\022\133\200\341\316\370\346\211\122\061\076\311\143\126\224\374\031\045\166\306\046\013\232\164\244\054\177\046\155\370\146\045\343\273\217\372\056\327",
    (unsigned char *)"\337\347\256\375\056\114\062\052\006\354\162\260\011\051\266\117\022\377\231\121\360\315\224\234\063\152\355\321\252\030\315\214\146\122\225\163\346\322\173\051\230\030\124\133\131\055\170\266\076\265\366\174\354\170\066\137\206\251\106\232\051\177\106\346\066\373\320\110\242\226\125\126\263\051\225\030\347\124\235\337\246\103\123\175\106\030\156\123\055\162\023\146\003\247\344\302\140\363\165\331\244\223\076\115\245\156\263\245\076\217\076\107\375\136\146\064\223\036\254\046\251\317\270\336\301\066\174\073\252\254\143\363\111\233\326\147\111\253\033\113\301\157\242\312\105\124\274\013\027\356\106\354\323\234\106\347\110\261\343\145\064\223\276\172\232\324\370\053\152\275\146\052\317\362\215\301\302\164\036\252\155\300\026\043\105\301\245\301\343\232\247\235\374\321\146\147\314\364\231\364\143\065\325\212\101\046\175\053\076\271\321\066\237\217\111\246\251\025\337\037\173\037\370\330\342\252\360\232\307\143\114\300\202\003\033\012\223\327\262\132",
    (unsigned char *)"\347\351\324\147\134\165\147\155\265\146\135\361\245\230\374\205\255\345\074\202\015\263\234\370\123\037\134\150\212\217\046\216\003\230\104\361\232\155\076\255\314\326\374\302\252\101\353\212\225\265\345\326\270\374\065\124\233\227\255\076\207\217\075\131\347\117\056\236\343\203\347\351\222\315\154\130\354\272\337\052\223\315\322\244\317\224\255\064\343\172\327\143\171\125\124\373\062\126\213\334\327\016\075\135\143\016\031\026\117\116\211\037\000\033\105\134\177\046\351\323\264\351\106\246\071\146\130\115\351\254\247\111\221\205\050\330\052\256\170\031\337\030\174\223\215\015\213\133\266\325\070\247\304\206\122\345\101\025\257\131\257\077\203\305\250\311\375\246\130\272\311\020\103\043\243\231\364\320\214\051\356\003\363\057\330\154\150\024\175\002\133\323\076\165\150\174\150\024\213\271\161\331\257\051\265\333\022\271\000\216\272\040\230\375\055\300\004\314\364\231\324\324\005\120\370\014\106\043\266\370\030\237\032\173\230\015\272\312\307\251",
    (unsigned char *)"\344\203\107\174\105\346\163\207\065\316\145\014\275\211\347\140\066\061\212\377\206\122\333\131\245\065\225\146\060\373\210\211\077\252\343\145\064\223\176\354\131\252\155\327\247\326\005\366\236\127\165\003\150\040\267\000\346\305\300\320\210\300\375\150\333\270\211\265\156\150\143\033\067\265\263\216\316\156\326\323\067\040\366\001\246\023\234\107\142\035\140\264\343\133\067\323\267\316\241\314\005\120\343\232\175\353\135\147\262\131\272\151\306\007\143\222\252\147\273\342\011\000\373\146\150\144\124\320\105\123\323\132\221\103\262\112\301\224\062\265\272\272\072\266\156\175\263\300\317\031\031\035\217\350\316\104\233\224\274\067\127\335\102\375\035\042\177\313\072\147\246\232\115\330\175\255\316\225\310\342\315\322\126\263\251\024\342\355\123\363\301\174\175\034\046\072\001\031\153\062\137\020\274\244\151\355\132\047\215\270\332\172\116\077\275\375\203\202\117\001\337\051\070\354\027\030\117\260\331\017\114\374\313\124\267\331\047\326\056\252",
    (unsigned char *)"\375\221\371\064\123\133\113\003\213\003\363\211\107\261\345\036\127\146\027\205\135\025\344\254\306\306\306\145\323\212\336\200\117\365\162\371\115\306\045\373\140\364\271\260\213\114\361\235\143\023\161\135\000\137\072\121\357\125\146\153\116\137\075\115\027\236\044\026\107\351\212\163\126\217\007\336\002\030\172\260\256\237\153\132\251\346\073\353\205\314\006\070\156\046\273\237\257\216\146\313\005\220\071\147\265\306\217\146\271\000\351\224\315\174\174\045\024\014\175\165\033\214\077\061\135\144\233\332\073\110\272\312\163\325\340\134\035\135\335\341\074\346\214\366\007\333\132\246\340\322\210\330\231\356\276\052\354\131\152\274\246\370\316\342\000\122\037\157\346\213\257\206\342\004\226\147\004\157\201\167\361\232\065\115\317\033\255\350\255\245\165\103\204\261\113\211\123\260\345\146\353\327\072\246\331\232\251\076\043\335\076\231\325\237\111\223\335\254\150\304\320\240\304\267\140\271\356\342\270\320\016\014\266\130\211\015\161\040\033\330",
    (unsigned char *)"\254\325\072\073\056\275\215\022\227\035\320\114\136\330\315\124\354\102\033\077\303\362\030\062\232\111\147\354\014\025\153\302\026\147\242\372\040\101\306\157\330\017\172\176\255\255\243\273\007\265\013\350\276\042\252\317\163\124\253\013\140\312\017\327\353\224\232\356\161\046\233\245\253\156\263\055\276\037\323\147\354\161\131\101\275\273\346\226\326\025\103\057\262\001\126\072\330\005\174\353\351\140\230\300\121\056\100\276\150\305\361\260\331\354\004\315\160\232\312\150\046\075\076\115\375\275\352\302\241\166\311\352\060\036\370\032\127\032\275\254\012\155\205\020\357\042\174\070\026\337\053\065\027\065\207\340\065\273\216\315\362\147\322\317\147\050\271\377\256\167\147\320\177\136\254\043\300\033\134\211\064\043\174\070\153\327\012\131\250\200\304\000\270\154\351\311\330\231\030\167\306\007\353\063\141\207\317\154\315\351\243\231\145\340\342\125\307\057\316\213\370\260\225\112\057\252\115\300\146\143\167\143\040\314\045\160\064\047\103\331",
    (unsigned char *)"\114\355\243\142\310\333\356\141\346\237\111\233\117\263\234\300\320\360\311\377\065\371\075\107\306\046\126\064\217\121\175\067\140\003\007\133\070\245\376\213\271\326\312\254\122\263\151\332\130\253\011\303\206\112\142\013\316\213\370\362\214\146\322\347\237\361\305\316\064\141\172\203\057\144\245\323\213\154\033\067\155\026\064\343\363\176\250\306\152\232\012\174\232\141\155\100\252\235\332\210\325\224\305\065\247\036\103\303\125\203\070\101\067\141\236\357\363\351\347\177\056\354\001\022\147\231\132\113\040\031\223\074\037\344\317\010\232\051\220\150\305\364\156\212\144\263\214\146\322\041\233\115\227\274\165\027\023\035\301\163\337\334\331\225\032\172\221\255\273\247\117\330\320\174\361\004\324\272\000\135\152\055\215\362\034\011\277\040\363\151\246\075\256\171\276\246\230\105\065\317\020\176\257\135\273\056\165\064\263\276\271\245\246\032\071\172\375\231\161\015\257\031\313\035\062\141\316\200\136\044\174\232\031\237\111\215\154\146\212\235",
    (unsigned char *)"\261\345\257\233\152\164\347\204\356\277\072\165\064\123\127\127\057\162\076\155\365\310\154\272\036\330\000\044\136\263\254\257\141\253\331\212\141\153\144\262\131\072\151\206\252\273\046\326\120\151\126\344\351\167\367\366\245\216\136\144\353\037\034\216\362\243\155\030\120\246\167\106\020\007\320\227\210\235\361\307\331\231\313\362\147\126\150\353\322\150\246\001\211\067\323\375\013\266\072\350\162\137\153\333\306\324\322\314\246\315\035\001\066\107\145\226\274\346\125\254\246\316\020\107\023\303\263\301\350\056\076\127\034\157\126\027\076\037\131\143\053\253\065\166\340\033\324\234\133\033\256\225\006\103\034\200\051\016\327\371\236\344\274\146\335\372\365\251\245\231\226\226\326\160\155\273\353\001\252\367\112\310\244\132\376\214\013\107\012\213\243\026\174\246\276\136\274\313\326\361\326\272\052\250\107\127\153\153\011\133\363\363\334\016\324\171\367\147\003\172\251\223\262\274\126\347\314\027\327\122\356\207\347\335\270\146\115\152\151\246",
    (unsigned char *)"\251\251\211\224\173\147\342\101\261\255\171\332\211\061\200\341\053\110\175\146\035\237\107\043\177\046\115\134\257\151\342\357\263\065\262\325\207\115\377\335\240\365\123\267\211\176\365\306\143\242\155\330\071\114\343\326\043\307\125\365\253\217\317\153\230\123\023\172\034\141\154\142\153\262\135\147\003\361\072\224\261\032\171\003\031\000\336\151\153\232\326\012\134\055\027\066\246\055\206\035\032\370\300\141\274\264\322\114\103\103\143\204\277\143\173\137\230\256\175\124\253\333\154\253\261\216\341\137\311\337\100\267\360\376\201\271\200\134\014\164\004\357\064\150\260\055\370\037\364\221\277\341\030\350\053\367\007\307\226\023\307\310\375\223\005\145\214\102\374\137\236\153\062\074\267\251\005\347\124\347\021\157\213\307\054\213\174\254\274\362\137\216\053\347\015\163\203\076\321\276\202\262\117\351\257\136\317\224\076\367\150\077\157\105\363\374\243\153\124\316\235\070\276\240\134\137\101\275\337\145\155\014\375\072\112\065\325\223\320\343",
    (unsigned char *)"\076\106\047\363\254\056\005\361\062\270\157\263\236\231\142\054\051\065\077\301\136\050\150\046\137\100\161\241\114\262\231\051\056\115\365\225\026\264\030\213\310\116\243\342\044\252\371\076\132\177\030\103\307\124\254\332\246\217\255\326\234\323\306\052\206\347\210\346\130\025\157\065\027\345\364\105\163\063\314\127\317\261\252\352\257\234\063\171\037\223\365\360\252\142\120\302\361\342\143\346\265\161\347\203\071\052\347\234\226\143\127\305\263\314\221\352\172\123\152\346\231\337\267\363\202\376\340\135\235\126\232\151\154\134\223\340\063\024\254\151\035\107\323\204\241\341\312\047\300\336\127\024\134\105\333\176\054\326\315\205\115\340\252\061\345\123\343\301\206\077\117\251\317\103\311\345\242\254\117\024\203\001\171\177\121\342\247\174\353\134\030\261\125\371\173\362\100\346\373\057\267\255\133\267\336\273\256\215\015\337\214\212\323\253\347\207\123\060\012\044\346\206\117\376\254\253\176\025\266\316\175\352\054\332\154\205\066\334\070\075",
    (unsigned char *)"\177\065\071\056\236\213\142\212\245\160\306\332\172\326\046\366\301\163\240\320\230\076\136\163\163\113\172\355\146\255\033\254\071\062\266\372\041\271\050\117\263\340\254\325\101\301\326\230\052\124\222\072\200\220\263\053\242\346\111\260\115\312\335\025\261\117\154\017\373\115\026\302\337\272\216\022\351\016\345\204\216\063\225\220\341\313\211\176\342\234\232\074\077\225\030\247\034\235\137\216\125\165\134\270\037\176\117\250\347\225\175\242\071\046\307\236\122\216\217\347\030\137\237\336\107\277\026\261\015\060\343\344\061\211\173\251\334\053\241\267\224\343\373\251\214\013\143\346\243\173\034\367\163\325\322\263\345\350\252\153\002\344\114\300\141\112\053\315\154\356\350\214\144\145\375\035\353\252\267\033\333\232\247\023\170\120\324\172\274\252\116\263\145\353\066\266\347\250\243\331\236\075\107\261\043\171\333\263\227\177\357\015\176\333\332\036\265\317\136\371\177\157\160\254\374\275\047\036\153\217\161\234\275\312\070\173\225\246\217\133",
    (unsigned char *)"\175\134\125\237\275\362\367\321\332\230\311\171\006\163\077\272\352\032\366\150\175\344\261\173\366\046\317\161\104\170\215\321\365\052\163\336\043\367\133\346\176\304\221\311\153\124\357\067\374\206\171\354\025\327\020\074\223\243\370\367\101\374\031\271\370\231\155\277\374\015\076\364\376\201\241\324\322\314\300\340\210\210\145\240\310\106\252\276\036\325\071\123\362\147\154\365\005\060\336\057\142\064\363\105\326\331\331\311\266\054\056\362\347\262\225\355\330\272\205\355\132\261\155\153\330\266\244\274\321\256\141\267\150\133\331\266\055\213\254\233\277\137\341\131\225\302\334\170\375\071\122\360\044\244\174\015\376\011\210\335\112\237\235\271\101\334\003\151\163\241\340\275\107\377\053\346\132\032\072\316\214\255\226\265\374\015\166\326\325\165\201\355\161\165\350\107\153\311\332\212\151\153\242\134\305\072\141\057\167\361\026\222\315\003\362\315\126\040\316\214\253\101\036\266\264\153\332\360\002\261\173\202\325\006\364\251\347\256\142\065",
    (unsigned char *)"\211\130\153\336\332\303\330\231\316\254\035\360\146\303\067\163\311\023\046\173\201\134\047\360\335\323\333\237\072\232\351\343\062\145\171\166\321\151\123\302\142\130\203\270\346\030\253\211\122\073\261\232\146\262\234\263\264\325\155\056\151\162\111\055\165\144\341\033\326\315\112\300\314\044\313\145\215\215\021\036\202\157\375\234\044\046\040\304\001\024\275\060\240\165\237\134\206\007\220\256\272\000\172\255\043\054\317\303\225\023\002\266\200\064\331\317\072\072\273\042\135\216\122\163\326\244\207\104\370\146\223\323\326\332\011\046\077\206\112\063\131\056\100\172\261\147\061\277\002\245\046\023\320\014\344\157\245\041\367\254\076\324\375\145\336\014\265\036\240\276\376\163\343\062\267\171\332\131\047\315\224\013\020\325\155\316\362\064\123\133\353\334\025\177\141\362\155\352\172\100\173\012\170\015\324\127\023\062\231\305\267\214\351\161\321\166\210\321\014\361\315\050\230\200\030\337\311\144\263\027\116\015\132\127\114\217\315\047\332\274",
    (unsigned char *)"\202\155\150\200\133\040\153\153\024\054\170\375\266\173\040\361\062\144\134\263\136\177\206\132\273\051\312\005\310\144\263\124\141\002\272\342\150\164\173\220\253\146\271\250\321\304\345\236\225\230\123\003\162\243\250\177\246\341\065\273\170\012\146\107\123\163\001\112\041\026\011\065\336\053\101\063\031\237\111\225\335\314\125\273\330\125\137\322\104\073\260\046\141\155\326\325\255\254\034\201\256\236\336\204\037\005\273\006\127\314\214\212\327\354\252\015\210\321\141\025\206\106\106\063\251\301\152\062\325\010\267\351\275\324\330\150\240\233\236\276\201\025\103\057\355\233\073\204\016\243\143\000\122\153\372\125\265\112\022\103\203\152\177\063\361\351\214\146\136\070\330\263\130\036\225\013\277\131\215\337\204\265\172\140\345\261\072\201\213\043\336\015\345\071\064\257\301\206\261\204\325\331\211\153\003\116\073\361\067\324\070\320\204\054\073\233\141\234\277\220\260\147\261\174\011\012\266\206\372\076\075\120\164\003\271\160\203\303\243\241",
    (unsigned char *)"\376\062\347\324\315\135\365\000\164\035\147\324\100\063\066\374\004\043\316\106\126\027\040\165\165\233\251\362\010\106\047\066\314\000\065\007\032\142\237\237\317\174\316\365\353\233\005\126\201\364\363\123\346\211\305\103\030\371\155\104\063\146\133\063\005\003\132\366\311\142\147\322\245\317\330\162\323\134\353\312\125\367\116\307\250\205\265\325\266\251\375\171\301\374\237\016\353\340\272\364\056\123\256\072\045\047\030\352\366\214\215\127\373\147\134\371\215\125\367\056\263\065\247\120\066\233\267\326\255\263\345\152\233\152\241\331\060\301\144\337\241\221\321\375\342\303\201\061\007\207\163\106\175\204\232\157\113\216\175\220\230\200\335\375\167\116\346\013\116\334\032\033\375\145\076\315\364\305\150\372\310\147\024\171\315\265\106\144\234\327\040\247\035\250\071\266\234\330\116\310\201\331\270\261\235\015\347\306\043\173\235\356\147\242\310\144\256\170\175\323\161\101\155\300\030\253\311\165\157\114\374\131\320\114\061\243\231\064\372\147",
    (unsigned char *)"\174\033\146\243\325\375\241\366\034\351\000\103\010\342\202\001\067\031\350\007\352\135\256\256\303\143\326\000\313\160\355\272\165\134\376\152\147\375\103\043\302\177\132\012\155\310\330\374\144\176\245\051\376\313\046\073\271\342\136\324\374\231\002\142\107\246\330\111\062\033\100\332\152\151\054\237\146\152\341\121\372\372\223\353\036\326\067\350\326\303\271\061\041\147\201\235\270\247\257\237\015\160\372\200\155\143\223\323\174\254\112\022\217\013\211\027\163\331\370\154\362\033\226\243\034\135\167\030\327\334\055\150\246\350\344\111\066\354\024\231\163\226\321\114\072\364\031\335\006\353\222\143\174\160\257\174\061\257\124\277\216\150\134\316\002\374\361\340\377\202\220\273\114\262\244\013\317\307\124\253\335\226\307\114\305\045\033\015\145\063\112\274\231\355\236\146\065\233\322\311\147\154\161\376\124\134\047\014\333\310\364\336\307\162\334\174\374\104\024\071\021\303\340\262\141\231\333\160\253\325\271\106\265\316\055\372\214\013\177\046",
    (unsigned char *)"\323\147\322\031\073\143\363\351\123\152\323\350\161\132\045\304\047\202\341\032\122\060\243\051\176\125\137\171\321\146\133\266\341\275\045\160\147\044\315\224\335\261\105\352\275\121\357\131\106\063\151\363\151\316\073\345\356\132\164\036\012\357\060\361\007\123\256\216\015\043\322\125\127\311\047\166\322\125\327\315\024\327\254\326\323\244\370\201\223\264\122\011\153\320\146\262\131\232\343\000\174\326\234\113\327\065\215\355\262\005\270\360\113\155\066\071\137\035\313\327\166\241\323\357\230\222\163\146\212\315\241\340\046\147\066\200\064\332\000\314\357\174\233\237\302\204\031\115\305\251\265\341\330\370\344\175\271\362\365\051\330\332\030\235\232\160\200\253\346\044\143\147\272\343\172\232\030\035\143\271\107\101\277\314\326\234\106\232\241\342\131\333\164\214\345\274\307\115\164\044\175\052\056\137\043\066\027\012\376\064\065\246\316\234\013\060\027\325\155\326\361\232\135\071\106\306\032\264\031\315\244\022\103\303\047\307\014\343\101\324",
    (unsigned char *)"\230\147\237\337\265\330\322\050\163\164\141\273\333\356\213\264\065\167\053\070\232\030\026\247\213\236\063\133\163\212\150\106\253\357\205\311\340\265\330\000\364\161\260\174\170\123\075\005\227\336\137\113\234\030\045\356\307\327\356\036\141\065\115\025\234\165\051\154\266\200\240\236\146\106\063\151\244\031\112\016\026\145\215\331\164\030\037\274\101\112\015\036\023\366\070\146\173\253\225\366\215\361\246\022\023\120\346\066\127\146\235\066\012\054\217\057\223\315\322\213\325\104\255\201\106\255\011\156\252\031\061\221\017\352\025\142\343\301\234\306\363\305\052\271\161\132\324\024\051\053\353\254\042\152\055\253\270\342\005\203\035\141\112\257\277\242\321\327\162\354\344\021\315\344\013\211\163\123\171\157\124\027\040\343\063\251\267\233\371\306\224\230\360\320\364\367\351\360\330\204\300\341\333\265\373\020\266\165\333\116\201\165\054\343\264\240\057\304\132\016\345\306\331\374\342\101\154\367\041\207\261\231\371\105\066\234\233\210\355\024",
    (unsigned char *)"\340\313\010\353\252\011\172\052\317\210\270\063\371\273\124\111\362\033\070\167\151\146\216\315\316\157\341\155\061\374\336\302\312\141\114\133\301\041\227\331\374\261\121\235\063\141\153\356\255\262\065\273\154\145\211\175\141\355\353\214\317\244\327\006\340\312\041\243\352\067\052\377\002\132\070\363\254\127\260\133\156\271\205\075\370\340\203\354\276\373\357\147\327\134\173\035\073\210\323\016\360\024\240\027\130\327\177\375\327\237\140\167\335\165\227\350\163\307\035\167\260\313\057\277\102\320\010\304\250\034\162\330\341\354\346\233\157\146\047\237\162\052\033\233\310\263\033\157\274\221\135\175\365\047\131\127\117\077\173\307\073\337\305\276\361\315\157\305\364\300\317\073\302\151\362\025\257\074\233\375\374\216\237\263\133\157\275\225\375\342\027\167\262\173\357\275\217\175\375\353\337\020\264\147\342\067\224\074\324\144\135\200\111\045\117\163\336\231\143\206\311\277\131\034\100\372\342\315\114\165\062\153\211\121\066\255\015\340\047\047",
    (unsigned char *)"\237\174\052\173\362\327\117\262\157\174\343\233\354\364\063\317\142\347\275\375\017\331\023\117\074\301\156\272\351\046\316\173\112\042\126\371\053\137\371\052\173\372\267\117\263\113\336\367\247\354\324\227\276\214\135\161\305\225\014\076\127\177\362\123\254\167\140\230\355\075\372\030\366\133\276\377\314\063\137\316\136\164\370\221\142\337\375\234\366\046\370\261\037\270\364\103\202\316\200\356\100\316\221\230\353\133\267\355\140\167\337\175\267\350\373\147\177\366\347\354\302\013\057\142\157\171\353\333\070\217\251\130\355\145\066\214\235\004\036\200\314\237\121\352\002\330\152\114\232\364\253\122\206\007\220\276\374\031\103\275\042\023\316\227\217\375\070\332\006\062\031\347\061\137\376\362\015\342\075\017\153\265\157\160\204\165\162\336\360\306\067\275\131\154\007\031\351\245\057\073\135\254\353\167\277\347\174\266\271\253\217\313\161\302\357\301\076\362\221\377\316\236\171\346\031\166\310\241\207\363\366\042\366\370\343\117\260\227\160\172",
    (unsigned char *)"\002\232\203\317\323\117\077\315\216\075\156\211\375\311\105\027\163\376\164\167\110\063\345\004\177\003\276\364\360\303\017\263\277\370\313\253\370\330\075\254\227\237\337\026\027\155\263\207\350\362\226\212\241\101\211\143\063\335\043\240\231\114\237\111\127\135\000\233\015\000\213\007\266\371\356\324\337\360\376\004\071\350\316\137\374\102\310\142\375\103\271\250\006\073\330\232\000\117\037\150\350\117\071\017\370\315\157\176\303\016\346\172\014\360\034\330\077\074\072\301\116\072\371\045\202\066\136\165\316\153\330\216\235\273\331\343\217\075\316\116\077\343\054\366\205\057\174\221\135\167\335\365\234\117\175\137\034\173\376\005\027\206\064\263\245\052\277\154\160\144\214\275\354\264\063\070\275\075\316\076\367\271\317\213\163\252\376\122\112\354\020\226\143\040\061\064\164\232\161\335\047\135\357\063\361\231\256\254\035\360\006\065\233\066\103\316\274\005\257\331\306\123\060\371\315\106\117\060\176\145\166\101\310\107\237\376\314\147\004\315",
    (unsigned char *)"\104\357\126\276\116\106\271\136\062\060\074\312\076\360\301\113\305\232\336\316\351\102\346\074\346\306\363\154\151\337\211\202\146\136\367\372\067\210\175\277\372\325\257\070\217\171\207\320\117\116\077\343\114\056\157\275\237\175\363\133\337\142\177\376\376\367\263\073\357\274\223\315\161\232\121\143\033\240\201\235\256\167\140\204\235\166\372\031\354\251\247\236\022\262\037\320\321\162\162\264\045\036\100\120\263\251\072\106\323\345\303\324\371\014\320\060\074\217\272\360\371\264\207\317\252\075\153\007\274\155\130\025\327\006\304\060\001\155\370\305\230\275\000\213\305\204\006\062\077\360\203\233\157\276\105\344\042\203\255\014\164\172\220\243\240\046\056\254\337\067\276\361\115\202\066\116\073\375\114\326\335\067\050\326\020\350\366\177\300\165\017\370\034\173\374\076\266\153\367\241\354\201\007\036\140\327\135\177\275\260\017\314\314\055\260\123\136\362\062\141\063\370\362\015\137\141\267\335\166\233\330\046\365\031\030\003\154\002\140\073",
    (unsigned char *)"\000\173\335\246\216\156\366\261\217\175\234\335\176\373\355\102\106\164\305\346\140\374\107\317\323\224\030\347\056\037\226\275\306\171\131\340\364\302\273\254\211\267\165\253\202\232\232\131\073\260\015\236\105\243\212\057\311\237\121\336\100\063\276\276\161\127\214\315\020\247\211\267\235\173\236\130\373\027\135\374\136\141\023\336\266\175\227\260\137\375\370\307\077\146\323\305\062\053\317\316\261\073\156\277\203\375\347\177\376\247\320\365\301\126\166\302\111\247\260\373\356\273\217\375\340\007\077\144\043\134\116\073\374\210\275\354\321\107\037\145\377\365\137\377\305\276\372\325\177\024\171\317\263\013\133\330\355\234\176\100\257\371\331\317\200\146\026\243\072\356\300\303\200\046\037\172\350\041\366\316\167\375\021\233\344\362\023\350\117\077\371\351\117\305\370\252\135\332\047\147\041\216\321\324\343\000\346\320\370\147\127\114\003\314\145\143\333\106\326\332\322\312\066\264\102\333\300\132\225\326\022\375\156\115\154\017\366\305\333\240",
    (unsigned char *)"\246\151\262\177\174\174\013\166\214\241\017\166\274\276\335\166\016\323\174\155\307\253\363\152\061\374\167\215\155\272\067\211\266\141\203\175\056\033\314\363\121\347\260\201\077\043\223\177\306\224\013\106\315\005\306\326\006\350\050\227\177\370\012\366\353\137\377\132\310\120\260\216\301\346\365\272\327\275\136\254\155\260\013\357\073\341\044\166\353\317\176\046\354\151\300\107\236\174\362\111\141\133\076\354\360\043\205\114\167\370\021\173\204\154\006\237\013\056\374\023\301\237\206\107\307\331\347\076\377\171\261\015\350\255\022\342\270\106\262\041\347\057\127\135\365\121\366\310\043\217\010\233\363\275\367\336\313\136\363\332\327\011\076\147\362\247\140\065\336\060\376\052\353\151\232\150\306\053\246\101\307\131\013\363\267\305\367\114\065\376\232\314\375\226\175\112\112\053\206\171\340\301\376\270\137\174\114\362\130\201\143\042\373\314\056\104\165\254\144\277\250\257\166\176\363\176\323\371\324\071\007\363\122\163\324\325\153\220\375\344",
    (unsigned char *)"\376\040\277\135\275\256\371\344\375\321\356\227\354\127\124\372\303\071\325\271\226\224\355\245\104\277\352\337\301\330\163\211\271\331\342\344\145\034\230\053\337\305\025\237\046\306\342\333\201\127\034\165\364\261\302\326\373\172\056\213\355\330\171\260\240\025\331\007\154\145\163\234\157\234\375\252\163\204\135\354\064\256\257\000\017\002\232\022\162\077\177\257\237\170\362\051\354\245\247\235\316\346\027\267\212\061\301\116\275\143\327\301\134\246\073\113\310\157\323\305\040\066\100\235\017\370\162\216\076\346\070\166\326\053\316\146\273\016\076\064\244\027\052\046\263\352\037\255\306\265\311\215\127\333\315\260\167\017\065\217\317\205\115\150\256\165\073\147\264\165\143\061\015\330\373\117\332\147\114\071\021\116\035\317\043\337\252\152\116\304\134\077\331\127\237\027\245\146\060\126\033\046\251\117\340\307\123\060\205\152\305\154\261\341\245\301\372\007\376\000\066\140\065\026\130\234\047\364\251\200\275\014\344\071\240\047\225\017\112\171",
    (unsigned char *)"\113\154\227\065\227\070\035\215\207\307\300\076\354\271\001\237\033\031\233\142\343\206\232\027\076\370\037\361\177\015\337\054\137\100\353\052\332\354\051\056\274\233\132\162\363\154\166\077\127\354\251\115\137\165\315\311\007\253\301\027\373\241\226\170\104\327\034\114\261\133\116\014\145\017\334\110\233\117\316\106\353\130\137\012\326\030\266\266\144\175\062\012\356\037\205\336\261\167\252\035\313\100\215\153\216\343\000\114\367\322\206\223\143\313\035\220\115\362\373\274\362\077\137\234\061\366\215\216\321\176\233\162\222\324\377\122\247\062\305\141\143\370\042\142\036\110\377\052\373\112\070\276\176\016\075\246\135\366\015\366\125\307\206\213\376\312\071\362\312\171\325\173\242\363\076\323\374\114\327\210\335\373\151\107\136\207\313\006\120\262\324\006\167\325\370\242\254\153\152\034\076\005\077\232\102\003\266\353\120\217\315\033\142\155\342\332\200\323\313\176\167\202\375\002\132\005\032\227\347\341\173\146\176\013\377\226\277\371\166\210",
    (unsigned char *)"\233\133\330\032\364\231\013\376\103\203\176\101\223\377\343\357\231\360\330\231\171\071\336\142\125\053\207\347\253\314\305\347\253\130\372\313\171\312\163\046\316\057\217\237\213\317\137\075\306\102\162\274\250\337\002\062\267\205\160\154\103\223\327\013\307\206\327\255\367\207\061\242\153\341\333\313\332\271\243\153\235\127\346\063\237\234\053\314\017\374\177\205\222\273\206\275\357\372\243\320\143\055\362\220\013\017\215\222\213\360\134\304\004\031\161\147\040\166\306\300\117\060\354\031\235\046\201\117\225\112\045\266\157\337\076\166\102\330\116\334\137\155\211\270\355\271\072\317\222\347\061\113\373\351\032\305\366\045\357\153\076\211\367\073\031\276\171\233\341\317\010\354\112\072\366\003\005\237\325\226\027\142\223\153\251\065\132\134\265\073\164\237\240\053\046\301\126\033\024\263\133\120\370\206\214\235\001\354\134\123\034\263\213\146\124\014\015\300\235\006\173\351\246\266\066\326\305\133\057\157\175\131\073\340\255\237\267\156\336\332",
    (unsigned char *)"\370\263\201\147\104\251\321\115\315\073\266\351\246\256\072\225\056\236\345\212\117\360\215\267\166\341\364\231\346\246\313\336\246\172\232\171\315\357\103\215\067\022\270\063\365\365\302\157\006\076\264\126\250\007\222\265\003\336\066\205\337\353\024\254\360\251\351\262\325\357\342\123\027\302\204\325\342\033\227\342\223\317\357\213\041\100\301\225\242\274\027\124\114\277\121\245\056\300\264\245\066\232\315\276\053\360\000\362\045\143\274\131\026\043\271\262\363\147\174\164\157\227\136\242\347\377\373\326\030\243\340\052\121\352\104\331\160\223\174\370\025\226\123\072\032\362\231\300\077\103\303\032\065\343\233\145\165\316\322\024\327\354\262\033\121\261\372\364\265\052\145\031\037\071\310\025\343\110\255\273\144\213\177\243\332\367\051\070\207\322\156\046\143\064\135\171\255\130\316\146\040\233\145\064\223\016\232\051\173\275\167\135\170\114\046\137\267\117\315\075\252\354\347\343\177\305\154\200\276\270\120\352\070\362\067\206\161\156\262\243",
    (unsigned char *)"\230\170\156\076\364\315\146\165\316\122\204\075\153\311\155\326\165\007\154\335\271\142\012\260\174\107\154\215\325\102\133\130\215\001\037\274\031\323\271\135\361\053\243\052\306\071\362\136\321\351\014\225\315\062\232\111\075\036\200\157\316\277\255\176\206\157\116\227\015\023\166\271\230\314\066\273\031\325\306\054\373\211\030\315\356\176\143\375\031\133\235\005\235\047\146\064\223\276\332\200\056\314\144\314\027\343\322\005\364\234\111\233\355\210\232\013\114\131\327\066\075\207\142\107\160\325\204\212\370\214\300\153\116\142\002\272\260\171\114\074\072\243\231\364\141\002\122\353\345\271\164\036\112\035\045\052\217\240\324\270\240\330\207\115\265\315\250\065\151\135\364\045\145\063\310\227\056\020\336\061\330\073\040\243\231\164\311\146\340\157\250\105\306\261\331\170\175\336\377\224\330\151\233\015\230\132\177\140\271\365\165\115\366\056\211\325\004\064\343\033\327\246\216\237\141\150\244\023\023\320\047\227\335\025\137\351\252\263\127\213",
    (unsigned char *)"\355\231\022\223\122\213\257\324\244\153\270\370\121\262\236\146\177\224\013\140\343\171\130\256\100\124\347\054\243\231\024\350\063\365\042\137\305\346\143\251\025\147\302\245\377\142\370\312\256\330\032\252\334\150\263\361\325\022\167\203\311\211\022\173\126\215\153\166\325\103\064\321\114\046\233\245\207\146\044\336\204\117\275\043\133\275\126\233\114\245\256\143\033\126\222\036\177\031\347\332\322\164\042\233\314\210\345\356\371\346\364\250\161\000\100\063\143\226\134\000\254\106\116\202\317\144\064\223\312\272\315\056\277\043\125\136\167\361\014\127\175\363\102\270\306\300\076\001\266\334\221\321\161\341\073\234\014\161\317\145\036\127\220\347\115\253\307\347\212\053\306\154\005\066\031\125\312\146\262\146\223\053\006\001\245\305\020\257\075\243\231\164\372\147\050\261\147\124\014\064\212\234\025\140\044\054\104\166\333\236\276\001\326\266\151\023\133\267\176\075\153\154\154\144\253\127\257\216\060\162\040\016\273\251\251\211\065\067\267\260",
    (unsigned char *)"\215\355\233\005\356\323\144\210\371\252\322\217\255\266\231\053\307\227\202\037\253\366\005\254\001\123\375\031\037\054\253\102\124\117\263\076\243\231\024\331\000\050\072\062\045\126\331\026\023\240\036\003\153\274\074\033\140\053\367\364\017\260\346\226\026\201\357\265\112\301\222\242\064\221\163\322\326\306\006\070\375\344\205\015\160\301\150\007\244\346\342\120\260\057\325\337\122\066\243\342\150\232\154\001\261\076\223\321\114\072\352\066\127\234\176\106\133\074\013\325\277\250\363\026\340\017\235\135\075\254\201\363\022\137\072\301\132\123\323\132\301\247\202\372\341\013\116\134\061\027\117\164\306\335\250\262\131\030\007\140\242\007\047\376\004\344\002\144\372\114\172\142\064\247\113\044\354\010\223\356\214\155\303\326\247\324\127\172\372\372\305\372\170\256\150\305\104\073\375\203\303\125\071\317\030\276\017\206\133\345\216\027\232\017\355\146\020\157\066\215\306\225\271\143\017\346\262\172\232\051\242\031\151\153\366\301\376\247\140\011",
    (unsigned char *)"\125\321\013\327\131\306\046\363\254\255\155\343\176\243\025\275\265\156\150\013\362\354\371\271\165\374\277\132\355\315\072\246\230\244\231\161\207\335\314\116\203\363\131\315\246\124\351\063\225\145\371\031\215\165\046\015\061\275\135\075\175\065\351\053\313\155\140\107\030\032\031\025\164\103\265\367\141\166\266\152\234\252\331\250\056\200\240\115\013\257\262\347\346\145\165\316\322\104\063\120\133\317\044\277\324\212\111\147\262\333\266\267\167\074\357\264\242\066\260\275\001\266\163\300\157\334\166\151\127\214\132\214\245\132\035\007\200\361\056\054\277\042\212\321\314\352\234\245\312\077\243\346\267\333\142\136\250\330\023\252\236\260\351\000\323\213\154\040\207\302\372\056\053\164\143\263\147\120\142\234\365\132\347\323\104\137\250\251\356\150\026\007\220\056\033\000\226\163\213\371\312\051\371\215\140\267\352\355\033\130\021\364\242\332\006\040\256\113\324\165\053\271\353\001\072\165\370\004\046\140\101\214\153\363\007\231\162\370\042\014",
    (unsigned char *)"\215\351\142\106\063\051\312\155\266\345\073\332\352\000\140\366\000\340\133\340\277\077\020\372\013\305\056\040\361\353\135\270\206\130\076\162\042\166\006\152\030\366\342\070\232\056\274\143\211\051\236\321\114\312\374\063\232\076\343\302\232\261\341\367\311\343\327\255\133\277\342\350\105\266\216\256\356\204\214\346\272\166\211\267\154\262\041\113\274\146\031\007\100\251\303\141\372\237\311\146\351\241\031\075\117\323\026\173\357\362\147\302\176\130\213\135\075\275\053\226\136\144\203\270\001\225\156\050\230\376\325\365\037\146\253\352\234\271\162\264\261\130\235\214\146\322\247\317\330\152\023\273\142\317\144\377\240\056\144\231\255\131\263\146\305\323\014\314\121\227\113\061\137\244\055\106\133\346\002\350\061\232\056\214\034\175\254\214\146\322\111\063\230\037\233\232\063\003\064\323\331\323\263\342\351\105\266\276\201\301\210\327\370\340\323\044\060\064\306\315\065\150\251\330\003\362\234\131\034\100\372\144\063\127\236\246\111\147\321\363",
    (unsigned char *)"\260\340\135\331\370\034\306\217\355\357\266\166\375\172\341\117\304\152\047\121\160\170\162\222\317\050\361\146\230\257\327\346\017\316\060\001\323\205\241\121\262\330\000\250\130\113\060\006\304\170\245\205\136\144\033\312\215\011\136\343\302\122\102\353\266\031\360\315\114\071\063\066\136\055\142\126\063\076\223\132\274\146\273\115\024\327\161\341\271\203\035\067\155\064\263\251\175\263\360\045\231\154\302\116\114\367\162\214\011\150\312\155\366\301\321\310\150\046\145\330\263\132\375\026\127\216\241\116\063\301\173\262\310\032\032\032\123\107\063\153\326\064\011\273\205\136\167\334\226\053\244\276\053\244\335\014\154\000\224\134\152\114\057\312\144\263\224\361\031\103\315\043\133\015\025\135\116\001\232\001\333\155\332\350\105\066\250\227\116\251\373\244\347\274\024\044\046\140\257\271\056\000\146\233\067\331\347\062\076\223\056\274\146\123\154\207\017\366\014\254\267\366\315\035\251\245\231\316\356\336\204\116\347\322\155\242\373\025\312\146",
    (unsigned char *)"\001\237\051\132\355\312\366\374\203\371\314\326\234\002\232\251\113\304\316\314\241\062\210\323\236\026\076\373\346\226\326\324\322\014\344\364\224\025\076\343\223\003\255\327\005\260\325\166\063\331\263\203\377\040\333\046\151\146\063\320\162\370\274\262\166\140\033\324\072\223\165\316\202\330\231\262\361\035\353\312\307\215\372\101\134\042\227\343\232\326\256\113\055\315\254\135\267\316\030\223\112\321\345\163\012\216\246\032\143\343\203\001\247\342\150\302\273\154\075\320\161\326\126\104\333\020\076\217\206\050\076\276\236\115\102\315\046\102\236\042\126\313\271\030\346\366\247\121\377\117\304\004\024\313\116\071\012\305\320\260\304\150\332\352\114\105\367\024\342\047\070\277\157\250\017\060\064\032\303\006\317\251\076\154\015\206\377\246\175\015\132\253\067\364\153\160\214\207\235\223\062\276\251\037\366\237\072\167\327\161\365\216\271\333\256\203\162\315\165\241\056\023\325\323\104\152\151\330\360\143\364\337\220\263\274\172\005\306\060\223",
    (unsigned char *)"\261\153\004\236\150\001\135\337\266\170\345\121\065\106\223\120\013\324\304\313\344\171\163\243\343\154\044\067\046\360\334\240\015\347\306\303\337\023\302\116\061\314\367\015\047\176\307\375\144\137\261\235\377\036\012\277\325\161\342\361\342\276\321\330\243\162\274\211\304\270\152\377\304\130\243\352\071\046\304\361\352\270\303\141\237\370\330\211\304\261\121\337\304\065\214\105\143\106\307\217\115\104\375\304\034\141\214\061\165\376\341\076\345\230\350\376\344\342\153\032\121\306\113\136\347\104\325\071\106\344\171\307\046\242\261\107\302\147\003\377\051\274\305\272\217\037\013\357\130\131\163\070\215\115\342\042\230\162\223\135\165\071\107\025\175\246\144\261\331\223\142\161\102\214\021\310\047\005\077\253\220\365\004\216\350\142\204\047\252\066\261\157\156\061\074\156\041\302\111\054\151\375\112\141\223\270\014\362\034\352\230\022\337\044\300\320\132\210\306\051\051\163\052\051\347\221\163\012\376\057\050\030\215\201\174\232\034\163\076\232",
    (unsigned char *)"\107\131\033\107\372\052\124\254\273\304\330\312\074\325\071\046\216\231\111\136\203\176\156\365\176\304\363\137\210\216\253\272\007\352\175\123\357\253\162\136\275\136\214\257\074\016\262\170\143\343\232\324\322\114\220\213\126\041\345\165\353\176\027\121\353\334\220\333\114\305\125\243\326\015\265\305\170\272\236\227\315\216\356\203\273\215\345\070\250\175\060\037\005\065\216\317\226\253\344\252\235\347\253\103\122\163\136\250\265\204\174\153\152\200\036\235\126\232\131\337\334\142\307\206\265\324\103\223\076\315\111\305\326\114\255\211\103\301\045\131\156\115\067\052\355\143\230\157\265\326\110\241\346\103\270\152\327\333\326\051\304\012\372\340\241\270\350\335\267\246\204\355\271\352\062\213\176\136\370\336\360\074\142\060\075\327\015\346\256\277\213\155\074\103\355\023\341\316\030\364\031\023\136\206\365\035\036\362\354\051\376\256\206\367\165\364\315\165\316\340\273\022\341\125\117\205\333\325\276\260\077\257\035\233\067\214\245\266\250\017",
    (unsigned char *)"\214\131\120\366\207\333\344\171\047\325\276\352\071\225\061\105\377\160\156\306\071\050\143\004\347\252\304\307\150\343\253\143\353\307\233\266\127\337\013\330\037\214\073\031\335\277\262\365\036\310\343\245\117\137\036\057\346\052\217\107\362\145\250\071\377\162\075\300\172\353\352\356\111\055\315\164\367\366\031\355\304\130\375\014\123\134\363\030\324\154\162\350\375\046\036\242\356\237\137\074\210\155\337\265\233\155\337\011\355\140\266\215\177\353\155\173\330\364\377\172\333\266\143\127\360\133\216\267\353\340\250\177\164\334\056\355\034\374\230\155\073\202\163\303\076\071\217\240\101\237\135\321\274\344\367\101\073\167\051\347\075\270\152\336\372\271\223\143\036\234\070\146\107\164\316\340\134\321\171\166\354\126\316\053\347\252\234\157\107\330\227\037\277\303\070\357\335\206\363\047\357\053\034\027\214\251\365\123\306\334\311\277\027\266\034\144\255\017\206\325\200\250\132\027\174\275\201\075\041\215\364\002\070\116\260\356\115\370\111\224",
    (unsigned char *)"\032\317\062\106\163\062\304\126\164\325\045\060\361\261\242\260\243\024\130\056\227\143\173\367\356\141\107\355\335\313\216\346\355\030\376\373\130\376\175\254\370\226\115\156\227\373\314\355\230\360\070\321\167\217\336\167\217\322\317\076\116\325\270\173\114\343\350\363\331\343\071\216\351\132\315\343\220\347\273\147\057\141\076\173\354\333\264\373\366\142\276\157\214\077\043\075\346\203\232\303\256\313\146\340\033\155\134\323\224\132\177\046\125\276\325\375\371\143\023\123\125\371\063\030\176\017\106\213\062\027\000\354\365\100\303\215\274\065\363\326\306\333\306\254\255\210\006\317\243\216\067\170\106\022\257\031\303\372\246\324\141\221\317\175\123\012\143\316\066\167\164\032\361\335\134\371\311\072\237\031\237\054\240\367\320\225\207\243\326\006\024\164\314\333\306\060\176\046\153\007\266\101\354\114\073\157\315\212\137\102\307\070\267\311\151\066\173\043\254\273\221\224\311\147\102\056\033\233\254\212\035\322\353\263\143\374\025\216\033\065",
    (unsigned char *)"\344\066\333\370\266\031\163\000\260\147\263\030\315\124\341\001\170\344\045\332\153\320\314\210\132\113\151\241\231\346\326\126\057\233\107\225\036\122\236\253\212\235\261\305\252\141\165\164\263\134\200\164\325\323\224\064\343\043\113\230\326\104\140\077\133\140\175\003\103\251\241\031\201\341\074\263\340\254\147\150\363\177\215\152\161\315\276\064\230\300\067\313\162\316\322\101\063\042\336\154\336\333\257\151\312\247\222\365\305\300\257\276\342\171\114\163\213\323\107\214\351\364\052\277\030\125\061\064\014\371\004\266\070\075\365\074\131\236\146\072\361\000\114\153\203\022\363\220\250\175\064\273\040\142\343\352\126\160\314\046\350\061\043\212\036\203\325\047\323\337\007\046\372\212\060\001\363\205\110\306\245\140\370\350\372\115\076\253\101\233\256\074\315\212\335\107\215\255\043\214\206\040\306\256\267\177\040\005\266\062\163\235\014\335\076\154\213\303\260\341\233\141\170\361\046\036\036\324\240\315\150\046\055\265\064\050\230\231\024\033",
    (unsigned char *)"\264\332\052\163\213\053\062\337\031\154\024\140\253\050\020\360\145\260\230\200\152\274\346\240\066\240\214\045\160\371\265\114\270\013\131\156\163\372\150\006\343\047\324\332\140\130\376\056\304\077\256\230\074\031\176\275\220\353\043\170\214\007\216\073\116\127\062\336\054\216\153\246\342\053\352\362\057\320\116\106\063\351\301\321\264\361\022\127\376\210\315\377\000\071\010\020\147\260\022\362\004\232\326\256\025\353\273\350\231\043\143\213\353\067\305\001\270\336\065\046\136\055\154\000\231\255\071\165\066\000\223\314\356\252\143\156\222\345\164\072\002\272\201\174\267\206\375\130\247\331\131\163\246\165\103\214\027\132\232\365\216\001\267\351\361\322\326\054\152\066\125\346\121\333\243\215\206\240\301\273\045\243\231\264\324\237\051\033\355\075\324\132\137\246\246\346\035\201\217\033\350\146\154\042\317\165\211\346\347\277\326\114\147\267\360\075\332\364\014\133\075\115\227\054\012\274\253\063\244\231\002\342\237\161\375\017\260\232\062\076",
    (unsigned char *)"\223\046\232\301\144\020\112\174\241\051\216\327\364\116\225\230\310\260\206\127\257\256\173\036\362\225\353\005\176\264\314\351\365\311\021\364\251\125\055\361\315\040\027\300\047\217\271\272\236\146\106\063\151\222\315\060\337\203\017\056\000\106\063\372\032\003\332\001\133\123\363\176\264\015\300\330\040\017\226\103\172\261\345\377\120\344\046\133\015\164\151\003\030\067\340\233\141\130\232\106\175\046\243\231\324\351\063\230\156\342\222\065\174\162\201\165\377\340\320\310\050\153\341\272\006\370\030\227\357\247\254\023\143\015\215\214\211\334\057\220\167\134\376\026\212\274\351\262\257\203\076\323\031\332\000\164\133\263\313\006\220\141\317\246\324\156\126\050\105\261\063\076\170\007\230\315\000\133\147\046\332\012\370\100\340\113\357\350\354\022\276\023\037\372\201\130\203\365\134\107\352\354\356\021\143\210\130\343\020\077\204\302\053\155\030\263\124\033\201\240\231\336\144\354\214\013\047\303\244\133\111\114\300\214\146\322\131\263\011\213",
    (unsigned char *)"\063\264\345\037\372\342\103\350\161\051\245\260\336\030\350\007\020\103\260\261\275\135\360\015\260\033\000\146\337\232\246\046\361\033\266\265\157\356\024\261\240\340\153\051\206\264\247\313\227\024\376\101\235\273\115\266\213\153\151\024\274\342\214\364\270\266\054\106\063\135\262\031\145\315\110\237\265\255\306\071\225\037\331\164\357\004\076\125\045\260\015\203\254\057\353\135\110\032\203\070\003\311\037\115\064\116\225\221\134\366\061\067\126\123\020\243\071\156\360\317\330\336\101\372\371\263\070\200\164\352\063\056\234\131\227\277\117\307\266\242\304\017\220\327\067\261\246\253\112\003\056\237\274\017\036\231\315\006\320\335\327\237\310\237\241\344\042\251\333\262\072\147\351\312\005\230\324\152\003\142\261\274\330\172\260\351\373\256\265\347\313\247\050\176\043\152\375\030\137\254\072\254\126\246\156\067\243\346\270\352\062\132\226\013\220\262\072\147\016\177\276\057\306\240\313\276\352\172\377\123\174\202\172\156\013\026\307\103\035\227",
    (unsigned char *)"\102\233\246\377\121\075\315\174\001\255\257\100\341\213\002\017\040\343\063\251\311\005\160\305\111\371\140\016\272\160\112\153\355\203\141\277\370\322\263\217\135\220\202\177\052\142\147\302\232\115\072\137\246\143\102\146\266\346\264\305\065\143\162\007\125\366\247\306\011\270\362\011\174\160\110\135\062\232\055\336\224\142\313\302\154\325\246\070\200\040\027\240\130\345\043\245\276\047\042\175\046\223\315\122\147\153\066\325\340\362\301\073\303\144\043\054\366\331\045\247\331\162\171\134\276\041\252\134\211\321\061\005\023\301\204\007\120\013\337\313\362\147\322\031\073\343\302\024\242\140\031\141\372\205\217\276\203\331\273\134\174\220\302\103\050\271\331\056\332\322\337\043\121\235\063\113\315\046\227\217\050\263\065\247\073\027\300\365\176\265\345\373\272\326\013\346\327\241\340\360\331\354\307\076\365\370\154\353\327\224\147\151\362\341\046\153\235\117\105\065\233\144\274\216\055\076\015\263\143\144\064\223\036\273\231\314\071\243\326\133",
    (unsigned char *)"\300\374\162\266\130\032\152\115\207\132\145\033\212\017\211\202\257\133\113\234\152\224\077\063\071\155\275\006\314\306\054\133\146\003\110\027\046\040\305\306\343\153\013\246\332\211\023\074\302\300\357\160\233\201\133\237\112\322\011\216\077\116\301\065\307\170\344\250\226\247\151\253\267\242\237\133\235\147\106\063\051\223\315\312\176\261\131\230\216\117\261\017\017\345\306\231\264\061\111\074\174\261\055\137\024\163\031\016\177\253\176\177\300\334\037\034\031\213\354\025\360\075\024\326\161\304\144\072\365\374\200\057\013\374\200\032\213\340\143\057\220\130\115\266\072\147\230\115\045\231\013\220\311\146\151\313\323\064\325\103\361\361\315\333\142\070\345\232\230\137\330\312\376\352\257\077\301\116\072\371\124\006\071\132\120\117\365\244\223\117\141\327\177\341\213\354\304\223\116\141\107\034\271\227\175\351\113\137\142\307\034\267\304\106\306\246\304\261\143\223\005\166\360\041\207\261\353\257\377\002\073\343\214\263\130\377\120\216\355\076",
    (unsigned char *)"\370\120\166\355\165\327\261\313\056\277\134\320\317\264\205\147\300\171\336\173\311\373\330\371\027\134\050\170\202\217\257\123\137\337\162\114\065\106\050\247\324\240\265\345\016\271\154\017\031\315\244\311\247\131\042\325\052\242\326\065\304\336\335\300\073\166\363\265\377\233\247\236\142\157\177\307\073\131\357\340\210\240\327\177\376\227\177\141\360\371\343\167\277\207\315\314\056\260\247\237\176\232\375\335\337\177\216\365\366\017\011\336\320\323\067\310\076\174\305\225\242\317\361\373\116\144\355\135\075\142\375\313\317\121\107\037\303\151\041\217\330\005\146\005\366\337\217\176\164\063\273\361\333\337\026\274\312\226\117\352\252\137\155\072\046\306\003\230\046\373\144\115\074\170\062\237\371\147\322\346\323\304\144\172\037\176\203\325\202\204\355\360\036\336\265\373\020\366\313\137\376\222\275\355\334\267\263\015\233\072\330\045\357\373\323\150\355\277\373\075\347\263\266\366\016\366\351\317\174\226\375\366\267\277\145\067\335\364\175\366",
    (unsigned char *)"\203\037\374\200\175\357\173\067\261\137\377\372\327\354\037\377\361\237\204\074\006\274\342\273\337\375\036\273\377\376\373\331\023\117\074\316\056\275\364\103\154\200\363\036\154\216\300\007\276\375\355\357\204\307\217\055\073\076\300\224\013\320\251\325\237\261\325\071\065\352\147\002\107\063\313\005\110\133\354\214\256\223\143\062\226\051\227\235\202\353\015\064\263\063\244\231\327\275\376\015\154\353\266\355\354\261\307\037\147\137\374\322\077\260\007\036\170\200\135\170\341\305\154\143\107\027\073\343\314\263\004\015\175\347\073\337\141\357\174\327\037\261\057\337\160\203\370\377\246\067\377\001\353\354\351\147\107\275\370\070\366\273\337\375\216\375\321\037\277\233\175\362\123\237\142\077\371\311\117\305\065\310\234\006\135\216\022\064\363\235\200\146\100\127\242\344\071\333\362\344\114\365\147\004\366\154\310\147\134\074\332\264\035\154\334\123\131\274\131\252\150\306\344\227\320\375\227\262\026\270\253\206\023\266\046\307\102\232\171\350",
    (unsigned char *)"\241\207\330\033\337\364\373\354\272\353\256\147\267\335\166\033\333\276\143\067\273\353\256\273\330\105\027\137\042\344\065\300\352\203\355\327\134\163\055\133\135\277\206\135\165\325\377\340\064\365\040\133\330\172\020\227\323\206\330\373\336\367\147\102\176\333\276\143\027\073\363\345\257\020\364\364\222\123\137\046\164\043\335\336\000\162\131\167\337\200\220\313\004\315\360\076\265\304\132\143\064\244\326\240\005\133\063\166\037\235\066\104\240\231\114\237\131\221\255\213\230\077\103\305\226\360\251\125\057\370\314\256\103\330\275\367\336\313\376\355\337\376\235\313\137\117\263\127\236\175\216\260\165\337\317\371\314\105\027\277\227\015\162\076\060\060\234\343\272\375\025\354\221\107\036\141\107\277\370\130\166\317\075\367\260\253\257\376\044\353\347\364\004\143\374\313\277\374\157\366\303\037\376\210\015\215\214\263\331\371\055\202\236\300\256\320\037\312\147\222\316\047\363\005\041\267\301\071\276\373\275\357\261\257\176\365\037\235\262\231",
    (unsigned char *)"\315\016\140\212\043\122\163\001\364\032\213\076\362\235\152\003\250\013\237\217\254\261\225\325\032\073\360\015\152\316\255\225\170\106\132\236\046\045\137\336\167\075\250\064\003\365\157\101\017\201\317\165\327\135\307\372\006\106\330\342\101\333\205\154\166\061\247\231\201\341\121\226\343\372\374\121\107\037\313\165\225\047\330\217\177\362\023\141\063\000\233\132\117\377\020\073\366\370\045\366\354\263\317\262\077\271\370\142\321\167\160\170\214\175\356\363\327\010\272\232\231\133\140\223\323\345\160\155\007\366\145\260\025\200\054\370\314\063\317\260\057\176\361\113\202\146\260\170\065\112\376\233\251\157\156\154\042\262\001\120\363\063\115\065\010\004\216\146\175\275\170\227\255\003\034\303\260\036\135\032\133\113\212\347\156\152\100\057\165\012\006\230\253\066\240\117\176\230\015\007\111\362\231\047\271\076\017\074\344\220\303\016\027\174\145\353\266\235\354\321\107\037\345\062\327\237\012\136\041\261\366\277\366\265\257\013\332\372\376\017",
    (unsigned char *)"\176\040\216\355\343\373\256\374\310\177\023\333\300\046\015\066\150\220\265\316\171\365\153\305\266\327\277\341\215\302\056\246\372\073\141\274\223\117\071\225\075\366\330\143\354\053\234\317\250\372\214\015\117\307\047\166\024\150\063\246\231\271\232\154\014\222\146\326\256\151\142\153\370\063\131\313\337\145\115\274\255\201\126\037\176\313\337\352\177\255\065\041\333\155\307\120\307\266\216\123\257\235\237\162\076\333\174\075\257\241\311\065\056\162\155\115\036\163\004\376\322\000\143\360\147\044\375\204\076\271\270\024\072\322\373\003\077\053\163\271\375\075\347\137\300\136\361\312\263\205\256\001\374\240\064\063\307\336\361\216\167\011\036\042\260\050\205\157\075\317\216\133\332\307\076\310\145\253\223\116\176\211\360\261\200\276\360\232\327\375\036\073\367\355\177\030\324\146\013\165\054\340\057\027\134\170\021\073\345\045\201\317\107\247\175\340\107\147\275\374\225\202\266\344\370\256\334\003\014\277\331\164\135\221\015\100\304\316\314\223",
    (unsigned char *)"\162\131\261\130\007\270\107\201\075\243\044\176\303\165\212\306\177\117\116\053\333\102\233\207\350\307\377\117\206\015\154\367\372\066\365\330\140\077\374\057\046\366\047\316\125\054\213\373\012\115\075\166\322\064\027\300\151\010\217\237\024\163\226\347\055\052\347\052\125\235\137\136\037\034\073\221\057\045\266\005\175\345\130\332\165\107\143\225\202\371\051\163\204\163\312\153\221\367\141\262\152\276\361\265\212\373\245\315\117\314\273\120\326\356\131\105\271\357\245\104\254\231\313\117\101\305\231\300\354\001\122\317\000\075\044\067\076\225\130\223\300\057\306\265\032\256\260\376\007\206\106\243\355\122\167\000\173\163\101\131\153\060\046\360\027\065\177\105\237\037\320\247\074\047\265\056\065\325\336\236\250\163\126\231\257\011\257\063\341\073\015\353\342\104\161\020\063\061\116\010\324\061\214\354\202\212\275\041\272\046\135\307\024\333\347\215\076\353\304\377\160\074\325\206\021\214\077\037\136\223\176\174\210\025\044\347\226\230\313\174",
    (unsigned char *)"\325\170\305\160\036\152\034\154\342\031\314\044\317\041\145\005\365\134\361\234\347\043\133\143\362\235\247\333\176\147\253\256\017\216\055\031\356\233\172\336\122\164\335\361\371\175\342\061\175\150\306\124\107\003\363\221\332\162\010\050\162\022\045\147\232\202\041\153\262\237\333\170\201\276\326\203\272\315\311\170\063\133\154\264\051\146\023\343\111\030\115\141\262\245\355\076\271\342\147\155\376\004\327\075\325\337\221\246\174\020\314\357\115\215\231\260\311\075\230\316\150\303\232\247\342\075\232\160\141\244\375\330\047\106\336\344\243\241\142\272\270\326\276\311\067\104\305\117\366\261\131\371\142\115\351\367\315\350\323\064\304\233\331\362\367\324\365\024\174\323\326\247\112\353\024\172\053\124\305\246\316\241\171\266\311\061\374\061\123\023\317\256\254\135\153\171\306\211\373\113\315\143\244\344\321\272\372\123\354\243\276\276\010\237\274\051\337\334\143\333\332\242\362\012\137\074\162\112\256\217\057\276\071\374\267\141\317\122\357\205",
    (unsigned char *)"\134\313\045\255\206\255\304\223\313\207\266\300\174\061\336\256\067\220\355\363\141\137\350\067\045\367\205\377\203\246\154\223\333\303\157\171\236\174\142\374\370\277\276\077\236\127\162\334\170\356\341\357\350\275\023\267\340\330\112\362\134\352\261\341\367\224\161\334\112\174\055\312\065\250\307\302\161\342\274\041\137\010\356\135\045\061\037\330\066\235\270\236\131\145\314\112\342\332\242\276\300\143\152\360\301\325\362\316\251\005\303\222\102\373\372\173\305\244\077\371\324\231\361\305\241\011\144\263\111\243\177\306\366\216\320\317\045\342\000\270\156\271\260\270\310\226\366\355\143\113\113\113\274\355\023\155\237\362\177\337\122\360\173\137\264\177\051\152\373\144\377\360\133\335\247\216\247\267\175\132\123\317\263\224\030\053\354\263\057\271\115\037\053\061\167\355\034\311\343\226\252\346\273\057\161\275\311\353\112\216\243\356\133\252\272\016\374\272\253\217\021\333\366\051\307\035\137\175\334\011\141\073\221\367\333\302\237\321\224\045",
    (unsigned char *)"\347\314\247\351\362\213\051\116\232\202\213\146\213\277\301\370\261\217\134\106\315\303\164\311\217\221\135\102\350\063\311\272\000\230\077\306\066\047\340\123\315\315\315\154\144\144\204\215\345\162\154\222\177\117\363\126\310\215\260\042\157\205\221\260\345\342\155\262\025\302\375\121\077\165\377\110\334\047\061\316\110\260\257\200\265\234\326\114\333\325\261\364\071\040\143\232\372\251\327\240\137\237\165\156\372\261\372\170\271\344\157\323\061\372\157\171\317\324\143\340\377\064\177\046\243\374\273\205\077\043\223\255\331\047\227\206\272\346\154\072\237\053\267\321\225\107\355\222\035\061\374\202\345\304\153\306\370\146\201\015\140\074\137\060\352\171\256\334\043\365\235\123\127\127\037\140\267\363\266\076\364\153\146\355\300\266\015\341\367\032\131\177\202\077\243\174\030\007\340\312\057\244\344\146\121\155\067\224\163\270\154\032\276\366\142\111\067\076\370\353\316\353\220\166\063\245\006\255\051\177\331\304\167\325\006\262\131\276\120\211",
    (unsigned char *)"\342\232\233\303\230\215\316\060\336\051\153\007\266\141\361\146\324\372\114\076\357\173\212\234\202\371\015\236\113\254\132\014\153\223\202\371\144\155\211\272\000\323\326\367\203\111\156\213\145\313\371\254\056\100\012\163\001\154\165\062\154\161\362\124\077\210\017\136\022\225\146\261\276\024\214\063\354\070\337\030\041\235\317\330\342\007\154\130\322\223\031\136\163\052\261\147\051\170\174\046\037\330\162\160\304\175\060\063\135\366\063\023\056\207\015\323\320\146\143\240\342\140\046\353\066\323\175\252\211\373\226\325\006\114\135\135\000\133\175\062\227\354\342\133\037\315\205\223\217\345\033\123\361\051\260\265\216\351\030\313\265\003\214\206\170\000\023\141\054\133\321\243\346\207\052\343\145\064\223\316\334\146\223\177\032\323\143\251\061\055\313\265\121\331\362\245\251\272\015\305\156\105\305\217\256\316\005\230\024\365\147\100\066\243\324\370\300\336\013\131\316\131\172\360\315\362\012\366\254\311\317\115\361\057\120\361\234\051\062\321",
    (unsigned char *)"\162\352\220\121\352\201\140\371\306\224\072\061\046\271\055\256\077\103\303\236\305\342\137\063\232\111\027\315\270\174\211\130\314\236\055\176\010\213\047\362\261\113\121\153\174\120\142\114\135\061\176\024\273\270\211\107\311\330\031\123\315\046\112\314\221\270\127\141\034\100\175\103\175\106\063\151\220\315\014\065\150\051\230\170\266\270\121\033\317\302\154\010\324\370\002\152\075\362\132\154\174\066\314\117\214\357\230\152\320\142\364\213\305\122\147\174\046\235\030\347\076\165\367\226\123\063\302\125\003\323\024\003\240\323\052\065\146\324\227\347\270\342\346\253\374\053\345\231\050\117\123\306\150\326\252\317\145\064\223\116\232\061\275\377\060\273\055\346\243\243\322\004\246\137\373\332\336\134\065\003\135\064\101\211\043\305\344\313\102\045\131\033\020\313\147\321\361\231\214\066\200\014\257\071\105\365\064\113\101\115\361\032\152\346\371\346\265\230\362\204\260\165\045\343\206\145\053\317\055\106\261\366\162\333\162\152\332\270\174\217",
    (unsigned char *)"\130\256\131\142\234\312\254\202\073\123\260\346\264\330\142\044\062\076\223\076\232\321\363\067\115\276\075\133\256\235\013\013\235\222\267\010\175\312\263\101\356\356\064\327\141\100\326\031\032\031\145\075\175\003\254\253\247\217\365\015\014\262\301\341\234\220\205\000\207\011\344\242\352\374\331\071\257\070\003\237\072\152\326\334\146\103\235\063\037\373\104\061\363\317\244\136\237\261\311\364\265\330\013\154\265\302\044\317\000\331\244\157\140\210\155\150\333\310\326\256\135\307\352\352\352\104\034\151\165\133\055\174\261\153\327\255\147\233\066\167\010\272\002\314\004\235\367\140\274\301\107\027\243\360\335\134\210\007\340\302\235\261\332\041\062\076\223\072\232\161\141\073\270\364\012\075\267\013\343\123\052\335\005\074\145\226\015\347\306\130\333\306\115\254\201\317\305\114\043\356\266\146\315\032\326\316\351\007\354\276\152\256\144\255\365\002\135\071\303\125\265\001\045\315\054\303\227\225\325\237\111\267\015\000\363\351\121\351\311\226",
    (unsigned char *)"\353\055\317\061\070\222\143\315\055\255\065\323\211\251\255\136\275\132\360\051\300\351\123\371\016\045\366\313\024\307\117\261\305\305\376\231\151\262\375\042\213\003\170\141\360\031\212\116\140\363\227\223\152\172\317\056\210\367\351\006\316\127\236\113\132\061\321\016\360\035\220\367\340\234\062\237\333\247\056\241\053\366\046\226\315\002\033\300\330\344\164\125\175\032\327\275\124\357\171\076\303\070\117\155\015\332\345\340\120\330\326\006\374\006\175\005\160\010\367\047\275\044\145\266\046\141\067\060\361\033\027\066\063\051\136\241\242\306\316\024\110\366\007\014\363\111\305\236\315\150\046\135\265\316\051\164\142\263\003\351\333\112\041\346\075\310\114\317\027\255\350\074\247\263\253\047\201\161\211\141\373\370\344\230\046\162\001\004\126\123\321\132\013\327\356\153\015\355\146\031\315\244\044\177\246\222\300\177\264\305\060\122\170\212\152\273\022\272\055\137\013\353\327\067\037\020\172\121\133\127\167\257\300\241\244\142\050\271\360\336",
    (unsigned char *)"\343\134\200\240\226\006\320\214\356\063\262\371\140\063\175\046\335\365\064\115\370\151\046\254\044\012\146\235\056\203\254\157\156\071\340\364\262\052\274\336\201\301\021\241\337\270\142\076\135\071\253\052\266\153\116\311\237\301\144\100\033\136\144\026\327\234\322\070\000\113\315\046\233\277\305\026\303\014\266\144\320\303\127\002\275\254\212\352\040\064\010\375\243\154\240\033\152\136\116\225\015\100\324\322\010\163\316\034\365\004\154\264\232\321\114\232\362\064\213\144\133\031\025\327\022\326\344\300\340\360\212\242\027\331\232\326\256\255\312\347\246\306\160\233\164\072\101\063\335\325\361\146\324\274\065\211\013\056\160\147\062\232\111\201\154\126\037\332\232\347\152\222\353\061\374\042\240\303\306\306\206\025\111\063\320\132\067\264\131\361\012\175\362\354\324\232\115\130\036\022\005\167\052\213\321\114\131\075\115\341\303\300\061\373\251\166\045\370\136\211\062\231\251\165\166\367\070\343\074\335\065\227\203\334\346\240\056\300\164\025",
    (unsigned char *)"\336\262\313\166\246\312\266\131\274\131\372\152\320\122\144\023\233\155\131\332\314\340\175\013\062\337\112\247\031\230\043\310\123\324\130\001\354\075\041\261\147\041\156\324\204\177\115\361\363\004\366\370\014\253\051\115\030\032\322\006\100\315\145\301\060\147\300\226\273\051\005\074\046\342\065\135\075\221\375\331\206\351\146\213\165\320\153\151\140\065\127\154\171\110\031\046\340\013\063\256\031\313\067\123\267\203\217\102\142\016\247\241\065\256\131\143\304\021\065\341\244\141\271\147\061\276\331\264\025\067\301\206\025\052\260\147\213\231\015\040\075\266\346\162\315\170\137\311\370\217\005\326\335\323\227\032\172\221\015\342\171\144\336\216\211\156\260\274\122\331\077\247\344\151\142\270\007\246\074\073\235\146\246\062\232\111\015\237\221\230\200\056\136\203\345\343\253\277\327\067\067\247\216\146\244\015\315\244\257\273\152\151\251\261\063\322\146\157\302\057\160\331\030\262\134\200\027\036\356\014\305\236\004\265\226\361\074\261\225\333",
    (unsigned char *)"\032\304\173\243\130\025\077\104\311\123\213\353\151\342\171\232\130\035\073\035\217\047\263\065\247\107\066\233\104\150\006\363\347\231\266\203\154\003\271\307\151\243\027\331\006\224\330\147\112\215\123\365\136\214\041\064\343\023\357\232\305\001\244\027\173\326\266\126\154\330\134\260\336\066\156\152\117\055\315\164\164\166\241\130\006\126\372\121\143\064\105\056\200\033\207\323\214\073\063\233\321\114\332\354\146\006\377\014\065\116\106\344\021\224\147\122\251\313\304\072\315\006\162\075\262\044\015\304\030\347\001\046\340\274\065\317\025\267\247\305\266\346\072\205\146\240\136\120\147\326\016\150\203\347\320\276\052\250\073\147\262\233\121\152\164\233\336\275\020\033\275\246\251\051\265\064\263\166\355\132\053\006\215\115\267\121\343\232\135\176\113\214\036\203\170\243\122\104\063\120\347\154\123\326\126\104\333\270\052\131\033\120\312\146\124\014\126\223\216\014\153\141\062\137\024\317\073\255\064\323\320\330\050\362\174\164\334\032\112\376",
    (unsigned char *)"\131\016\301\152\362\301\320\054\111\232\131\275\072\360\033\205\317\250\361\377\363\326\260\102\346\121\247\345\060\202\037\322\206\171\154\253\045\056\151\146\154\062\317\126\327\255\116\055\315\004\161\064\346\234\061\027\126\150\134\347\014\077\236\124\327\267\130\141\075\075\175\254\253\253\233\165\167\365\360\357\036\221\047\327\315\133\247\370\255\266\136\245\151\373\272\172\222\333\253\216\325\306\351\102\266\233\306\356\356\261\157\357\212\317\331\335\323\213\366\351\216\306\120\316\023\366\357\016\373\164\152\327\321\311\357\213\165\056\341\271\243\261\273\224\226\230\063\062\377\056\323\276\340\177\247\362\273\273\267\117\304\233\001\306\104\255\165\045\043\076\323\220\162\076\063\135\102\143\317\154\272\115\116\253\013\100\251\347\201\371\174\300\057\014\162\032\330\041\005\156\050\377\216\232\300\321\011\176\303\076\271\277\074\033\374\256\310\376\141\277\262\162\154\105\031\253\254\264\150\274\160\034\371\073\032\167\166\061\061\217",
    (unsigned char *)"\140\133\162\154\165\076\125\343\300\134\324\155\332\234\043\234\124\071\207\150\234\305\304\074\345\130\225\271\055\301\130\341\075\112\314\053\074\256\062\227\074\066\232\337\154\362\176\226\225\373\232\230\277\274\267\063\013\361\067\214\073\277\045\070\077\337\026\254\207\031\022\256\037\026\253\013\072\021\140\214\245\131\237\201\330\025\133\274\013\306\063\060\254\046\014\147\300\065\036\146\367\367\301\027\260\275\347\124\114\034\033\006\252\217\237\051\261\315\310\107\161\273\041\025\247\127\217\261\160\345\174\351\171\366\256\230\131\127\175\072\314\107\107\315\131\064\331\227\326\255\137\237\132\232\001\234\265\242\266\156\164\234\103\354\031\331\364\031\027\076\207\253\276\242\355\374\030\335\120\352\325\327\132\367\332\225\317\116\305\316\246\344\255\122\261\220\153\301\331\262\371\230\175\261\125\135\070\306\266\074\303\266\375\214\131\266\077\333\306\115\233\243\174\147\354\336\141\153\076\256\013\120\064\326\213\043\343\167\042\230",
    (unsigned char *)"\014\106\234\006\244\346\210\112\347\360\133\255\335\223\207\375\332\076\331\337\064\176\162\337\154\142\374\351\220\237\140\061\337\361\174\146\252\307\060\134\127\060\227\170\233\172\035\052\066\135\242\277\162\016\223\037\261\120\165\015\046\214\006\265\017\176\057\261\370\134\027\155\331\150\031\144\276\236\276\376\324\322\114\157\377\240\163\275\333\360\232\073\103\254\046\243\035\331\362\316\324\337\227\063\134\146\236\231\017\344\352\112\250\243\314\100\023\262\364\202\330\047\267\303\177\371\015\175\052\211\175\312\261\342\370\305\350\330\231\252\176\013\301\370\342\034\325\143\124\304\134\224\371\314\057\046\376\047\316\307\307\230\135\330\242\214\233\234\353\314\374\226\252\271\253\163\232\011\307\051\313\071\315\045\347\055\365\025\175\034\171\175\352\070\301\377\055\211\271\311\357\340\172\343\363\105\363\231\127\132\342\230\240\317\054\034\313\377\273\170\260\053\317\131\142\057\303\373\166\365\352\364\331\316\040\106\156\154\042\157",
    (unsigned char *)"\364\353\122\352\005\350\061\232\056\075\037\173\037\201\035\245\130\052\261\175\373\366\261\023\302\166\042\264\245\360\133\375\257\157\063\065\102\237\223\302\166\142\255\155\211\270\175\151\031\347\320\257\171\251\206\161\227\226\167\156\270\107\047\207\367\252\122\052\213\134\305\002\021\017\017\227\067\002\076\225\106\235\006\260\244\174\352\173\352\353\137\255\247\151\253\013\200\327\035\015\144\333\311\174\020\243\331\332\332\312\066\265\265\261\056\336\172\171\353\313\332\212\150\335\274\265\361\147\323\320\140\316\237\161\345\046\232\266\203\335\256\263\273\073\165\064\003\176\001\125\227\361\365\107\346\022\261\063\163\326\132\153\066\335\023\154\376\165\241\137\270\061\364\075\157\314\332\001\157\062\026\140\235\224\113\102\334\031\112\115\026\065\176\312\034\107\025\304\305\247\051\037\240\256\276\236\311\070\061\233\055\004\177\207\050\171\232\012\306\271\253\116\072\212\157\246\141\317\166\145\361\221\251\312\237\361\305\237\025\357",
    (unsigned char *)"\125\276\206\040\207\053\065\366\262\215\233\042\172\061\371\241\134\276\310\040\157\150\052\121\267\231\142\107\060\331\366\115\064\223\255\327\225\237\013\100\361\065\141\371\233\322\026\060\234\033\117\215\356\017\353\335\346\123\261\305\105\104\064\063\056\261\232\012\336\262\235\032\177\224\345\002\244\053\267\271\100\360\211\352\166\121\354\033\132\313\163\134\213\151\377\370\144\332\255\065\066\050\170\156\121\274\231\202\073\343\252\017\155\032\063\243\231\364\345\151\012\254\246\032\165\140\225\327\310\370\041\170\347\066\256\340\130\032\130\233\322\157\357\212\167\161\331\210\163\052\237\101\364\174\351\133\064\351\070\262\177\206\325\224\036\274\146\051\233\271\344\171\014\147\323\150\103\343\164\063\062\066\261\142\161\233\300\207\251\333\312\174\152\077\047\161\020\222\174\006\263\215\351\066\224\014\343\074\335\372\214\055\376\337\146\057\265\351\272\260\046\173\373\006\126\034\275\100\214\217\053\126\210\172\235\011\232\061\330\000",
    (unsigned char *)"\060\371\314\130\117\163\072\303\321\114\025\206\206\206\063\254\346\102\141\176\160\112\203\343\067\265\257\034\134\315\365\353\133\242\272\156\044\274\166\055\256\310\144\017\120\343\315\164\232\321\171\227\215\366\046\063\232\111\121\055\215\152\033\200\053\056\221\132\223\130\306\160\065\257\000\233\000\360\027\320\053\044\316\256\216\061\216\345\334\331\342\354\242\272\000\232\015\000\213\123\226\347\124\153\112\307\262\131\206\325\224\036\175\246\114\306\067\323\161\147\060\236\224\344\065\101\255\346\003\031\127\323\331\331\143\234\043\045\037\304\345\227\314\051\174\306\024\073\203\321\245\176\216\254\156\163\272\361\232\135\176\115\314\167\207\325\342\220\170\304\317\167\215\015\210\015\032\030\032\111\324\161\063\325\146\066\141\205\122\153\040\216\032\362\147\134\165\007\215\330\263\131\135\200\324\321\214\232\153\201\321\212\053\046\304\356\063\017\344\021\250\075\336\264\166\335\376\317\275\134\267\116\340\024\224\220\130\062\133\255",
    (unsigned char *)"\035\012\377\111\322\214\333\247\211\345\104\252\271\256\131\034\100\272\160\064\155\076\067\223\337\322\246\333\142\371\070\022\163\023\342\021\073\072\273\005\037\330\037\271\375\233\073\272\304\032\244\306\136\352\362\023\031\353\275\022\143\065\115\052\265\154\174\143\001\142\232\311\370\114\132\370\214\311\216\144\212\001\300\362\153\060\233\052\256\043\004\266\150\310\031\001\114\017\250\161\371\134\324\311\204\272\004\220\307\042\161\376\135\274\317\225\243\113\151\021\356\214\301\107\212\361\024\223\315\041\363\317\244\253\156\263\053\277\312\104\073\056\354\156\133\336\125\322\166\260\040\160\212\206\106\106\205\276\003\153\177\365\152\132\274\030\310\137\355\233\073\305\261\322\046\106\301\150\247\344\245\143\262\051\226\333\254\347\317\140\371\257\046\172\311\142\147\322\130\177\146\036\135\333\230\237\016\313\271\361\361\345\251\072\260\304\316\201\375\120\243\262\157\160\210\363\240\136\326\336\321\311\066\264\155\344\255\115\320\024",
    (unsigned char *)"\360\045\250\011\015\357\167\211\157\244\353\370\224\165\112\361\231\120\364\237\134\102\237\231\163\352\102\230\155\040\253\245\221\316\272\000\256\272\346\266\332\063\076\061\152\330\172\124\165\012\111\107\122\316\222\333\044\036\226\015\143\232\212\377\343\302\273\060\321\231\216\115\056\163\001\046\363\305\010\367\212\142\073\060\307\001\144\066\200\124\304\065\213\132\347\263\136\030\134\224\374\022\033\366\261\013\273\247\312\216\145\250\111\150\213\201\243\306\220\371\342\145\124\307\360\047\343\000\044\116\212\317\373\044\151\003\310\150\346\205\340\237\241\352\072\030\015\141\361\236\246\167\256\157\015\145\112\355\112\274\176\005\015\133\316\146\347\010\152\066\115\106\171\232\276\371\172\352\366\114\237\111\221\154\226\057\131\327\075\226\133\102\301\213\363\301\112\063\351\117\224\070\035\133\014\061\145\037\005\347\316\226\013\243\142\002\372\310\247\246\332\012\031\315\244\253\006\255\017\076\040\325\357\127\013\076\241\216\355\102",
    (unsigned char *)"\301\101\244\142\060\252\061\160\030\177\322\355\037\056\114\122\210\067\223\370\146\076\362\230\276\055\213\321\174\141\311\146\272\077\323\107\166\252\325\116\100\221\367\050\230\306\224\274\176\233\376\357\222\373\042\114\300\251\242\263\026\207\115\017\314\142\147\322\107\063\124\072\060\341\344\352\261\124\230\175\231\102\077\024\275\207\032\153\255\316\313\226\053\131\253\015\020\154\313\246\232\115\246\167\213\351\076\250\337\131\034\100\372\371\014\105\107\266\275\203\335\261\000\163\250\176\141\222\215\152\241\151\033\357\243\142\314\273\316\025\330\232\373\042\133\063\225\256\125\074\340\054\016\340\205\111\063\265\350\073\256\370\136\325\066\153\303\222\266\371\165\134\162\232\313\036\215\305\011\271\174\074\061\216\146\200\007\040\152\151\224\151\327\122\165\217\145\134\163\106\063\251\301\235\241\304\045\122\260\276\260\330\172\323\073\126\217\243\026\375\225\276\171\244\326\115\025\377\221\065\117\264\165\256\217\137\120\372\121\152",
    (unsigned char *)"\117\270\144\266\152\174\263\151\053\246\240\125\056\014\163\045\062\232\111\027\315\370\344\131\371\326\122\221\307\201\155\151\160\144\114\140\212\103\354\313\340\310\170\242\126\022\304\235\301\176\300\110\003\177\307\360\350\204\250\043\046\353\000\101\074\364\120\156\114\214\003\143\016\361\276\043\143\223\301\330\134\237\030\036\035\307\161\331\312\101\114\016\234\333\125\213\207\052\007\006\376\231\230\146\134\161\170\330\173\044\223\315\322\105\063\171\245\326\271\255\076\267\315\247\216\345\231\251\153\006\326\376\316\135\007\263\217\175\374\343\354\207\077\374\021\373\316\167\276\303\376\370\335\347\213\330\346\240\236\110\105\254\347\067\377\376\133\330\327\276\366\165\166\363\315\267\260\057\337\160\003\073\373\125\257\146\043\243\223\202\116\266\155\337\311\076\371\311\117\261\243\136\174\254\320\275\377\362\252\217\262\363\057\270\220\365\015\014\263\163\316\171\015\273\212\377\057\052\074\106\135\273\343\223\171\366\376\367\177\200",
    (unsigned char *)"\235\367\366\267\213\271\230\144\073\233\315\335\024\137\244\342\233\141\265\001\111\266\371\214\146\122\210\243\071\117\266\137\371\346\001\213\365\312\327\323\256\203\017\145\267\335\166\033\273\373\256\273\331\225\127\176\204\175\376\232\153\030\174\076\161\365\047\371\272\313\013\236\162\345\225\377\115\154\373\247\177\372\032\373\300\007\057\145\067\335\164\223\370\017\264\325\323\067\044\150\345\231\147\236\141\257\170\345\253\070\375\354\022\373\356\270\343\347\154\150\170\224\175\350\262\313\331\303\017\077\314\346\026\266\162\336\131\326\152\020\315\010\172\374\327\177\375\067\166\335\365\137\140\003\274\077\206\007\352\333\162\221\076\123\250\051\376\046\343\063\051\345\063\006\171\112\255\273\250\332\153\261\072\214\172\156\260\332\007\326\350\247\076\365\067\354\211\047\236\140\207\036\166\004\227\145\006\130\127\117\077\273\354\262\017\263\133\157\275\225\125\070\117\332\173\324\213\331\263\317\076\313\371\320\137\261\336\376\041\336",
    (unsigned char *)"\206\271\234\066\312\276\364\245\177\140\217\075\366\030\133\334\262\215\035\166\370\221\354\361\307\237\140\247\276\364\064\366\332\327\376\236\240\231\247\237\176\232\035\162\330\341\354\242\367\136\302\356\342\364\010\165\165\114\166\015\220\365\176\364\243\233\331\147\377\356\357\331\340\360\230\023\063\223\242\343\210\030\315\260\226\206\216\243\351\252\117\227\341\233\275\060\354\146\056\314\077\112\355\100\163\216\100\205\323\306\317\330\377\374\137\137\146\375\203\043\302\257\041\350\217\277\377\017\332\266\223\365\017\215\260\013\056\274\210\375\356\167\277\143\107\356\071\112\350\050\160\074\350\066\247\235\176\246\240\215\063\316\172\071\333\261\363\140\116\063\217\263\227\235\166\272\240\301\357\377\340\007\354\307\077\376\011\173\307\073\337\045\144\064\101\063\163\213\121\334\251\072\267\004\315\160\132\264\305\245\272\362\347\124\073\204\324\147\040\327\315\165\277\154\162\137\106\063\057\314\074\315\132\174\221\060\076\274\373\357",
    (unsigned char *)"\275\367\076\366\251\277\371\333\350\035\057\343\105\306\247\002\273\300\007\077\164\031\173\364\321\107\331\266\035\273\230\214\103\001\275\343\370\245\023\004\315\274\376\215\157\142\333\167\356\146\217\074\362\010\173\343\233\336\314\376\357\277\376\053\173\003\337\366\027\177\361\227\354\037\376\341\177\262\113\056\171\037\273\363\316\273\370\271\026\003\374\051\145\056\200\351\011\072\017\350\121\001\315\214\071\155\142\130\215\110\375\372\342\270\346\002\232\043\356\212\165\313\150\046\235\265\064\050\171\231\066\033\032\126\117\027\326\002\330\264\140\215\177\375\353\337\020\153\027\372\312\355\305\120\166\373\303\167\274\113\320\306\261\307\055\361\377\143\102\057\356\345\175\101\167\201\317\113\116\175\031\333\271\353\020\366\340\203\017\262\217\163\371\355\256\273\356\022\364\365\312\263\317\021\172\322\147\076\363\131\166\307\355\167\104\174\046\272\036\316\343\256\340\372\323\131\057\177\005\273\345\226\177\146\237\371\354\337\205\064",
    (unsigned char *)"\343\256\155\155\362\247\352\270\144\243\206\232\115\266\173\204\311\172\031\315\244\110\237\051\226\111\276\110\014\173\306\204\201\244\257\211\101\116\023\037\274\364\103\354\351\337\376\226\275\364\145\247\263\036\256\257\200\235\370\212\053\076\302\156\274\361\333\154\232\257\027\260\021\200\276\363\205\057\176\221\115\362\365\007\264\005\371\051\067\335\364\175\301\077\246\371\074\017\173\321\021\102\317\177\360\301\207\330\367\276\367\075\141\133\336\266\143\067\273\373\356\273\331\257\176\365\053\241\033\315\314\056\044\342\116\307\270\114\366\147\177\376\176\301\237\236\175\346\031\366\211\117\134\135\145\003\240\311\227\346\230\121\225\146\050\376\126\163\256\346\174\125\236\346\146\300\145\013\237\127\326\016\154\333\244\324\071\063\305\001\330\150\305\307\016\244\362\046\130\017\145\276\376\277\366\365\257\263\047\177\375\153\361\175\363\315\067\013\376\361\341\053\256\024\066\255\241\334\070\073\367\274\267\263\337\374\346\067\354\247",
    (unsigned char *)"\077\275\225\335\360\225\257\010\233\030\320\010\360\032\240\063\320\165\176\313\351\116\036\007\172\020\350\023\337\374\306\067\305\266\237\377\374\027\154\146\056\111\063\060\007\320\241\200\317\074\365\324\123\134\066\373\254\240\141\033\336\277\351\372\324\272\331\111\232\211\353\151\122\344\061\264\226\106\030\327\134\007\030\271\200\373\231\265\025\321\066\204\317\243\101\322\114\175\040\233\251\361\361\024\014\015\233\334\201\035\007\153\012\154\001\347\236\373\166\241\123\134\175\365\047\331\313\137\161\266\240\027\360\315\300\361\140\157\076\341\304\223\331\177\347\072\312\065\327\136\313\056\345\274\351\105\107\354\021\276\110\130\263\163\134\057\172\317\371\027\010\276\161\330\213\216\024\262\035\140\230\235\174\312\251\202\217\275\365\334\363\270\054\146\366\275\002\137\073\347\325\257\141\147\234\371\162\301\173\260\332\241\066\337\254\051\046\107\320\114\127\257\321\156\146\273\237\125\076\115\376\034\032\352\202\074\315\306\260\065",
    (unsigned char *)"\204\255\336\360\133\335\046\377\253\015\073\316\324\267\336\061\216\251\331\372\324\023\316\155\033\313\364\033\273\156\333\365\140\347\255\047\066\171\154\135\050\227\011\232\341\317\110\342\265\140\371\144\130\274\230\015\223\330\054\267\005\062\073\360\223\376\241\234\320\051\106\024\337\242\354\013\172\077\354\007\371\011\364\232\121\250\103\036\356\317\013\174\232\061\161\254\052\013\001\015\100\177\030\333\346\147\005\173\234\360\147\042\172\007\045\257\123\377\215\325\154\052\132\352\140\231\365\307\031\066\072\066\301\106\370\065\014\347\370\275\341\162\047\064\220\077\107\306\302\337\271\040\106\042\330\077\221\330\046\377\303\367\260\162\254\374\015\166\220\250\277\362\235\070\217\162\114\160\236\144\077\361\137\071\107\374\137\333\317\317\005\171\105\306\076\352\234\162\312\371\302\353\214\316\033\365\037\113\036\003\347\346\163\032\012\347\045\277\145\033\222\367\150\164\114\271\077\112\037\365\172\344\061\243\311\061\324\375\103\341",
    (unsigned char *)"\070\301\375\233\020\343\272\342\310\134\161\272\066\173\200\161\134\107\056\261\032\107\146\323\067\250\270\060\224\174\032\123\016\203\032\167\214\352\041\374\075\060\026\326\322\030\317\047\161\147\164\154\122\233\017\053\316\225\016\260\167\340\133\340\207\314\055\106\230\041\301\366\171\241\373\024\005\226\310\102\214\051\062\023\154\223\365\031\345\070\305\031\331\167\076\302\044\221\307\226\225\363\110\214\323\122\270\257\250\214\031\034\267\030\235\137\355\123\126\346\244\236\243\044\260\117\026\243\153\221\373\052\374\172\342\071\304\130\050\162\336\061\136\112\162\036\321\175\011\307\053\252\327\023\141\253\204\373\052\311\173\123\236\115\336\047\171\036\035\217\105\376\056\053\367\072\356\267\020\357\013\347\113\321\131\154\266\065\065\146\314\104\117\056\234\013\323\032\262\361\061\112\374\276\215\176\174\261\063\214\347\054\005\377\307\024\175\306\107\357\243\370\154\050\366\025\233\155\133\375\255\307\023\141\062\266\335\136\061\143",
    (unsigned char *)"\214\065\162\341\161\331\256\111\335\256\347\107\054\367\136\056\007\067\005\253\277\145\363\103\140\317\302\226\067\345\253\127\123\352\015\272\174\033\030\066\271\255\346\030\106\013\066\237\214\025\257\271\073\231\163\346\363\274\134\365\073\135\271\246\272\015\323\226\107\341\342\303\124\034\040\012\026\212\036\077\262\334\334\167\337\172\015\230\256\155\362\263\141\317\300\105\043\324\065\156\212\343\254\045\126\013\263\337\372\140\070\121\342\256\051\165\223\060\037\023\005\157\003\150\246\133\211\153\326\363\025\154\265\260\135\330\235\372\070\076\170\272\230\155\306\227\307\272\362\243\134\174\234\162\355\372\363\264\341\136\333\360\111\051\076\150\033\166\237\215\217\231\306\167\275\207\060\114\030\212\236\354\203\003\353\173\217\135\274\202\342\233\265\331\010\135\171\150\121\015\332\174\301\212\371\116\135\177\266\232\270\056\354\202\132\327\077\126\213\227\202\267\245\277\303\165\071\201\212\257\105\215\005\246\360\303\345\344\364\122",
    (unsigned char *)"\363\213\051\170\055\266\261\174\354\316\324\347\112\261\133\141\065\312\114\262\212\217\134\150\253\357\247\347\073\214\206\030\032\343\223\323\136\353\027\353\153\253\213\345\303\167\175\370\064\045\306\320\144\153\167\321\102\255\271\343\172\174\060\225\316\155\262\067\146\017\246\352\333\024\135\323\146\077\242\346\156\332\344\156\073\076\345\074\251\076\241\115\237\264\035\247\363\114\112\016\252\351\074\021\046\140\344\323\234\257\011\323\252\026\334\165\154\175\123\336\361\324\347\107\225\375\251\171\340\024\075\233\062\157\375\334\230\074\255\257\003\225\026\155\270\365\266\230\020\237\265\350\212\057\061\321\234\057\116\214\355\135\345\322\233\061\331\153\071\071\055\256\373\241\306\065\113\354\331\132\261\005\175\336\373\252\275\323\226\203\201\321\275\217\216\342\222\363\155\265\041\051\276\075\323\365\351\317\222\312\007\061\214\176\337\032\104\256\065\214\275\077\154\061\270\256\072\115\076\130\110\056\173\252\315\366\343\322\321\154",
    (unsigned char *)"\072\022\105\156\265\361\340\030\103\143\312\030\243\111\261\077\230\374\102\076\361\112\076\270\073\124\273\046\065\106\316\045\243\271\350\327\104\033\066\171\033\273\026\227\116\121\253\114\356\243\223\076\027\174\275\126\014\045\333\173\141\271\172\256\355\074\024\033\014\366\336\025\165\233\145\055\015\207\116\151\262\245\327\162\157\261\367\014\225\077\333\364\016\237\030\010\033\006\242\017\226\075\146\337\242\360\032\227\355\204\142\117\064\311\166\056\033\047\105\277\267\371\146\154\266\064\212\337\215\352\073\255\065\347\032\363\341\371\140\330\142\062\025\360\231\356\336\301\273\041\107\274\124\231\107\371\256\013\357\226\242\313\272\370\017\305\376\357\253\127\057\327\327\346\342\365\066\173\203\315\117\356\362\031\056\167\215\143\337\124\036\115\171\377\233\364\062\337\365\130\213\017\201\152\243\263\325\011\360\341\357\372\161\140\057\353\351\031\370\176\211\377\206\334\072\112\135\122\112\375\122\212\257\323\047\037\333\027\347\335",
    (unsigned char *)"\267\366\173\055\374\236\352\127\242\254\143\212\077\333\307\326\250\343\176\331\350\324\306\243\154\366\321\132\327\077\346\363\267\351\207\076\166\166\233\217\334\045\067\273\260\154\147\027\266\212\374\243\216\316\356\217\155\337\165\060\333\173\364\261\002\277\303\045\207\273\144\015\327\075\167\325\324\361\131\017\076\357\057\252\055\335\225\017\116\265\261\373\326\070\162\361\066\312\130\046\137\205\213\377\121\142\163\155\230\225\276\062\271\113\226\253\305\366\346\172\157\142\030\241\076\357\273\174\161\206\035\263\164\002\247\233\055\154\335\272\365\133\216\330\163\364\323\157\171\333\171\154\333\316\203\023\061\327\324\173\103\221\121\174\145\121\252\376\126\213\076\245\257\153\327\075\167\305\216\120\327\216\051\076\302\007\343\021\173\306\276\161\055\230\355\302\227\307\372\372\014\050\072\205\211\067\270\170\065\225\027\332\346\152\263\063\101\356\301\036\316\123\376\200\323\310\302\326\203\356\130\305\077\371\351\302\005\357\372\343",
    (unsigned char *)"\367\010\374\233\035\234\347\100\316\001\344\076\140\174\275\332\116\243\316\145\306\212\143\155\302\010\265\075\013\352\034\050\330\041\266\072\251\056\137\203\151\356\246\271\140\372\205\172\055\024\137\207\315\237\224\230\137\311\036\323\205\075\047\323\363\300\356\003\246\053\241\367\126\311\161\024\347\160\330\365\154\161\262\056\173\074\166\377\114\171\226\330\072\062\332\065\104\276\151\131\320\302\336\027\037\313\336\377\301\017\261\077\170\353\271\134\227\351\335\007\064\123\127\127\267\146\351\204\023\076\375\331\277\373\034\373\233\117\177\226\275\364\364\063\043\034\220\141\221\167\241\267\111\361\075\024\376\037\251\352\027\356\317\231\266\215\213\134\040\331\324\175\361\177\345\030\276\115\234\107\364\237\022\055\071\256\062\217\261\240\277\076\337\140\334\111\163\237\160\037\214\033\217\025\317\053\232\247\162\114\074\367\111\345\370\311\150\036\303\211\353\012\373\214\045\307\214\317\021\334\223\150\016\312\076\161\235\143\223\211",
    (unsigned char *)"\163\306\347\111\376\226\143\017\251\367\104\233\263\374\226\317\300\264\057\371\014\342\373\257\077\033\071\147\365\131\004\367\151\102\173\006\223\311\347\223\230\257\176\254\062\047\345\232\206\253\346\227\074\257\151\277\076\207\221\321\370\072\260\365\247\316\005\326\076\340\015\276\376\015\157\146\327\136\367\005\366\127\237\270\232\155\333\276\343\075\100\057\377\017\270\243\343\017"    };
  glsInlineImage GLStudio_CommsPanelClass::image_data_0(205,385,4,6408,GLS_CODEC_LZ77,189941400ul,false, 28418,0,240, GLStudio_CommsPanelClass::rgb_data_0, NULL);

unsigned char * GLStudio_CommsPanelClass::rgb_data_1[] = {
    (unsigned char *)"\170\332\265\133\011\220\135\145\225\066\033\041\044\144\043\011\111\034\005\302\222\004\010\050\022\102\210\061\004\102\100\066\001\131\024\045\054\243\354\010\262\147\117\147\137\273\263\165\167\172\117\357\375\172\175\373\173\167\175\153\047\240\216\312\314\130\145\225\072\142\131\063\132\132\245\226\065\210\243\350\231\357\073\377\337\116\212\102\147\204\241\253\376\172\057\367\335\373\337\363\235\363\235\357\234\377\277\067\037\371\310\373\372\033\215\061\016\343\164\214\063\061\146\140\374\003\306\005\030\227\142\134\211\261\014\143\005\306\052\214\033\061\156\306\270\315\216\133\060\076\213\261\032\343\072\173\336\122\214\117\141\134\202\061\017\143\056\306\131\166\176\336\147\054\306\250\217\174\370\177\243\354\275\170\317\311\030\263\060\316\301\270\030\143\261\265\225\170\076\077\172\364\350\257\116\234\070\161\335\354\331\147\127\055\132\264\250\347\323\237\376\164\146\345\265\327\172\053\126\054\167\257\276\372\232\344\242\113\057\355",
    (unsigned char *)"\072\367\343\347\034\073\153\372\364\075\023\046\114\170\005\347\077\214\353\356\260\270\077\143\375\264\000\343\143\326\207\304\072\036\143\314\207\204\165\224\235\373\064\214\111\366\236\347\330\230\055\265\261\272\153\374\370\361\317\235\163\316\271\215\327\135\267\352\365\347\236\371\332\117\033\253\153\337\216\164\367\113\137\044\051\321\276\041\031\350\217\111\014\143\240\317\221\330\100\102\242\275\375\322\334\320\362\347\015\353\067\275\365\320\203\217\374\170\305\212\025\376\234\071\163\252\306\215\033\367\044\346\373\034\306\365\030\113\060\026\132\254\214\353\104\153\307\230\017\041\166\023\060\246\142\174\324\336\363\152\213\355\213\263\146\315\332\175\313\315\267\024\267\154\254\370\325\276\175\007\244\245\271\115\022\103\161\031\352\037\220\201\110\134\006\173\222\022\213\104\245\037\337\343\221\230\104\043\011\031\354\305\361\376\101\211\365\105\245\247\263\107\366\356\335\057\165\165\215\322\172\274\135\266\154\252\370\331\212\345",
    (unsigned char *)"\327\246\047\117\236\274\021\363\337\155\261\136\205\061\037\143\016\306\024\313\245\377\217\230\216\262\171\067\321\306\356\074\214\053\154\016\335\175\366\331\147\357\275\377\376\373\277\335\322\174\374\235\056\330\131\171\240\112\166\357\332\055\175\075\275\062\004\333\223\321\264\070\011\127\274\224\047\176\046\220\320\311\141\004\222\163\102\361\263\370\216\221\115\371\022\217\306\245\261\246\116\066\154\330\044\373\200\265\251\241\105\272\061\337\301\252\103\277\133\265\152\125\161\342\244\111\033\154\134\257\305\270\334\162\210\061\075\343\003\346\351\150\313\011\346\301\154\353\303\153\060\156\032\063\146\314\343\313\226\055\363\032\352\233\376\324\321\321\045\065\107\153\145\333\326\035\262\171\123\205\364\266\167\002\127\026\030\102\311\173\171\311\373\005\311\371\071\311\005\105\051\205\045\051\206\005\051\372\171\051\370\105\051\170\070\226\053\352\071\205\124\126\332\133\332\244\242\142\273\200\273\122\261\145\233\354\331\275\117\016",
    (unsigned char *)"\035\074\054\353\326\256\373\317\313\057\277\054\066\146\314\350\107\155\276\056\261\372\066\323\372\177\334\373\300\071\312\342\233\154\365\355\022\253\003\167\317\231\075\347\310\043\017\077\362\146\125\325\041\331\263\153\257\154\331\274\125\066\157\334\042\207\253\016\203\237\011\340\362\045\164\103\305\021\172\210\235\033\340\130\116\112\136\101\112\276\305\343\346\044\360\175\340\046\326\120\312\070\076\234\053\311\160\070\054\071\304\173\240\167\100\232\353\133\245\261\241\131\332\200\273\273\275\117\042\030\317\076\371\265\067\247\115\233\266\003\166\334\152\165\173\276\325\275\211\177\147\074\107\370\171\246\305\267\210\034\031\065\152\324\003\267\336\174\253\117\173\363\340\333\140\144\110\357\337\326\322\051\311\241\044\154\047\046\137\002\327\225\234\027\042\166\171\051\362\134\214\042\342\131\320\001\214\001\007\342\033\340\170\100\274\070\317\345\157\071\275\246\020\026\345\144\336\340\365\161\237\130\074\046\175\275\320\253\056\150",
    (unsigned char *)"\124\177\122\152\252\153\176\267\140\301\202\166\330\164\017\306\247\055\316\231\226\267\143\376\016\174\223\154\156\123\067\257\003\067\037\171\370\301\007\137\377\347\157\375\213\274\126\176\115\116\344\313\360\373\111\304\240\240\174\044\027\003\307\027\047\223\105\256\005\340\144\101\116\300\326\327\162\171\051\043\076\047\303\262\224\201\255\300\021\002\023\070\133\316\161\216\141\214\262\024\163\340\157\140\346\341\357\364\107\321\305\061\314\121\310\027\305\313\272\222\031\114\313\020\064\213\332\334\327\033\225\053\256\270\062\012\333\356\264\070\057\264\172\161\272\315\261\277\365\067\306\372\143\226\255\171\327\216\036\063\346\241\247\036\173\352\333\337\375\306\167\141\147\011\261\202\377\175\346\126\021\237\210\023\170\231\007\367\362\264\317\067\230\112\105\330\137\030\226\223\300\100\054\047\310\103\370\205\277\021\337\011\036\313\343\367\374\111\365\127\251\130\322\274\054\347\230\237\070\207\276\200\377\350\253\142\276\040\145\370",
    (unsigned char *)"\050\007\334\231\130\126\143\071\060\220\224\216\316\276\077\137\060\157\136\023\154\274\335\152\074\365\160\232\255\241\243\377\206\306\234\156\365\212\176\131\316\272\360\320\003\017\275\366\235\157\274\001\037\203\127\216\321\221\034\162\213\334\052\061\216\001\363\214\334\202\355\005\304\014\166\016\303\367\303\205\042\142\171\002\307\211\207\266\003\057\374\102\173\113\032\077\234\023\014\003\057\006\316\175\035\170\116\022\017\347\300\134\045\215\073\346\017\163\072\167\001\347\323\277\116\322\001\316\230\014\242\276\066\324\065\376\156\306\214\031\273\155\017\305\236\341\343\126\103\336\113\203\106\070\072\305\352\062\165\353\366\245\113\226\366\177\263\374\115\315\021\346\133\236\232\301\274\001\057\031\073\345\022\363\016\307\351\173\152\346\111\304\201\074\045\007\117\004\047\124\113\162\214\021\360\274\146\107\041\050\303\146\362\271\244\347\224\311\175\346\041\343\115\375\365\031\357\262\301\346\227\025\053\171\303\121\100\256\247\143",
    (unsigned char *)"\031\031\102\175\215\015\304\144\327\256\135\277\104\237\364\222\325\333\313\155\216\115\262\032\364\156\216\116\264\277\363\274\325\350\067\366\146\222\351\077\024\221\377\324\204\042\143\006\074\264\045\004\106\152\043\371\023\120\113\174\352\012\354\140\154\141\017\317\051\133\156\016\347\207\065\166\105\360\274\034\130\216\063\266\214\053\317\101\354\112\312\107\014\237\230\315\065\205\074\363\364\244\372\206\171\352\103\243\171\075\165\052\227\001\116\344\147\177\117\237\104\007\223\262\346\313\153\276\007\115\174\004\166\257\264\375\337\114\333\263\214\071\045\206\344\360\164\214\213\330\163\242\227\172\374\300\236\003\377\176\262\364\032\142\226\123\074\171\077\300\275\311\031\304\005\337\013\254\011\340\156\316\065\370\102\142\326\232\121\122\016\226\013\344\147\131\343\371\015\342\051\360\170\111\163\232\071\370\172\256\254\271\252\176\240\066\345\013\152\177\336\346\256\251\233\300\032\032\136\027\254\106\123\207\113\360\253\213\276\202",
    (unsigned char *)"\174\355\355\356\225\246\143\015\262\144\311\222\200\175\262\255\341\347\331\236\354\264\123\372\264\111\166\335\300\276\372\366\025\313\226\047\137\053\275\256\066\207\056\352\001\152\202\311\213\262\332\110\314\354\127\130\333\162\176\250\065\061\247\065\317\324\203\174\150\264\203\361\320\117\315\101\134\307\170\236\242\251\364\101\001\376\140\356\345\163\041\374\007\276\344\350\207\262\325\354\202\346\300\111\360\225\065\264\204\173\224\350\163\366\026\370\236\114\144\244\017\175\060\153\363\301\312\103\062\177\376\374\026\273\236\371\204\345\344\104\033\313\361\126\147\330\203\136\217\276\372\205\135\333\166\375\132\265\134\153\170\250\365\216\130\031\257\023\250\161\254\353\201\343\202\303\001\216\041\166\256\007\314\241\162\227\134\055\171\105\303\115\304\264\304\232\027\120\037\113\106\053\203\242\142\054\341\167\345\077\362\262\254\232\124\060\134\004\147\115\375\050\150\376\347\302\020\030\013\312\017\365\035\165\001\166\345\341\217\020",
    (unsigned char *)"\275\124\264\077\201\176\150\277\034\076\164\124\366\357\257\374\365\370\361\247\077\143\373\225\013\255\316\236\146\261\216\304\360\256\345\313\227\147\217\325\326\153\237\154\152\171\101\353\103\056\013\274\036\143\026\152\255\317\001\143\001\367\340\175\362\056\363\063\064\375\231\366\156\310\123\352\060\155\103\374\131\003\024\237\317\274\034\326\276\256\250\170\021\167\306\216\030\065\147\031\057\342\317\153\055\032\321\271\262\325\355\002\153\011\374\107\176\345\002\363\173\006\175\343\256\235\173\200\163\057\326\063\203\162\345\225\213\173\355\372\364\012\033\313\063\054\126\346\341\265\320\247\027\052\017\034\374\055\175\262\013\327\144\342\031\330\237\327\130\372\032\273\000\237\076\362\337\263\165\061\104\175\106\217\015\234\232\057\304\247\075\201\361\215\352\256\366\153\246\307\321\332\036\362\034\160\063\044\247\055\077\141\057\363\062\157\343\127\366\112\032\373\141\352\030\172\201\220\076\013\340\317\300\334\243\350\200\057\216\271",
    (unsigned char *)"\277\217\357\225\373\253\320\053\157\221\366\266\116\331\132\261\355\077\306\216\035\373\230\215\345\074\133\053\330\157\177\222\330\077\361\211\117\166\015\366\017\311\001\134\263\145\313\126\211\243\377\244\277\331\303\004\256\301\347\145\074\140\362\225\233\001\070\312\336\215\337\251\255\344\063\343\314\174\055\223\257\276\251\071\005\160\053\010\002\355\117\331\067\260\066\150\375\363\014\016\243\267\374\064\074\145\357\127\202\337\264\027\004\066\362\223\367\017\161\174\230\376\161\012\332\117\205\036\372\106\334\243\243\265\107\326\276\262\016\375\373\021\211\100\153\317\077\377\374\072\273\126\137\144\065\366\134\152\021\373\321\247\237\176\366\373\021\254\213\266\157\337\051\333\267\355\020\047\035\250\357\103\140\052\252\206\302\126\142\164\114\134\175\360\065\007\234\071\330\102\137\027\354\272\051\347\220\337\005\265\065\364\115\017\304\274\065\132\141\164\121\353\254\306\034\166\153\157\153\352\102\071\064\032\132\246\337\210\305\065",
    (unsigned char *)"\334\050\271\105\305\074\354\024\164\036\325\160\307\123\015\164\223\071\331\217\234\134\267\156\203\064\067\266\310\275\367\336\373\055\140\272\327\326\371\217\331\236\166\045\326\243\033\152\153\352\336\152\250\157\224\265\153\327\113\355\221\072\160\243\154\172\064\332\107\275\144\176\062\176\210\253\237\365\320\237\072\022\200\253\105\345\163\136\265\225\170\231\173\201\332\145\372\361\200\375\237\152\127\101\071\034\052\046\162\057\320\034\053\270\354\241\362\312\353\242\147\152\125\321\366\365\071\257\254\375\173\336\366\306\145\372\313\136\037\144\175\255\141\141\266\044\311\201\224\034\300\332\163\307\216\335\362\352\253\153\177\003\355\174\336\356\275\134\140\343\171\323\302\205\013\333\332\132\073\144\307\366\135\262\021\353\267\130\037\327\111\105\325\035\352\151\316\366\336\252\077\340\044\327\115\206\077\201\352\057\153\145\140\327\032\145\366\172\134\063\372\241\372\207\072\037\004\006\157\331\063\353\111\342\054\331\372\252\032\342",
    (unsigned char *)"\232\163\113\274\037\353\203\157\152\162\240\072\112\136\004\252\063\314\035\316\243\276\310\344\165\155\102\233\262\061\027\275\317\240\064\326\067\041\077\053\145\356\334\071\065\266\367\031\331\103\273\353\246\325\067\015\037\104\235\331\212\074\214\264\165\303\067\171\325\321\220\365\217\365\236\065\321\267\353\037\345\031\373\071\317\326\016\137\327\133\354\003\212\152\263\007\377\372\132\077\115\135\341\061\303\321\242\355\031\002\366\116\254\261\252\141\006\043\357\345\363\176\074\037\171\230\267\161\345\375\211\077\320\276\277\250\274\121\176\361\236\031\137\265\052\223\102\255\354\037\224\256\356\076\351\156\351\221\245\113\227\072\166\135\302\275\276\245\310\305\007\327\074\360\300\217\216\034\076\212\365\150\227\244\243\151\350\212\147\155\010\264\077\125\376\333\176\046\320\274\002\016\325\124\323\017\344\125\207\174\255\053\241\326\225\100\155\315\363\132\307\254\225\351\027\306\366\057\153\147\173\074\160\250\051\071\325\153\215\047",
    (unsigned char *)"\347\103\014\251\243\344\176\240\327\005\342\341\072\217\075\027\375\210\373\026\331\067\103\037\330\127\270\151\137\242\003\161\351\212\014\112\244\263\137\036\374\342\227\376\025\330\036\260\153\351\345\350\335\236\171\371\353\317\377\262\363\170\217\364\364\366\113\074\226\120\355\244\277\250\151\041\360\346\341\257\202\336\057\047\236\157\370\111\116\221\053\314\111\372\041\300\061\337\306\275\300\337\130\123\211\203\330\241\277\005\307\327\070\026\260\036\014\255\036\163\237\047\120\374\334\337\061\134\050\151\214\301\133\316\355\230\132\105\015\367\270\376\346\061\306\034\030\375\264\203\173\270\332\367\121\323\123\203\011\351\007\306\276\356\041\131\377\362\332\237\141\335\373\254\335\173\132\311\175\320\075\333\167\275\325\331\021\221\110\137\124\122\261\024\342\142\064\065\307\172\006\375\142\255\047\076\326\310\120\061\005\266\317\363\364\076\241\326\227\234\261\367\224\337\002\142\140\275\164\274\277\364\014\305\114\250\061\245\077\250",
    (unsigned char *)"\331\001\152\200\357\170\246\316\152\277\001\077\145\115\077\023\360\070\143\256\234\361\245\224\241\006\372\352\057\326\061\037\237\354\055\330\207\244\343\051\335\333\214\366\304\345\300\356\375\277\105\275\347\276\336\115\334\077\234\076\155\332\316\352\252\303\357\164\043\306\334\117\163\120\373\115\375\011\165\017\246\354\376\217\326\024\140\063\367\134\264\176\060\076\260\301\005\106\217\266\146\134\304\073\064\361\001\137\265\166\302\117\076\173\170\326\002\160\301\267\163\220\247\344\240\346\074\316\343\034\256\153\172\107\152\266\157\165\250\344\230\174\346\165\272\246\043\176\325\231\300\364\045\324\374\320\150\176\032\375\353\320\120\134\173\330\332\303\165\277\237\072\165\352\036\273\367\163\303\254\131\063\053\353\252\153\145\260\213\373\205\011\275\207\366\156\230\167\230\334\322\334\361\264\077\055\145\155\054\165\057\012\237\276\321\126\335\123\164\103\215\243\307\175\217\254\143\070\252\376\037\031\006\043\077\365\337\334\217\304",
    (unsigned char *)"\275\170\276\013\377\260\026\004\372\033\174\305\234\326\372\340\152\256\033\337\204\312\013\217\134\360\215\236\346\151\017\316\163\361\075\225\314\110\064\206\365\363\340\220\064\065\066\277\163\366\254\131\207\355\263\207\033\346\316\235\175\210\030\173\272\372\044\225\110\301\176\313\017\326\004\336\307\065\153\013\346\236\237\061\161\010\154\155\127\374\254\017\043\332\142\363\317\245\135\026\227\301\077\242\135\046\366\172\074\303\230\361\134\344\073\174\222\317\172\046\047\125\257\220\147\344\113\072\157\162\001\076\240\316\024\250\161\151\343\073\326\313\060\103\037\005\342\140\244\023\111\111\104\143\022\033\032\222\226\246\246\077\315\232\071\263\312\366\256\253\146\236\165\326\336\232\203\207\376\024\351\352\227\004\060\006\216\243\176\063\365\070\124\035\010\265\257\061\363\262\106\121\333\103\133\253\314\236\032\064\127\173\265\120\143\233\263\375\102\250\327\033\235\310\151\237\007\234\314\141\325\034\117\061\372\056\061\342\337\131",
    (unsigned char *)"\127\317\163\231\373\344\015\256\057\246\003\223\007\352\007\117\363\062\114\043\177\341\023\152\067\363\222\065\206\334\113\304\242\022\037\214\111\002\065\244\251\266\356\017\123\247\114\335\141\173\272\225\310\315\265\173\166\354\170\053\001\135\312\244\262\172\175\210\036\306\364\335\046\367\250\025\214\213\326\346\320\364\227\272\246\140\317\111\015\244\117\251\215\332\153\006\312\005\306\066\260\165\323\360\330\340\056\132\136\023\143\200\173\171\232\217\300\216\370\370\151\117\373\011\342\041\376\142\326\304\334\145\337\310\236\212\265\042\305\334\067\274\062\153\147\364\260\130\063\147\120\017\022\003\320\034\364\002\125\173\125\163\136\265\317\021\226\237\166\332\151\317\155\335\260\361\127\136\322\123\034\201\316\347\352\334\201\325\006\255\177\131\243\361\272\077\312\132\154\173\037\335\037\125\075\144\256\222\117\046\247\030\303\040\153\170\340\151\057\340\053\276\141\325\315\120\367\322\103\233\373\271\021\055\143\056\260\107\103\135",
    (unsigned char *)"\010\030\103\370\332\143\316\122\317\324\047\246\356\223\257\256\355\033\330\227\270\161\107\342\130\113\016\365\015\310\100\127\104\136\171\361\105\326\216\247\354\372\203\075\300\303\217\076\362\225\037\247\023\011\325\102\372\314\317\030\214\314\043\326\164\332\022\370\046\257\102\213\223\175\051\327\016\241\356\325\205\032\177\162\054\257\276\361\264\056\260\046\150\237\227\065\172\113\137\250\246\072\206\227\272\106\314\120\043\063\032\123\137\163\022\367\002\237\274\064\367\154\031\143\307\304\067\345\152\356\122\203\125\303\165\015\220\323\032\025\213\307\145\000\165\261\247\063\042\215\265\215\262\346\376\373\177\000\134\153\354\163\065\366\162\237\137\265\162\345\353\221\266\016\334\073\213\236\301\021\007\275\221\237\311\152\015\360\263\226\277\364\071\374\112\276\345\175\323\153\261\127\317\271\046\157\363\131\133\057\254\066\205\132\257\175\305\032\352\136\336\110\156\172\272\176\361\130\047\130\003\311\113\160\215\372\341\260\256\303",
    (unsigned char *)"\376\020\237\214\051\261\170\320\007\027\071\030\244\162\006\063\353\142\326\324\354\142\266\040\331\144\132\372\373\007\244\247\275\107\152\016\325\312\336\335\373\344\206\125\253\206\331\243\332\136\356\062\356\201\134\170\341\205\335\225\370\155\260\273\133\353\225\227\316\352\274\234\313\003\306\020\170\363\274\157\072\253\032\247\174\322\175\307\221\347\032\071\355\173\264\266\263\127\310\232\276\047\147\163\116\173\003\366\005\131\123\133\002\355\175\310\113\372\215\366\043\267\300\115\027\367\362\262\006\203\117\054\360\251\213\221\045\147\161\116\300\147\140\260\213\153\036\345\077\346\310\106\343\272\107\127\265\257\112\066\254\337\050\107\217\324\310\302\205\027\267\333\372\177\231\135\133\135\067\145\312\224\255\130\067\376\161\047\326\216\155\315\115\360\121\006\070\135\315\117\323\203\070\246\156\161\375\210\343\174\316\124\146\117\313\165\253\325\135\255\051\364\211\175\256\243\337\251\051\231\214\306\237\374\313\245\075\133\063\134",
    (unsigned char *)"\325\123\243\145\276\346\033\153\241\353\230\365\232\213\363\174\324\364\040\345\230\376\200\176\302\071\344\154\350\070\306\357\256\271\156\010\065\277\372\150\215\274\362\362\132\076\317\303\132\371\350\133\223\047\117\331\140\373\270\371\166\215\274\014\334\175\350\321\257\076\366\243\232\352\072\131\373\352\172\071\134\165\120\122\250\065\254\043\324\075\316\125\000\276\040\155\064\067\204\275\305\264\253\032\304\032\023\272\246\236\363\367\040\343\230\232\300\230\151\115\200\316\147\014\007\030\263\074\256\053\023\023\143\234\012\114\216\341\267\002\175\312\032\117\255\121\215\305\065\300\231\113\133\114\234\127\265\310\061\374\306\334\331\150\112\172\072\272\145\343\306\115\262\155\353\166\351\304\367\147\237\375\372\367\117\351\307\317\265\373\072\334\337\271\365\212\053\256\034\344\263\315\175\173\260\246\176\165\235\164\036\157\103\136\046\225\053\256\152\100\106\175\251\375\213\366\255\276\321\131\333\347\231\234\065\366\060\046\344\243",
    (unsigned char *)"\347\030\133\064\376\260\213\172\031\002\317\011\330\116\254\141\332\323\071\151\167\301\152\167\126\163\062\053\131\047\043\116\022\367\107\377\222\121\215\300\274\320\011\372\102\361\342\173\254\067\052\055\365\015\262\036\353\372\103\130\033\106\121\037\257\132\274\244\327\366\160\237\264\370\246\217\360\165\322\244\063\327\037\075\134\375\166\003\326\231\353\327\155\220\312\175\373\260\136\031\224\124\074\041\016\172\010\366\274\036\155\314\032\116\122\043\174\327\254\101\002\253\165\304\241\234\123\337\247\225\253\216\305\140\342\100\055\203\235\251\064\270\340\250\366\060\356\214\143\100\116\247\135\355\353\062\070\116\337\146\062\151\345\214\227\304\071\361\264\162\241\250\373\020\056\326\200\111\341\336\014\237\361\062\017\033\033\232\244\266\372\330\157\261\306\170\311\356\231\317\267\370\046\331\075\017\356\175\334\373\271\333\356\070\331\211\130\156\337\266\123\166\126\154\223\136\150\155\154\050\052\231\241\230\244\061\270\046\361\022",
    (unsigned char *)"\270\057\154\365\122\106\357\074\265\075\253\237\241\325\104\107\355\316\374\045\366\344\072\365\043\110\233\130\204\030\036\165\233\174\317\360\174\370\003\361\362\343\131\365\243\213\271\231\217\324\314\054\060\252\316\343\132\237\347\020\073\174\064\324\333\047\221\216\036\335\227\331\262\251\102\072\260\366\275\345\226\133\362\166\277\174\144\057\147\222\335\103\236\151\237\025\257\232\076\175\372\216\232\232\143\357\354\337\167\100\166\154\333\046\235\320\237\110\044\042\121\340\313\304\143\210\147\102\274\170\022\366\244\301\041\334\237\261\112\003\167\062\253\330\064\066\260\305\311\144\324\377\041\216\173\340\034\343\310\130\371\214\013\256\043\316\040\211\276\021\266\026\223\264\235\334\103\374\122\051\340\312\350\334\076\342\346\001\163\300\030\146\251\257\270\046\001\215\115\240\036\102\113\007\042\275\310\305\116\151\072\126\057\273\167\356\221\175\173\367\275\075\371\114\175\117\142\225\335\023\037\171\046\071\362\314\370\343\026\373",
    (unsigned char *)"\075\253\126\255\072\101\214\073\053\166\040\376\365\322\335\321\052\003\350\001\343\121\360\026\075\241\013\316\272\260\315\113\060\117\322\222\316\200\313\210\027\155\047\046\137\343\310\117\370\001\043\013\134\076\374\340\203\357\116\026\030\360\075\110\047\045\200\257\170\054\300\065\156\002\372\035\207\206\140\136\316\235\305\174\274\226\270\230\233\364\211\107\316\142\244\261\066\352\303\132\276\247\047\042\135\155\235\322\320\130\057\225\007\052\145\311\222\245\356\273\142\170\246\175\326\061\362\334\161\206\175\346\163\055\172\240\047\356\274\363\316\177\253\332\265\113\232\253\153\344\170\113\003\372\207\016\031\034\030\200\377\300\131\370\220\075\021\363\323\307\132\123\361\152\114\122\312\127\027\366\070\260\317\141\114\240\131\016\342\107\234\056\372\175\037\307\350\217\174\202\232\232\100\274\122\132\123\334\244\253\161\123\274\151\176\246\215\217\034\254\203\170\055\256\311\322\137\103\111\304\157\100\372\172\172\204\357\222\164\266",
    (unsigned char *)"\167\110\153\163\213\074\371\370\023\077\037\073\166\354\063\266\136\054\170\217\347\312\043\317\165\346\332\347\041\067\216\037\077\176\303\163\217\077\376\233\226\243\107\244\271\251\101\232\333\133\245\247\273\007\361\034\220\004\264\053\015\035\112\322\346\030\142\301\270\202\137\071\360\212\271\243\230\201\045\114\123\223\201\023\261\310\300\166\007\347\073\300\224\301\277\135\160\100\171\317\234\115\232\374\144\276\071\051\303\343\102\222\265\021\071\221\116\353\071\131\374\226\101\277\026\355\353\327\147\125\235\235\235\310\277\166\351\154\355\224\303\225\007\337\231\063\173\366\021\273\216\372\224\175\207\150\322\273\336\203\030\171\217\343\324\147\254\267\142\215\131\275\167\347\316\077\126\327\327\113\163\113\263\164\035\157\207\357\272\020\317\041\111\017\306\045\201\173\146\300\065\037\372\346\046\114\014\002\352\074\371\226\210\211\033\213\033\073\211\071\106\016\342\073\160\271\270\206\234\314\260\056\060\366\051\362\062\245\365\211",
    (unsigned char *)"\132\312\070\373\310\073\372\315\267\232\223\000\257\023\275\210\037\374\334\323\336\051\355\255\035\322\322\332\052\355\315\307\345\352\305\113\262\366\135\045\326\303\363\117\171\226\063\352\075\236\263\236\156\265\366\174\173\376\135\227\054\274\044\172\364\320\021\151\254\257\223\326\306\146\314\315\170\166\302\237\175\130\253\015\052\157\263\103\161\364\013\161\161\020\317\060\101\373\020\017\304\327\001\116\017\070\162\260\063\307\375\023\315\143\023\103\152\126\026\176\161\154\356\146\225\327\300\215\170\245\231\163\366\367\044\326\113\111\350\372\140\304\340\213\040\166\021\324\355\256\346\066\364\143\255\362\205\373\356\371\336\350\321\243\037\261\357\047\055\174\217\347\253\357\365\316\303\004\173\336\174\273\317\174\377\165\313\226\015\037\073\164\130\216\036\073\046\055\215\215\322\321\324\044\075\155\355\022\355\216\240\006\367\003\353\220\142\114\202\277\131\214\200\165\024\043\013\214\331\144\134\165\062\223\244\346\040\307\250\047",
    (unsigned char *)"\324\125\176\217\147\064\127\311\155\007\377\116\041\276\031\360\071\075\224\322\032\025\035\034\122\255\353\213\364\311\100\133\027\352\130\227\364\264\164\200\117\315\322\204\132\170\353\115\267\376\323\270\161\143\237\264\153\304\105\357\172\116\076\352\177\171\067\156\242\175\326\303\172\262\022\176\372\307\073\356\270\375\373\207\053\367\113\355\301\052\151\200\016\265\064\040\107\233\033\244\013\071\337\003\254\203\310\323\150\064\252\357\041\045\031\123\350\157\046\066\244\071\344\305\114\376\146\220\257\151\160\216\071\031\060\336\370\236\115\200\357\111\343\237\044\270\235\102\256\307\020\263\101\364\330\375\130\007\366\201\227\335\340\145\047\342\326\331\324\046\255\055\307\245\246\246\132\026\137\265\230\032\372\220\325\230\313\155\016\116\376\053\034\175\257\277\123\337\101\142\337\176\035\337\105\274\361\372\353\277\263\157\363\026\251\334\275\123\052\201\267\272\362\260\064\034\256\226\343\165\365\322\166\034\034\356\351\226\170\157",
    (unsigned char *)"\104\122\350\221\123\103\214\355\220\044\140\167\032\030\335\050\371\234\326\136\042\203\374\115\243\317\314\340\170\022\365\050\006\177\160\017\046\066\320\217\365\103\217\342\352\002\127\352\300\233\032\150\336\061\364\061\334\157\252\251\251\227\212\255\025\157\317\233\167\036\327\024\137\260\370\056\263\317\117\247\130\174\243\337\307\273\144\037\265\363\360\135\253\057\135\164\321\205\203\317\074\366\350\357\327\257\177\131\266\256\335\040\133\327\143\124\154\226\155\333\267\311\221\375\125\322\134\127\053\221\056\324\231\336\136\031\034\032\060\366\043\236\111\340\215\043\316\151\360\057\011\234\121\344\160\014\276\030\034\034\220\376\201\076\211\166\165\203\377\210\023\270\161\160\337\176\251\100\217\275\036\163\157\330\260\101\237\023\356\334\261\135\036\134\363\345\237\117\235\062\165\257\335\343\377\214\345\331\334\123\342\067\372\175\276\023\370\356\167\346\356\230\074\171\362\236\033\127\257\376\301\346\215\233\365\275\075\076\007\332",
    (unsigned char *)"\264\151\213\076\003\144\057\277\007\165\265\225\275\103\127\247\364\042\227\006\373\042\130\377\364\113\264\037\243\257\027\361\352\223\076\150\126\157\004\061\003\266\316\366\066\150\331\161\364\053\307\144\313\346\315\362\312\053\257\312\126\254\041\370\034\224\275\350\041\150\336\147\157\374\354\033\340\322\013\366\135\234\245\366\271\360\331\066\377\306\275\017\174\043\261\074\365\335\307\263\355\274\254\053\067\362\135\221\171\363\346\105\236\174\362\351\137\064\324\065\241\117\150\223\152\254\115\371\354\362\225\227\141\343\346\115\322\170\264\132\363\247\267\243\103\372\073\272\144\000\175\127\157\147\273\364\102\033\273\133\133\244\255\355\070\070\176\134\216\103\307\216\325\034\225\055\025\025\372\356\044\327\270\174\046\314\347\150\057\276\370\322\057\056\277\354\362\041\373\236\362\052\273\157\061\317\326\370\017\372\156\347\137\173\207\365\134\233\343\324\334\333\320\133\074\273\140\301\202\076\254\075\177\122\127\213\072\332\324\252",
    (unsigned char *)"\176\137\277\156\075\154\336\054\365\310\243\146\140\040\326\166\140\152\001\246\326\046\150\063\164\261\265\011\372\210\332\133\173\370\250\124\356\331\247\075\047\337\105\070\126\133\047\117\074\361\344\233\027\057\270\070\302\147\061\166\235\264\334\152\347\307\154\375\233\360\041\274\213\074\122\077\247\130\215\276\320\372\224\165\351\066\276\077\076\143\306\214\103\113\226\134\035\254\131\363\340\117\137\172\361\225\077\276\360\374\363\232\253\065\007\217\112\023\364\242\271\241\121\352\061\232\240\311\255\307\352\244\276\246\106\016\124\355\227\355\340\347\327\236\172\372\277\356\273\357\213\157\056\136\174\225\167\326\131\147\125\142\276\107\055\266\025\266\167\271\300\152\375\344\123\336\053\377\060\376\106\237\022\323\151\126\217\056\262\153\354\345\366\231\346\135\264\157\342\304\111\333\346\316\235\173\174\341\302\371\351\045\127\135\125\276\371\206\325\157\334\163\327\075\077\274\367\276\373\176\162\317\335\167\377\360\346\325\253\337",
    (unsigned char *)"\270\146\351\322\023\013\056\276\070\065\173\366\354\372\063\316\230\260\031\374\377\212\325\223\325\166\276\053\254\057\077\152\357\167\306\007\310\275\017\362\376\374\164\253\111\363\254\056\215\374\277\207\225\326\326\333\354\376\330\375\334\343\144\274\355\173\137\137\262\375\327\155\043\173\331\366\272\053\355\263\337\171\226\057\323\254\117\077\314\377\023\360\177\301\172\206\345\360\014\353\363\363\154\237\164\251\355\361\257\264\132\265\324\216\153\354\373\230\213\355\176\304\042\173\376\171\326\137\063\054\047\047\234\362\177\000\336\067\266\377\006\061\341\157\164"    };
  glsInlineImage GLStudio_CommsPanelClass::image_data_1(57,57,4,6408,GLS_CODEC_LZ77,1709233600ul,false, 6865,0,240, GLStudio_CommsPanelClass::rgb_data_1, NULL);

#ifdef GLS_CREATEOBJECTS_OPTIMIZE
#ifdef WIN32
#pragma optimize("", on)
#endif
#endif

void GLStudio_CommsPanelClass::CreateObjects(void)
{
    const unsigned int frameAvailableAttributes = 4294967295;

    // Instance all fonts referenced by text objects in this class
    GlsArialRegular16::Instance();

    objects->InitialGroupCount(27);
    // Initialization code for GLPolygon commsPanel
    commsPanel = new GLPolygon();
    commsPanel->VaSetVertices(4,
        255,255,255,255,    0.000000f,    0.000000f,    0.000000f,
        255,255,255,255,  265.000000f,    0.000000f,    0.000000f,
        255,255,255,255,  265.000000f,  497.682922f,    0.000000f,
        255,255,255,255,    0.000000f,  497.682922f,    0.000000f);

    commsPanel->VaSetTexCoords(4,
            0.000000f,    0.000000f,    0.000000f,
            1.000000f,    0.000000f,    0.000000f,
            1.000000f,    1.000000f,    0.000000f,
            0.000000f,    1.000000f,    0.000000f);

    commsPanel->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    commsPanel->SetAvailableAttributes(frameAvailableAttributes);
    commsPanel->Set(
        GLS_INSTANCE_NAME,           "commsPanel",
        GLS_LOCATION,                0.999999940f, 1.317088842f, 0.000000000f,
        GLS_TEXTURE_INDEX,           0,
        GLS_TEXTURE_REPEAT,          FALSE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_LIGHTING_ENABLED,        0,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          265.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 497.682922363f, 0.000000000f,
                                     265.000000000f, 497.682922363f, 0.000000000f,
        NULL);

    DisplayFrame::InsertObject(commsPanel,true,false);

    // Initialization code for GlsPushButton pushButton1_2
    pushButton1_2 = new GlsPushButton();
    // Initialization code generated by DisplayObject class
    pushButton1_2->SetAvailableAttributes(frameAvailableAttributes);
    pushButton1_2->Set(
        GLS_INSTANCE_NAME,           "pushButton1_2",
        GLS_LOCATION,                225.500000000f, 409.500000000f, 0.000000000f,
        GLS_TEXTURE_POINTS,          17.500000000f, -17.500000000f, 0.000000000f,
                                     -17.500000000f, -17.500000000f, 0.000000000f,
                                     -17.500000000f, 17.500000000f, 0.000000000f,
                                     17.500000000f, 17.500000000f, 0.000000000f,
        NULL);

    pushButton1_2->PerformGroupCullCheck(0);
    pushButton1_2->CullTestChildren(1);
    pushButton1_2->InitialGroupCount(2);
    // Initialization code for GLPolygon btn1_2
    btn1_2 = new GLPolygon();
    btn1_2->VaSetVertices(4,
        255,255,255,255,    0.000000f,    0.000001f,    0.000000f,
        255,255,255,255,   35.000000f,    0.000001f,    0.000000f,
        255,255,255,255,   35.000000f,   35.000000f,    0.000000f,
        255,255,255,255,    0.000000f,   35.000000f,    0.000000f);

    btn1_2->VaSetTexCoords(4,
            0.000000f,    0.000000f,    0.000000f,
            1.000000f,    0.000000f,    0.000000f,
            1.000000f,    1.000000f,    0.000000f,
            0.000000f,    1.000000f,    0.000000f);

    btn1_2->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    btn1_2->SetAvailableAttributes(frameAvailableAttributes);
    btn1_2->Set(
        GLS_INSTANCE_NAME,           "btn1_2",
        GLS_LOCATION,                208.000000000f, 392.000000000f, 0.000000000f,
        GLS_TEXTURE_INDEX,           1,
        GLS_TEXTURE_REPEAT,          FALSE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_LIGHTING_ENABLED,        0,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          35.000000000f, 0.000001013f, 0.000000000f,
                                     0.000000000f, 0.000001013f, 0.000000000f,
                                     0.000000000f, 35.000000000f, 0.000000000f,
                                     35.000000000f, 35.000000000f, 0.000000000f,
        NULL);

    pushButton1_2->Group::InsertObject(btn1_2,true,false);
    pushButton1_2->CalculateBoundingBox();
    // Specific Button Initialization code pushButton1_2
    pushButton1_2->Set(
        GLS_GLSBUTTON_TOGGLE, 0,
        GLS_GLSBUTTON_WHICH_OBJ_POS_UP, 0,
        GLS_GLSBUTTON_WHICH_OBJ_POS_DOWN, 0,
        GLS_GLSBUTTON_STATE, 0,
        GLS_GLSBUTTON_EMIT_STATE_CHANGE_EVENT, 1,
		NULL);
    DisplayFrame::InsertObject(pushButton1_2,true,false);

    // Initialization code for GlsKnob knob1Knob
    knob1Knob = new GlsKnob();
    // Initialization code generated by DisplayObject class
    knob1Knob->SetAvailableAttributes(frameAvailableAttributes);
    knob1Knob->Set(
        GLS_INSTANCE_NAME,           "knob1Knob",
        GLS_LOCATION,                215.500000000f, 418.500000000f, 0.000000000f,
        GLS_TEXTURE_POINTS,          32.500000000f, -32.500000000f, 0.000000000f,
                                     -32.500000000f, -32.500000000f, 0.000000000f,
                                     -32.500000000f, 32.500000000f, 0.000000000f,
                                     32.500000000f, 32.500000000f, 0.000000000f,
        NULL);

    knob1Knob->PerformGroupCullCheck(0);
    knob1Knob->CullTestChildren(1);
    knob1Knob->InitialGroupCount(2);
    // Initialization code for GLPolygon knob1
    knob1 = new GLPolygon();
    knob1->VaSetVertices(4,
        255,255,255,255,    0.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   65.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   65.000000f,   65.000000f,    0.000000f,
        255,255,255,255,    0.000000f,   65.000000f,    0.000000f);

    knob1->VaSetTexCoords(4,
            0.000000f,    0.000000f,    0.000000f,
            1.000000f,    0.000000f,    0.000000f,
            1.000000f,    1.000000f,    0.000000f,
            0.000000f,    1.000000f,    0.000000f);

    knob1->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    knob1->SetAvailableAttributes(frameAvailableAttributes);
    knob1->Set(
        GLS_INSTANCE_NAME,           "knob1",
        GLS_LOCATION,                183.000000000f, 386.000000000f, 0.000000000f,
        GLS_ROTATION_POINT,          32.500000000f,32.500000000f,0.000000000f,
        GLS_TEXTURE_INDEX,           1,
        GLS_TEXTURE_REPEAT,          FALSE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_LIGHTING_ENABLED,        0,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          65.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 65.000000000f, 0.000000000f,
                                     65.000000000f, 65.000000000f, 0.000000000f,
        NULL);

    knob1Knob->Group::InsertObject(knob1,true,false);
    knob1Knob->CalculateBoundingBox();
    // Specific Knob Initialization code knob1Knob
    knob1Knob->Set(
        GLS_GLSKNOB_ANGLERANGE, 360.000000000,
        GLS_GLSKNOB_CONTINUOUS, 0,
        GLS_GLSKNOB_POSITIONVAL, 0.000000000,
        GLS_GLSKNOB_WHICHOBJECT, 0,
        GLS_GLSKNOB_STARTANGLE, 0.000000000,
        GLS_GLSKNOB_SHOWDETENTSONLY, 0,
        GLS_GLSKNOB_CLICKSELECTSDETENT, 0,
        GLS_GLSKNOB_EMITDETENTVALEVENT, 1,
        GLS_GLSKNOB_EMITPOSITIONVALEVENT, 1,
        GLS_GLSKNOB_EMITLIMITEVENT, 1,
        GLS_GLSKNOB_EMITRELEASEEVENT, 1,

        NULL );
    DisplayFrame::InsertObject(knob1Knob,true,false);

    // Initialization code for GlsKnob knob2Knob
    knob2Knob = new GlsKnob();
    // Initialization code generated by DisplayObject class
    knob2Knob->SetAvailableAttributes(frameAvailableAttributes);
    knob2Knob->Set(
        GLS_INSTANCE_NAME,           "knob2Knob",
        GLS_LOCATION,                215.500000000f, 303.500000000f, 0.000000000f,
        GLS_TEXTURE_POINTS,          32.500000000f, -32.500000000f, 0.000000000f,
                                     -32.500000000f, -32.500000000f, 0.000000000f,
                                     -32.500000000f, 32.500000000f, 0.000000000f,
                                     32.500000000f, 32.500000000f, 0.000000000f,
        NULL);

    knob2Knob->PerformGroupCullCheck(0);
    knob2Knob->CullTestChildren(1);
    knob2Knob->InitialGroupCount(2);
    // Initialization code for GLPolygon knob2
    knob2 = new GLPolygon();
    knob2->VaSetVertices(4,
        255,255,255,255,    0.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   65.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   65.000000f,   65.000000f,    0.000000f,
        255,255,255,255,    0.000000f,   65.000000f,    0.000000f);

    knob2->VaSetTexCoords(4,
            0.000000f,    0.000000f,    0.000000f,
            1.000000f,    0.000000f,    0.000000f,
            1.000000f,    1.000000f,    0.000000f,
            0.000000f,    1.000000f,    0.000000f);

    knob2->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    knob2->SetAvailableAttributes(frameAvailableAttributes);
    knob2->Set(
        GLS_INSTANCE_NAME,           "knob2",
        GLS_LOCATION,                183.000000000f, 271.000000000f, 0.000000000f,
        GLS_ROTATION_POINT,          32.500000000f,32.500000000f,0.000000000f,
        GLS_TEXTURE_INDEX,           1,
        GLS_TEXTURE_REPEAT,          FALSE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_LIGHTING_ENABLED,        0,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          65.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 65.000000000f, 0.000000000f,
                                     65.000000000f, 65.000000000f, 0.000000000f,
        NULL);

    knob2Knob->Group::InsertObject(knob2,true,false);
    knob2Knob->CalculateBoundingBox();
    // Specific Knob Initialization code knob2Knob
    knob2Knob->Set(
        GLS_GLSKNOB_ANGLERANGE, 270.000000000,
        GLS_GLSKNOB_CONTINUOUS, 0,
        GLS_GLSKNOB_POSITIONVAL, 0.000000000,
        GLS_GLSKNOB_WHICHOBJECT, 0,
        GLS_GLSKNOB_STARTANGLE, 0.000000000,
        GLS_GLSKNOB_SHOWDETENTSONLY, 0,
        GLS_GLSKNOB_CLICKSELECTSDETENT, 0,
        GLS_GLSKNOB_EMITDETENTVALEVENT, 1,
        GLS_GLSKNOB_EMITPOSITIONVALEVENT, 1,
        GLS_GLSKNOB_EMITLIMITEVENT, 1,
        GLS_GLSKNOB_EMITRELEASEEVENT, 1,

        NULL );
    DisplayFrame::InsertObject(knob2Knob,true,false);

    // Initialization code for GlsKnob knob3Knob
    knob3Knob = new GlsKnob();
    // Initialization code generated by DisplayObject class
    knob3Knob->SetAvailableAttributes(frameAvailableAttributes);
    knob3Knob->Set(
        GLS_INSTANCE_NAME,           "knob3Knob",
        GLS_LOCATION,                215.500000000f, 189.500000000f, 0.000000000f,
        GLS_TEXTURE_POINTS,          32.500000000f, -32.500000000f, 0.000000000f,
                                     -32.500000000f, -32.500000000f, 0.000000000f,
                                     -32.500000000f, 32.500000000f, 0.000000000f,
                                     32.500000000f, 32.500000000f, 0.000000000f,
        NULL);

    knob3Knob->PerformGroupCullCheck(0);
    knob3Knob->CullTestChildren(1);
    knob3Knob->InitialGroupCount(2);
    // Initialization code for GLPolygon knob3
    knob3 = new GLPolygon();
    knob3->VaSetVertices(4,
        255,255,255,255,    0.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   65.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   65.000000f,   65.000000f,    0.000000f,
        255,255,255,255,    0.000000f,   65.000000f,    0.000000f);

    knob3->VaSetTexCoords(4,
            0.000000f,    0.000000f,    0.000000f,
            1.000000f,    0.000000f,    0.000000f,
            1.000000f,    1.000000f,    0.000000f,
            0.000000f,    1.000000f,    0.000000f);

    knob3->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    knob3->SetAvailableAttributes(frameAvailableAttributes);
    knob3->Set(
        GLS_INSTANCE_NAME,           "knob3",
        GLS_LOCATION,                183.000000000f, 157.000000000f, 0.000000000f,
        GLS_ROTATION_POINT,          32.500000000f,32.500000000f,0.000000000f,
        GLS_TEXTURE_INDEX,           1,
        GLS_TEXTURE_REPEAT,          FALSE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_LIGHTING_ENABLED,        0,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          65.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 65.000000000f, 0.000000000f,
                                     65.000000000f, 65.000000000f, 0.000000000f,
        NULL);

    knob3Knob->Group::InsertObject(knob3,true,false);
    knob3Knob->CalculateBoundingBox();
    // Specific Knob Initialization code knob3Knob
    knob3Knob->Set(
        GLS_GLSKNOB_ANGLERANGE, 270.000000000,
        GLS_GLSKNOB_CONTINUOUS, 0,
        GLS_GLSKNOB_POSITIONVAL, 0.000000000,
        GLS_GLSKNOB_WHICHOBJECT, 0,
        GLS_GLSKNOB_STARTANGLE, 0.000000000,
        GLS_GLSKNOB_SHOWDETENTSONLY, 0,
        GLS_GLSKNOB_CLICKSELECTSDETENT, 0,
        GLS_GLSKNOB_EMITDETENTVALEVENT, 1,
        GLS_GLSKNOB_EMITPOSITIONVALEVENT, 1,
        GLS_GLSKNOB_EMITLIMITEVENT, 1,
        GLS_GLSKNOB_EMITRELEASEEVENT, 1,

        NULL );
    DisplayFrame::InsertObject(knob3Knob,true,false);

    // Initialization code for GlsKnob knob4Knob
    knob4Knob = new GlsKnob();
    // Initialization code generated by DisplayObject class
    knob4Knob->SetAvailableAttributes(frameAvailableAttributes);
    knob4Knob->Set(
        GLS_INSTANCE_NAME,           "knob4Knob",
        GLS_LOCATION,                215.500000000f, 74.500000000f, 0.000000000f,
        GLS_TEXTURE_POINTS,          32.500000000f, -32.500000000f, 0.000000000f,
                                     -32.500000000f, -32.500000000f, 0.000000000f,
                                     -32.500000000f, 32.500000000f, 0.000000000f,
                                     32.500000000f, 32.500000000f, 0.000000000f,
        NULL);

    knob4Knob->PerformGroupCullCheck(0);
    knob4Knob->CullTestChildren(1);
    knob4Knob->InitialGroupCount(2);
    // Initialization code for GLPolygon knob4
    knob4 = new GLPolygon();
    knob4->VaSetVertices(4,
        255,255,255,255,    0.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   65.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   65.000000f,   65.000000f,    0.000000f,
        255,255,255,255,    0.000000f,   65.000000f,    0.000000f);

    knob4->VaSetTexCoords(4,
            0.000000f,    0.000000f,    0.000000f,
            1.000000f,    0.000000f,    0.000000f,
            1.000000f,    1.000000f,    0.000000f,
            0.000000f,    1.000000f,    0.000000f);

    knob4->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    knob4->SetAvailableAttributes(frameAvailableAttributes);
    knob4->Set(
        GLS_INSTANCE_NAME,           "knob4",
        GLS_LOCATION,                183.000000000f, 42.000000000f, 0.000000000f,
        GLS_ROTATION_POINT,          32.500000000f,32.500000000f,0.000000000f,
        GLS_TEXTURE_INDEX,           1,
        GLS_TEXTURE_REPEAT,          FALSE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_LIGHTING_ENABLED,        0,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          65.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 65.000000000f, 0.000000000f,
                                     65.000000000f, 65.000000000f, 0.000000000f,
        NULL);

    knob4Knob->Group::InsertObject(knob4,true,false);
    knob4Knob->CalculateBoundingBox();
    // Specific Knob Initialization code knob4Knob
    knob4Knob->Set(
        GLS_GLSKNOB_ANGLERANGE, 270.000000000,
        GLS_GLSKNOB_CONTINUOUS, 0,
        GLS_GLSKNOB_POSITIONVAL, 0.000000000,
        GLS_GLSKNOB_WHICHOBJECT, 0,
        GLS_GLSKNOB_STARTANGLE, 0.000000000,
        GLS_GLSKNOB_SHOWDETENTSONLY, 0,
        GLS_GLSKNOB_CLICKSELECTSDETENT, 0,
        GLS_GLSKNOB_EMITDETENTVALEVENT, 1,
        GLS_GLSKNOB_EMITPOSITIONVALEVENT, 1,
        GLS_GLSKNOB_EMITLIMITEVENT, 1,
        GLS_GLSKNOB_EMITRELEASEEVENT, 1,

        NULL );
    DisplayFrame::InsertObject(knob4Knob,true,false);

    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text1
    // Base class initializers will be set up first.
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text1
    text1 = new GlsTextBox();
    text1->VaSetVertices(4,
        255,255,255,255,    0.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   80.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   80.000000f,   25.000000f,   -0.000000f,
        255,255,255,255,    0.000000f,   25.000000f,   -0.000000f);

    // Initialization code generated by DisplayObject class
    text1->SetAvailableAttributes(frameAvailableAttributes);
    text1->Set(
        GLS_INSTANCE_NAME,           "text1",
        GLS_LOCATION,                43.333332062f, 440.000000000f, 0.000000000f,
        GLS_TEXTURE_REPEAT,          TRUE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_POINTS,
        GLS_LIGHTING_ENABLED,        0,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          0.000001073f, 0.000000000f, 0.000000000f,
                                     0.000001073f, 0.000000000f, 0.000000000f,
                                     0.000001073f, 0.000000000f, 0.000000000f,
                                     0.000001073f, 0.000000000f, 0.000000000f,
        NULL);

    // Set GlsTextBox specific initializers now
    text1->Set(
        GLS_TEXT_BORDER, 0.000000000f,
        GLS_TEXT_CELL_HEIGHT, 23.000000000f,
        GLS_TEXT_CELL_WIDTH, 20.000000000f,
        GLS_TEXT_CONSTRAIN_CELL_RATIO, true,
        GLS_TEXT_CONTROL_CELL_SIZE, false,
        GLS_TEXT_FONT, "Arial", "Regular", 16,
        GLS_TEXT_LINESPACING, 1.000000000f,
        GLS_TEXT_HALO, false, 0, 0, 0, 0,
        GLS_TEXT_LOCK_CELL_SIZE, true,
        GLS_TEXT_JUSTIFY, 1,
        GLS_TEXT_SHADOW, false, 0.129999995f, -0.129999995f, 128, 128, 128, 255,
        GLS_TEXT_STRING,
            "152.12",
        GLS_TEXT_UPPERCASE, false,
        GLS_TEXT_WRAP, true,
        NULL);

    // Call initialize on the object after the Set methods so that the grid
    // will be sized properly before any row,column specific (individual characters) calls are made.
    text1->Initialize();
    text1->VerticalAlignment(GlsTextBox::ALIGN_CENTER);
    text1->LeftToRight(true);

   // Call GlsTextBox methods to set up individual character attributes.
    text1->Baseline(0.000000000f);
    text1->BgColor(GlsColor(255,255,255,0));
    text1->TextColor(GlsColor(255,255,255,255));
    text1->CharScaling(0.980000079f);
    text1->CharSpacing(1.000000000f);
    text1->FauxBold(false);
    text1->Inverse(false);
    text1->StrikeThru(false);
    text1->Underline(false);

    // Call initialize on the object after all character attribute methods
    // in case character settings affect the extents of the grid.
    text1->Initialize();

    // End of initialization code for GlsTextBox text1
    //--------------------------------------------------------------------

    DisplayFrame::InsertObject(text1,true,false);

    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox indicator1
    // Base class initializers will be set up first.
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox indicator1
    indicator1 = new GlsTextBox();
    indicator1->VaSetVertices(4,
        255,255,255,255,    0.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   23.333328f,    0.000000f,    0.000000f,
        255,255,255,255,   23.333328f,   25.000000f,   -0.000000f,
        255,255,255,255,    0.000000f,   25.000000f,   -0.000000f);

    // Initialization code generated by DisplayObject class
    indicator1->SetAvailableAttributes(frameAvailableAttributes);
    indicator1->Set(
        GLS_INSTANCE_NAME,           "indicator1",
        GLS_LOCATION,                130.000000000f, 440.000000000f, 0.000000000f,
        GLS_TEXTURE_REPEAT,          TRUE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_POINTS,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          0.000000790f, 0.000000000f, 0.000000000f,
                                     0.000000790f, 0.000000000f, 0.000000000f,
                                     0.000000790f, 0.000000000f, 0.000000000f,
                                     0.000000790f, 0.000000000f, 0.000000000f,
        NULL);

    // Set GlsTextBox specific initializers now
    indicator1->Set(
        GLS_TEXT_BORDER, 0.000000000f,
        GLS_TEXT_CELL_HEIGHT, 23.000000000f,
        GLS_TEXT_CELL_WIDTH, 20.000000000f,
        GLS_TEXT_CONSTRAIN_CELL_RATIO, true,
        GLS_TEXT_CONTROL_CELL_SIZE, false,
        GLS_TEXT_FONT, "Arial", "Regular", 16,
        GLS_TEXT_LINESPACING, 1.000000000f,
        GLS_TEXT_HALO, false, 0, 0, 0, 0,
        GLS_TEXT_LOCK_CELL_SIZE, true,
        GLS_TEXT_JUSTIFY, 1,
        GLS_TEXT_SHADOW, false, 0.129999995f, -0.129999995f, 128, 128, 128, 255,
        GLS_TEXT_STRING,
            "<",
        GLS_TEXT_UPPERCASE, false,
        GLS_TEXT_WRAP, true,
        NULL);

    // Call initialize on the object after the Set methods so that the grid
    // will be sized properly before any row,column specific (individual characters) calls are made.
    indicator1->Initialize();
    indicator1->VerticalAlignment(GlsTextBox::ALIGN_CENTER);
    indicator1->LeftToRight(true);

   // Call GlsTextBox methods to set up individual character attributes.
    indicator1->Baseline(0.000000000f);
    indicator1->BgColor(GlsColor(255,255,255,0));
    indicator1->TextColor(GlsColor(255,255,255,255));
    indicator1->CharScaling(0.980000079f);
    indicator1->CharSpacing(1.000000000f);
    indicator1->FauxBold(false);
    indicator1->Inverse(false);
    indicator1->StrikeThru(false);
    indicator1->Underline(false);

    // Call initialize on the object after all character attribute methods
    // in case character settings affect the extents of the grid.
    indicator1->Initialize();

    // End of initialization code for GlsTextBox indicator1
    //--------------------------------------------------------------------

    DisplayFrame::InsertObject(indicator1,true,false);

    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox indicator2
    // Base class initializers will be set up first.
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox indicator2
    indicator2 = new GlsTextBox();
    indicator2->VaSetVertices(4,
        255,255,255,255,    0.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   23.333328f,    0.000000f,    0.000000f,
        255,255,255,255,   23.333328f,   25.000000f,   -0.000000f,
        255,255,255,255,    0.000000f,   25.000000f,   -0.000000f);

    // Initialization code generated by DisplayObject class
    indicator2->SetAvailableAttributes(frameAvailableAttributes);
    indicator2->Set(
        GLS_INSTANCE_NAME,           "indicator2",
        GLS_LOCATION,                130.000000000f, 380.000000000f, 0.000000000f,
        GLS_TEXTURE_REPEAT,          TRUE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_POINTS,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          0.000000790f, 0.000000000f, 0.000000000f,
                                     0.000000790f, 0.000000000f, 0.000000000f,
                                     0.000000790f, 0.000000000f, 0.000000000f,
                                     0.000000790f, 0.000000000f, 0.000000000f,
        NULL);

    // Set GlsTextBox specific initializers now
    indicator2->Set(
        GLS_TEXT_BORDER, 0.000000000f,
        GLS_TEXT_CELL_HEIGHT, 23.000000000f,
        GLS_TEXT_CELL_WIDTH, 20.000000000f,
        GLS_TEXT_CONSTRAIN_CELL_RATIO, true,
        GLS_TEXT_CONTROL_CELL_SIZE, false,
        GLS_TEXT_FONT, "Arial", "Regular", 16,
        GLS_TEXT_LINESPACING, 1.000000000f,
        GLS_TEXT_HALO, false, 0, 0, 0, 0,
        GLS_TEXT_LOCK_CELL_SIZE, true,
        GLS_TEXT_JUSTIFY, 1,
        GLS_TEXT_SHADOW, false, 0.129999995f, -0.129999995f, 128, 128, 128, 255,
        GLS_TEXT_STRING,
            "<",
        GLS_TEXT_UPPERCASE, false,
        GLS_TEXT_WRAP, true,
        NULL);

    // Call initialize on the object after the Set methods so that the grid
    // will be sized properly before any row,column specific (individual characters) calls are made.
    indicator2->Initialize();
    indicator2->VerticalAlignment(GlsTextBox::ALIGN_CENTER);
    indicator2->LeftToRight(true);

   // Call GlsTextBox methods to set up individual character attributes.
    indicator2->Baseline(0.000000000f);
    indicator2->BgColor(GlsColor(255,255,255,0));
    indicator2->TextColor(GlsColor(255,255,255,255));
    indicator2->CharScaling(0.980000079f);
    indicator2->CharSpacing(1.000000000f);
    indicator2->FauxBold(false);
    indicator2->Inverse(false);
    indicator2->StrikeThru(false);
    indicator2->Underline(false);

    // Call initialize on the object after all character attribute methods
    // in case character settings affect the extents of the grid.
    indicator2->Initialize();

    // End of initialization code for GlsTextBox indicator2
    //--------------------------------------------------------------------

    DisplayFrame::InsertObject(indicator2,true,false);

    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox indicator3
    // Base class initializers will be set up first.
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox indicator3
    indicator3 = new GlsTextBox();
    indicator3->VaSetVertices(4,
        255,255,255,255,    0.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   23.333328f,    0.000000f,    0.000000f,
        255,255,255,255,   23.333328f,   25.000000f,   -0.000000f,
        255,255,255,255,    0.000000f,   25.000000f,   -0.000000f);

    // Initialization code generated by DisplayObject class
    indicator3->SetAvailableAttributes(frameAvailableAttributes);
    indicator3->Set(
        GLS_INSTANCE_NAME,           "indicator3",
        GLS_LOCATION,                130.000000000f, 325.000000000f, 0.000000000f,
        GLS_TEXTURE_REPEAT,          TRUE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_POINTS,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          0.000000790f, 0.000000000f, 0.000000000f,
                                     0.000000790f, 0.000000000f, 0.000000000f,
                                     0.000000790f, 0.000000000f, 0.000000000f,
                                     0.000000790f, 0.000000000f, 0.000000000f,
        NULL);

    // Set GlsTextBox specific initializers now
    indicator3->Set(
        GLS_TEXT_BORDER, 0.000000000f,
        GLS_TEXT_CELL_HEIGHT, 23.000000000f,
        GLS_TEXT_CELL_WIDTH, 20.000000000f,
        GLS_TEXT_CONSTRAIN_CELL_RATIO, true,
        GLS_TEXT_CONTROL_CELL_SIZE, false,
        GLS_TEXT_FONT, "Arial", "Regular", 16,
        GLS_TEXT_LINESPACING, 1.000000000f,
        GLS_TEXT_HALO, false, 0, 0, 0, 0,
        GLS_TEXT_LOCK_CELL_SIZE, true,
        GLS_TEXT_JUSTIFY, 1,
        GLS_TEXT_SHADOW, false, 0.129999995f, -0.129999995f, 128, 128, 128, 255,
        GLS_TEXT_STRING,
            "<",
        GLS_TEXT_UPPERCASE, false,
        GLS_TEXT_WRAP, true,
        NULL);

    // Call initialize on the object after the Set methods so that the grid
    // will be sized properly before any row,column specific (individual characters) calls are made.
    indicator3->Initialize();
    indicator3->VerticalAlignment(GlsTextBox::ALIGN_CENTER);
    indicator3->LeftToRight(true);

   // Call GlsTextBox methods to set up individual character attributes.
    indicator3->Baseline(0.000000000f);
    indicator3->BgColor(GlsColor(255,255,255,0));
    indicator3->TextColor(GlsColor(255,255,255,255));
    indicator3->CharScaling(0.980000079f);
    indicator3->CharSpacing(1.000000000f);
    indicator3->FauxBold(false);
    indicator3->Inverse(false);
    indicator3->StrikeThru(false);
    indicator3->Underline(false);

    // Call initialize on the object after all character attribute methods
    // in case character settings affect the extents of the grid.
    indicator3->Initialize();

    // End of initialization code for GlsTextBox indicator3
    //--------------------------------------------------------------------

    DisplayFrame::InsertObject(indicator3,true,false);

    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox indicator4
    // Base class initializers will be set up first.
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox indicator4
    indicator4 = new GlsTextBox();
    indicator4->VaSetVertices(4,
        255,255,255,255,    0.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   23.333328f,    0.000000f,    0.000000f,
        255,255,255,255,   23.333328f,   25.000000f,   -0.000000f,
        255,255,255,255,    0.000000f,   25.000000f,   -0.000000f);

    // Initialization code generated by DisplayObject class
    indicator4->SetAvailableAttributes(frameAvailableAttributes);
    indicator4->Set(
        GLS_INSTANCE_NAME,           "indicator4",
        GLS_LOCATION,                130.000000000f, 270.000000000f, 0.000000000f,
        GLS_TEXTURE_REPEAT,          TRUE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_POINTS,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          0.000000790f, 0.000000000f, 0.000000000f,
                                     0.000000790f, 0.000000000f, 0.000000000f,
                                     0.000000790f, 0.000000000f, 0.000000000f,
                                     0.000000790f, 0.000000000f, 0.000000000f,
        NULL);

    // Set GlsTextBox specific initializers now
    indicator4->Set(
        GLS_TEXT_BORDER, 0.000000000f,
        GLS_TEXT_CELL_HEIGHT, 23.000000000f,
        GLS_TEXT_CELL_WIDTH, 20.000000000f,
        GLS_TEXT_CONSTRAIN_CELL_RATIO, true,
        GLS_TEXT_CONTROL_CELL_SIZE, false,
        GLS_TEXT_FONT, "Arial", "Regular", 16,
        GLS_TEXT_LINESPACING, 1.000000000f,
        GLS_TEXT_HALO, false, 0, 0, 0, 0,
        GLS_TEXT_LOCK_CELL_SIZE, true,
        GLS_TEXT_JUSTIFY, 1,
        GLS_TEXT_SHADOW, false, 0.129999995f, -0.129999995f, 128, 128, 128, 255,
        GLS_TEXT_STRING,
            "<",
        GLS_TEXT_UPPERCASE, false,
        GLS_TEXT_WRAP, true,
        NULL);

    // Call initialize on the object after the Set methods so that the grid
    // will be sized properly before any row,column specific (individual characters) calls are made.
    indicator4->Initialize();
    indicator4->VerticalAlignment(GlsTextBox::ALIGN_CENTER);
    indicator4->LeftToRight(true);

   // Call GlsTextBox methods to set up individual character attributes.
    indicator4->Baseline(0.000000000f);
    indicator4->BgColor(GlsColor(255,255,255,0));
    indicator4->TextColor(GlsColor(255,255,255,255));
    indicator4->CharScaling(0.980000079f);
    indicator4->CharSpacing(1.000000000f);
    indicator4->FauxBold(false);
    indicator4->Inverse(false);
    indicator4->StrikeThru(false);
    indicator4->Underline(false);

    // Call initialize on the object after all character attribute methods
    // in case character settings affect the extents of the grid.
    indicator4->Initialize();

    // End of initialization code for GlsTextBox indicator4
    //--------------------------------------------------------------------

    DisplayFrame::InsertObject(indicator4,true,false);

    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox indicator5
    // Base class initializers will be set up first.
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox indicator5
    indicator5 = new GlsTextBox();
    indicator5->VaSetVertices(4,
        255,255,255,255,    0.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   10.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   10.000000f,   75.000000f,   -0.000000f,
        255,255,255,255,    0.000000f,   75.000000f,   -0.000000f);

    // Initialization code generated by DisplayObject class
    indicator5->SetAvailableAttributes(frameAvailableAttributes);
    indicator5->Set(
        GLS_INSTANCE_NAME,           "indicator5",
        GLS_LOCATION,                139.285720825f, 185.000000000f, 0.000000000f,
        GLS_TEXTURE_REPEAT,          TRUE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_POINTS,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          -0.000005264f, 0.000000000f, 0.000000000f,
                                     -0.000005264f, 0.000000000f, 0.000000000f,
                                     -0.000005264f, 0.000000000f, 0.000000000f,
                                     -0.000005264f, 0.000000000f, 0.000000000f,
        NULL);

    // Set GlsTextBox specific initializers now
    indicator5->Set(
        GLS_TEXT_BORDER, 0.000000000f,
        GLS_TEXT_CELL_HEIGHT, 23.000000000f,
        GLS_TEXT_CELL_WIDTH, 20.000000000f,
        GLS_TEXT_CONSTRAIN_CELL_RATIO, true,
        GLS_TEXT_CONTROL_CELL_SIZE, false,
        GLS_TEXT_FONT, "Arial", "Regular", 16,
        GLS_TEXT_LINESPACING, 1.000000000f,
        GLS_TEXT_HALO, false, 0, 0, 0, 0,
        GLS_TEXT_LOCK_CELL_SIZE, true,
        GLS_TEXT_JUSTIFY, 1,
        GLS_TEXT_SHADOW, false, 0.129999995f, -0.129999995f, 128, 128, 128, 255,
        GLS_TEXT_STRING,
            "<",
        GLS_TEXT_UPPERCASE, false,
        GLS_TEXT_WRAP, true,
        NULL);

    // Call initialize on the object after the Set methods so that the grid
    // will be sized properly before any row,column specific (individual characters) calls are made.
    indicator5->Initialize();
    indicator5->VerticalAlignment(GlsTextBox::ALIGN_CENTER);
    indicator5->LeftToRight(true);

   // Call GlsTextBox methods to set up individual character attributes.
    indicator5->Baseline(0.000000000f);
    indicator5->BgColor(GlsColor(255,255,255,0));
    indicator5->TextColor(GlsColor(255,255,255,255));
    indicator5->CharScaling(0.980000079f);
    indicator5->CharSpacing(1.000000000f);
    indicator5->FauxBold(false);
    indicator5->Inverse(false);
    indicator5->StrikeThru(false);
    indicator5->Underline(false);

    // Call initialize on the object after all character attribute methods
    // in case character settings affect the extents of the grid.
    indicator5->Initialize();

    // End of initialization code for GlsTextBox indicator5
    //--------------------------------------------------------------------

    DisplayFrame::InsertObject(indicator5,true,false);

    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox indicator6
    // Base class initializers will be set up first.
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox indicator6
    indicator6 = new GlsTextBox();
    indicator6->VaSetVertices(4,
        255,255,255,255,    0.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   60.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   60.000000f,   25.000000f,   -0.000000f,
        255,255,255,255,    0.000000f,   25.000000f,   -0.000000f);

    // Initialization code generated by DisplayObject class
    indicator6->SetAvailableAttributes(frameAvailableAttributes);
    indicator6->Set(
        GLS_INSTANCE_NAME,           "indicator6",
        GLS_LOCATION,                112.857147217f, 150.000000000f, 0.000000000f,
        GLS_TEXTURE_REPEAT,          TRUE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_POINTS,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          -0.000000115f, 0.000000000f, 0.000000000f,
                                     -0.000000115f, 0.000000000f, 0.000000000f,
                                     -0.000000115f, 0.000000000f, 0.000000000f,
                                     -0.000000115f, 0.000000000f, 0.000000000f,
        NULL);

    // Set GlsTextBox specific initializers now
    indicator6->Set(
        GLS_TEXT_BORDER, 0.000000000f,
        GLS_TEXT_CELL_HEIGHT, 23.000000000f,
        GLS_TEXT_CELL_WIDTH, 20.000000000f,
        GLS_TEXT_CONSTRAIN_CELL_RATIO, true,
        GLS_TEXT_CONTROL_CELL_SIZE, false,
        GLS_TEXT_FONT, "Arial", "Regular", 16,
        GLS_TEXT_LINESPACING, 1.000000000f,
        GLS_TEXT_HALO, false, 0, 0, 0, 0,
        GLS_TEXT_LOCK_CELL_SIZE, true,
        GLS_TEXT_JUSTIFY, 1,
        GLS_TEXT_SHADOW, false, 0.129999995f, -0.129999995f, 128, 128, 128, 255,
        GLS_TEXT_STRING,
            "<",
        GLS_TEXT_UPPERCASE, false,
        GLS_TEXT_WRAP, true,
        NULL);

    // Call initialize on the object after the Set methods so that the grid
    // will be sized properly before any row,column specific (individual characters) calls are made.
    indicator6->Initialize();
    indicator6->VerticalAlignment(GlsTextBox::ALIGN_CENTER);
    indicator6->LeftToRight(true);

   // Call GlsTextBox methods to set up individual character attributes.
    indicator6->Baseline(0.000000000f);
    indicator6->BgColor(GlsColor(255,255,255,0));
    indicator6->TextColor(GlsColor(255,255,255,255));
    indicator6->CharScaling(0.980000079f);
    indicator6->CharSpacing(1.000000000f);
    indicator6->FauxBold(false);
    indicator6->Inverse(false);
    indicator6->StrikeThru(false);
    indicator6->Underline(false);

    // Call initialize on the object after all character attribute methods
    // in case character settings affect the extents of the grid.
    indicator6->Initialize();

    // End of initialization code for GlsTextBox indicator6
    //--------------------------------------------------------------------

    DisplayFrame::InsertObject(indicator6,true,false);

    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox indicator7
    // Base class initializers will be set up first.
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox indicator7
    indicator7 = new GlsTextBox();
    indicator7->VaSetVertices(4,
        255,255,255,255,    0.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   23.333328f,    0.000000f,    0.000000f,
        255,255,255,255,   23.333328f,   25.000000f,   -0.000000f,
        255,255,255,255,    0.000000f,   25.000000f,   -0.000000f);

    // Initialization code generated by DisplayObject class
    indicator7->SetAvailableAttributes(frameAvailableAttributes);
    indicator7->Set(
        GLS_INSTANCE_NAME,           "indicator7",
        GLS_LOCATION,                130.000000000f, 95.000000000f, 0.000000000f,
        GLS_TEXTURE_REPEAT,          TRUE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_POINTS,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          0.000000790f, 0.000000000f, 0.000000000f,
                                     0.000000790f, 0.000000000f, 0.000000000f,
                                     0.000000790f, 0.000000000f, 0.000000000f,
                                     0.000000790f, 0.000000000f, 0.000000000f,
        NULL);

    // Set GlsTextBox specific initializers now
    indicator7->Set(
        GLS_TEXT_BORDER, 0.000000000f,
        GLS_TEXT_CELL_HEIGHT, 23.000000000f,
        GLS_TEXT_CELL_WIDTH, 20.000000000f,
        GLS_TEXT_CONSTRAIN_CELL_RATIO, true,
        GLS_TEXT_CONTROL_CELL_SIZE, false,
        GLS_TEXT_FONT, "Arial", "Regular", 16,
        GLS_TEXT_LINESPACING, 1.000000000f,
        GLS_TEXT_HALO, false, 0, 0, 0, 0,
        GLS_TEXT_LOCK_CELL_SIZE, true,
        GLS_TEXT_JUSTIFY, 1,
        GLS_TEXT_SHADOW, false, 0.129999995f, -0.129999995f, 128, 128, 128, 255,
        GLS_TEXT_STRING,
            "<",
        GLS_TEXT_UPPERCASE, false,
        GLS_TEXT_WRAP, true,
        NULL);

    // Call initialize on the object after the Set methods so that the grid
    // will be sized properly before any row,column specific (individual characters) calls are made.
    indicator7->Initialize();
    indicator7->VerticalAlignment(GlsTextBox::ALIGN_CENTER);
    indicator7->LeftToRight(true);

   // Call GlsTextBox methods to set up individual character attributes.
    indicator7->Baseline(0.000000000f);
    indicator7->BgColor(GlsColor(255,255,255,0));
    indicator7->TextColor(GlsColor(255,255,255,255));
    indicator7->CharScaling(0.980000079f);
    indicator7->CharSpacing(1.000000000f);
    indicator7->FauxBold(false);
    indicator7->Inverse(false);
    indicator7->StrikeThru(false);
    indicator7->Underline(false);

    // Call initialize on the object after all character attribute methods
    // in case character settings affect the extents of the grid.
    indicator7->Initialize();

    // End of initialization code for GlsTextBox indicator7
    //--------------------------------------------------------------------

    DisplayFrame::InsertObject(indicator7,true,false);

    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox indicator8
    // Base class initializers will be set up first.
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox indicator8
    indicator8 = new GlsTextBox();
    indicator8->VaSetVertices(4,
        255,255,255,255,    0.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   32.142864f,    0.000000f,    0.000000f,
        255,255,255,255,   32.142864f,   25.000000f,   -0.000000f,
        255,255,255,255,    0.000000f,   25.000000f,   -0.000000f);

    // Initialization code generated by DisplayObject class
    indicator8->SetAvailableAttributes(frameAvailableAttributes);
    indicator8->Set(
        GLS_INSTANCE_NAME,           "indicator8",
        GLS_LOCATION,                126.887756348f, 35.000000000f, 0.000000000f,
        GLS_TEXTURE_REPEAT,          TRUE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_POINTS,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          0.000002342f, 0.000000000f, 0.000000000f,
                                     0.000002342f, 0.000000000f, 0.000000000f,
                                     0.000002342f, 0.000000000f, 0.000000000f,
                                     0.000002342f, 0.000000000f, 0.000000000f,
        NULL);

    // Set GlsTextBox specific initializers now
    indicator8->Set(
        GLS_TEXT_BORDER, 0.000000000f,
        GLS_TEXT_CELL_HEIGHT, 23.000000000f,
        GLS_TEXT_CELL_WIDTH, 20.000000000f,
        GLS_TEXT_CONSTRAIN_CELL_RATIO, true,
        GLS_TEXT_CONTROL_CELL_SIZE, false,
        GLS_TEXT_FONT, "Arial", "Regular", 16,
        GLS_TEXT_LINESPACING, 1.000000000f,
        GLS_TEXT_HALO, false, 0, 0, 0, 0,
        GLS_TEXT_LOCK_CELL_SIZE, true,
        GLS_TEXT_JUSTIFY, 1,
        GLS_TEXT_SHADOW, false, 0.129999995f, -0.129999995f, 128, 128, 128, 255,
        GLS_TEXT_STRING,
            "<",
        GLS_TEXT_UPPERCASE, false,
        GLS_TEXT_WRAP, true,
        NULL);

    // Call initialize on the object after the Set methods so that the grid
    // will be sized properly before any row,column specific (individual characters) calls are made.
    indicator8->Initialize();
    indicator8->VerticalAlignment(GlsTextBox::ALIGN_CENTER);
    indicator8->LeftToRight(true);

   // Call GlsTextBox methods to set up individual character attributes.
    indicator8->Baseline(0.000000000f);
    indicator8->BgColor(GlsColor(255,255,255,0));
    indicator8->TextColor(GlsColor(255,255,255,255));
    indicator8->CharScaling(0.980000079f);
    indicator8->CharSpacing(1.000000000f);
    indicator8->FauxBold(false);
    indicator8->Inverse(false);
    indicator8->StrikeThru(false);
    indicator8->Underline(false);

    // Call initialize on the object after all character attribute methods
    // in case character settings affect the extents of the grid.
    indicator8->Initialize();

    // End of initialization code for GlsTextBox indicator8
    //--------------------------------------------------------------------

    DisplayFrame::InsertObject(indicator8,true,false);

    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text2
    // Base class initializers will be set up first.
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text2
    text2 = new GlsTextBox();
    text2->VaSetVertices(4,
        255,255,255,255,    0.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   80.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   80.000000f,   25.000000f,   -0.000000f,
        255,255,255,255,    0.000000f,   25.000000f,   -0.000000f);

    // Initialization code generated by DisplayObject class
    text2->SetAvailableAttributes(frameAvailableAttributes);
    text2->Set(
        GLS_INSTANCE_NAME,           "text2",
        GLS_LOCATION,                43.333332062f, 380.000000000f, 0.000000000f,
        GLS_TEXTURE_REPEAT,          TRUE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_POINTS,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          0.000001073f, 0.000000000f, 0.000000000f,
                                     0.000001073f, 0.000000000f, 0.000000000f,
                                     0.000001073f, 0.000000000f, 0.000000000f,
                                     0.000001073f, 0.000000000f, 0.000000000f,
        NULL);

    // Set GlsTextBox specific initializers now
    text2->Set(
        GLS_TEXT_BORDER, 0.000000000f,
        GLS_TEXT_CELL_HEIGHT, 23.000000000f,
        GLS_TEXT_CELL_WIDTH, 20.000000000f,
        GLS_TEXT_CONSTRAIN_CELL_RATIO, true,
        GLS_TEXT_CONTROL_CELL_SIZE, false,
        GLS_TEXT_FONT, "Arial", "Regular", 16,
        GLS_TEXT_LINESPACING, 1.000000000f,
        GLS_TEXT_HALO, false, 0, 0, 0, 0,
        GLS_TEXT_LOCK_CELL_SIZE, true,
        GLS_TEXT_JUSTIFY, 1,
        GLS_TEXT_SHADOW, false, 0.129999995f, -0.129999995f, 128, 128, 128, 255,
        GLS_TEXT_STRING,
            "152.12",
        GLS_TEXT_UPPERCASE, false,
        GLS_TEXT_WRAP, true,
        NULL);

    // Call initialize on the object after the Set methods so that the grid
    // will be sized properly before any row,column specific (individual characters) calls are made.
    text2->Initialize();
    text2->VerticalAlignment(GlsTextBox::ALIGN_CENTER);
    text2->LeftToRight(true);

   // Call GlsTextBox methods to set up individual character attributes.
    text2->Baseline(0.000000000f);
    text2->BgColor(GlsColor(255,255,255,0));
    text2->TextColor(GlsColor(255,255,255,255));
    text2->CharScaling(0.980000079f);
    text2->CharSpacing(1.000000000f);
    text2->FauxBold(false);
    text2->Inverse(false);
    text2->StrikeThru(false);
    text2->Underline(false);

    // Call initialize on the object after all character attribute methods
    // in case character settings affect the extents of the grid.
    text2->Initialize();

    // End of initialization code for GlsTextBox text2
    //--------------------------------------------------------------------

    DisplayFrame::InsertObject(text2,true,false);

    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text3
    // Base class initializers will be set up first.
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text3
    text3 = new GlsTextBox();
    text3->VaSetVertices(4,
        255,255,255,255,    0.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   80.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   80.000000f,   25.000000f,   -0.000000f,
        255,255,255,255,    0.000000f,   25.000000f,   -0.000000f);

    // Initialization code generated by DisplayObject class
    text3->SetAvailableAttributes(frameAvailableAttributes);
    text3->Set(
        GLS_INSTANCE_NAME,           "text3",
        GLS_LOCATION,                45.000000000f, 325.000000000f, 0.000000000f,
        GLS_TEXTURE_REPEAT,          TRUE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_POINTS,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
        NULL);

    // Set GlsTextBox specific initializers now
    text3->Set(
        GLS_TEXT_BORDER, 0.000000000f,
        GLS_TEXT_CELL_HEIGHT, 23.000000000f,
        GLS_TEXT_CELL_WIDTH, 20.000000000f,
        GLS_TEXT_CONSTRAIN_CELL_RATIO, true,
        GLS_TEXT_CONTROL_CELL_SIZE, false,
        GLS_TEXT_FONT, "Arial", "Regular", 16,
        GLS_TEXT_LINESPACING, 1.000000000f,
        GLS_TEXT_HALO, false, 0, 0, 0, 0,
        GLS_TEXT_LOCK_CELL_SIZE, true,
        GLS_TEXT_JUSTIFY, 1,
        GLS_TEXT_SHADOW, false, 0.129999995f, -0.129999995f, 128, 128, 128, 255,
        GLS_TEXT_STRING,
            "152.12",
        GLS_TEXT_UPPERCASE, false,
        GLS_TEXT_WRAP, true,
        NULL);

    // Call initialize on the object after the Set methods so that the grid
    // will be sized properly before any row,column specific (individual characters) calls are made.
    text3->Initialize();
    text3->VerticalAlignment(GlsTextBox::ALIGN_CENTER);
    text3->LeftToRight(true);

   // Call GlsTextBox methods to set up individual character attributes.
    text3->Baseline(0.000000000f);
    text3->BgColor(GlsColor(255,255,255,0));
    text3->TextColor(GlsColor(255,255,255,255));
    text3->CharScaling(0.980000079f);
    text3->CharSpacing(1.000000000f);
    text3->FauxBold(false);
    text3->Inverse(false);
    text3->StrikeThru(false);
    text3->Underline(false);

    // Call initialize on the object after all character attribute methods
    // in case character settings affect the extents of the grid.
    text3->Initialize();

    // End of initialization code for GlsTextBox text3
    //--------------------------------------------------------------------

    DisplayFrame::InsertObject(text3,true,false);

    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text4
    // Base class initializers will be set up first.
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text4
    text4 = new GlsTextBox();
    text4->VaSetVertices(4,
        255,255,255,255,    0.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   80.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   80.000000f,   25.000000f,   -0.000000f,
        255,255,255,255,    0.000000f,   25.000000f,   -0.000000f);

    // Initialization code generated by DisplayObject class
    text4->SetAvailableAttributes(frameAvailableAttributes);
    text4->Set(
        GLS_INSTANCE_NAME,           "text4",
        GLS_LOCATION,                45.000000000f, 270.000000000f, 0.000000000f,
        GLS_TEXTURE_REPEAT,          TRUE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_POINTS,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
        NULL);

    // Set GlsTextBox specific initializers now
    text4->Set(
        GLS_TEXT_BORDER, 0.000000000f,
        GLS_TEXT_CELL_HEIGHT, 23.000000000f,
        GLS_TEXT_CELL_WIDTH, 20.000000000f,
        GLS_TEXT_CONSTRAIN_CELL_RATIO, true,
        GLS_TEXT_CONTROL_CELL_SIZE, false,
        GLS_TEXT_FONT, "Arial", "Regular", 16,
        GLS_TEXT_LINESPACING, 1.000000000f,
        GLS_TEXT_HALO, false, 0, 0, 0, 0,
        GLS_TEXT_LOCK_CELL_SIZE, true,
        GLS_TEXT_JUSTIFY, 1,
        GLS_TEXT_SHADOW, false, 0.129999995f, -0.129999995f, 128, 128, 128, 255,
        GLS_TEXT_STRING,
            "152.12",
        GLS_TEXT_UPPERCASE, false,
        GLS_TEXT_WRAP, true,
        NULL);

    // Call initialize on the object after the Set methods so that the grid
    // will be sized properly before any row,column specific (individual characters) calls are made.
    text4->Initialize();
    text4->VerticalAlignment(GlsTextBox::ALIGN_CENTER);
    text4->LeftToRight(true);

   // Call GlsTextBox methods to set up individual character attributes.
    text4->Baseline(0.000000000f);
    text4->BgColor(GlsColor(255,255,255,0));
    text4->TextColor(GlsColor(255,255,255,255));
    text4->CharScaling(0.980000079f);
    text4->CharSpacing(1.000000000f);
    text4->FauxBold(false);
    text4->Inverse(false);
    text4->StrikeThru(false);
    text4->Underline(false);

    // Call initialize on the object after all character attribute methods
    // in case character settings affect the extents of the grid.
    text4->Initialize();

    // End of initialization code for GlsTextBox text4
    //--------------------------------------------------------------------

    DisplayFrame::InsertObject(text4,true,false);

    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text5
    // Base class initializers will be set up first.
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text5
    text5 = new GlsTextBox();
    text5->VaSetVertices(4,
        255,255,255,255,    0.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   80.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   80.000000f,   25.000000f,   -0.000000f,
        255,255,255,255,    0.000000f,   25.000000f,   -0.000000f);

    // Initialization code generated by DisplayObject class
    text5->SetAvailableAttributes(frameAvailableAttributes);
    text5->Set(
        GLS_INSTANCE_NAME,           "text5",
        GLS_LOCATION,                45.000000000f, 210.000000000f, 0.000000000f,
        GLS_TEXTURE_REPEAT,          TRUE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_POINTS,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
        NULL);

    // Set GlsTextBox specific initializers now
    text5->Set(
        GLS_TEXT_BORDER, 0.000000000f,
        GLS_TEXT_CELL_HEIGHT, 23.000000000f,
        GLS_TEXT_CELL_WIDTH, 20.000000000f,
        GLS_TEXT_CONSTRAIN_CELL_RATIO, true,
        GLS_TEXT_CONTROL_CELL_SIZE, false,
        GLS_TEXT_FONT, "Arial", "Regular", 16,
        GLS_TEXT_LINESPACING, 1.000000000f,
        GLS_TEXT_HALO, false, 0, 0, 0, 0,
        GLS_TEXT_LOCK_CELL_SIZE, true,
        GLS_TEXT_JUSTIFY, 1,
        GLS_TEXT_SHADOW, false, 0.129999995f, -0.129999995f, 128, 128, 128, 255,
        GLS_TEXT_STRING,
            "152.12",
        GLS_TEXT_UPPERCASE, false,
        GLS_TEXT_WRAP, true,
        NULL);

    // Call initialize on the object after the Set methods so that the grid
    // will be sized properly before any row,column specific (individual characters) calls are made.
    text5->Initialize();
    text5->VerticalAlignment(GlsTextBox::ALIGN_CENTER);
    text5->LeftToRight(true);

   // Call GlsTextBox methods to set up individual character attributes.
    text5->Baseline(0.000000000f);
    text5->BgColor(GlsColor(255,255,255,0));
    text5->TextColor(GlsColor(255,255,255,255));
    text5->CharScaling(0.980000079f);
    text5->CharSpacing(1.000000000f);
    text5->FauxBold(false);
    text5->Inverse(false);
    text5->StrikeThru(false);
    text5->Underline(false);

    // Call initialize on the object after all character attribute methods
    // in case character settings affect the extents of the grid.
    text5->Initialize();

    // End of initialization code for GlsTextBox text5
    //--------------------------------------------------------------------

    DisplayFrame::InsertObject(text5,true,false);

    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text6
    // Base class initializers will be set up first.
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text6
    text6 = new GlsTextBox();
    text6->VaSetVertices(4,
        255,255,255,255,    0.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   80.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   80.000000f,   25.000000f,   -0.000000f,
        255,255,255,255,    0.000000f,   25.000000f,   -0.000000f);

    // Initialization code generated by DisplayObject class
    text6->SetAvailableAttributes(frameAvailableAttributes);
    text6->Set(
        GLS_INSTANCE_NAME,           "text6",
        GLS_LOCATION,                45.000000000f, 150.000000000f, 0.000000000f,
        GLS_TEXTURE_REPEAT,          TRUE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_POINTS,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
        NULL);

    // Set GlsTextBox specific initializers now
    text6->Set(
        GLS_TEXT_BORDER, 0.000000000f,
        GLS_TEXT_CELL_HEIGHT, 23.000000000f,
        GLS_TEXT_CELL_WIDTH, 20.000000000f,
        GLS_TEXT_CONSTRAIN_CELL_RATIO, true,
        GLS_TEXT_CONTROL_CELL_SIZE, false,
        GLS_TEXT_FONT, "Arial", "Regular", 16,
        GLS_TEXT_LINESPACING, 1.000000000f,
        GLS_TEXT_HALO, false, 0, 0, 0, 0,
        GLS_TEXT_LOCK_CELL_SIZE, true,
        GLS_TEXT_JUSTIFY, 1,
        GLS_TEXT_SHADOW, false, 0.129999995f, -0.129999995f, 128, 128, 128, 255,
        GLS_TEXT_STRING,
            "152.12",
        GLS_TEXT_UPPERCASE, false,
        GLS_TEXT_WRAP, true,
        NULL);

    // Call initialize on the object after the Set methods so that the grid
    // will be sized properly before any row,column specific (individual characters) calls are made.
    text6->Initialize();
    text6->VerticalAlignment(GlsTextBox::ALIGN_CENTER);
    text6->LeftToRight(true);

   // Call GlsTextBox methods to set up individual character attributes.
    text6->Baseline(0.000000000f);
    text6->BgColor(GlsColor(255,255,255,0));
    text6->TextColor(GlsColor(255,255,255,255));
    text6->CharScaling(0.980000079f);
    text6->CharSpacing(1.000000000f);
    text6->FauxBold(false);
    text6->Inverse(false);
    text6->StrikeThru(false);
    text6->Underline(false);

    // Call initialize on the object after all character attribute methods
    // in case character settings affect the extents of the grid.
    text6->Initialize();

    // End of initialization code for GlsTextBox text6
    //--------------------------------------------------------------------

    DisplayFrame::InsertObject(text6,true,false);

    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text7
    // Base class initializers will be set up first.
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text7
    text7 = new GlsTextBox();
    text7->VaSetVertices(4,
        255,255,255,255,    0.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   80.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   80.000000f,   25.000000f,   -0.000000f,
        255,255,255,255,    0.000000f,   25.000000f,   -0.000000f);

    // Initialization code generated by DisplayObject class
    text7->SetAvailableAttributes(frameAvailableAttributes);
    text7->Set(
        GLS_INSTANCE_NAME,           "text7",
        GLS_LOCATION,                45.000000000f, 95.000000000f, 0.000000000f,
        GLS_TEXTURE_REPEAT,          TRUE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_POINTS,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
        NULL);

    // Set GlsTextBox specific initializers now
    text7->Set(
        GLS_TEXT_BORDER, 0.000000000f,
        GLS_TEXT_CELL_HEIGHT, 23.000000000f,
        GLS_TEXT_CELL_WIDTH, 20.000000000f,
        GLS_TEXT_CONSTRAIN_CELL_RATIO, true,
        GLS_TEXT_CONTROL_CELL_SIZE, false,
        GLS_TEXT_FONT, "Arial", "Regular", 16,
        GLS_TEXT_LINESPACING, 1.000000000f,
        GLS_TEXT_HALO, false, 0, 0, 0, 0,
        GLS_TEXT_LOCK_CELL_SIZE, true,
        GLS_TEXT_JUSTIFY, 1,
        GLS_TEXT_SHADOW, false, 0.129999995f, -0.129999995f, 128, 128, 128, 255,
        GLS_TEXT_STRING,
            "152.12",
        GLS_TEXT_UPPERCASE, false,
        GLS_TEXT_WRAP, true,
        NULL);

    // Call initialize on the object after the Set methods so that the grid
    // will be sized properly before any row,column specific (individual characters) calls are made.
    text7->Initialize();
    text7->VerticalAlignment(GlsTextBox::ALIGN_CENTER);
    text7->LeftToRight(true);

   // Call GlsTextBox methods to set up individual character attributes.
    text7->Baseline(0.000000000f);
    text7->BgColor(GlsColor(255,255,255,0));
    text7->TextColor(GlsColor(255,255,255,255));
    text7->CharScaling(0.980000079f);
    text7->CharSpacing(1.000000000f);
    text7->FauxBold(false);
    text7->Inverse(false);
    text7->StrikeThru(false);
    text7->Underline(false);

    // Call initialize on the object after all character attribute methods
    // in case character settings affect the extents of the grid.
    text7->Initialize();

    // End of initialization code for GlsTextBox text7
    //--------------------------------------------------------------------

    DisplayFrame::InsertObject(text7,true,false);

    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text8
    // Base class initializers will be set up first.
    //--------------------------------------------------------------------
    // Initialization code for GlsTextBox text8
    text8 = new GlsTextBox();
    text8->VaSetVertices(4,
        255,255,255,255,    0.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   80.000000f,    0.000000f,    0.000000f,
        255,255,255,255,   80.000000f,   25.000000f,   -0.000000f,
        255,255,255,255,    0.000000f,   25.000000f,   -0.000000f);

    // Initialization code generated by DisplayObject class
    text8->SetAvailableAttributes(frameAvailableAttributes);
    text8->Set(
        GLS_INSTANCE_NAME,           "text8",
        GLS_LOCATION,                45.000000000f, 35.000000000f, 0.000000000f,
        GLS_TEXTURE_REPEAT,          TRUE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_POINTS,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
                                     0.000000000f, 0.000000000f, 0.000000000f,
        NULL);

    // Set GlsTextBox specific initializers now
    text8->Set(
        GLS_TEXT_BORDER, 0.000000000f,
        GLS_TEXT_CELL_HEIGHT, 23.000000000f,
        GLS_TEXT_CELL_WIDTH, 20.000000000f,
        GLS_TEXT_CONSTRAIN_CELL_RATIO, true,
        GLS_TEXT_CONTROL_CELL_SIZE, false,
        GLS_TEXT_FONT, "Arial", "Regular", 16,
        GLS_TEXT_LINESPACING, 1.000000000f,
        GLS_TEXT_HALO, false, 0, 0, 0, 0,
        GLS_TEXT_LOCK_CELL_SIZE, true,
        GLS_TEXT_JUSTIFY, 1,
        GLS_TEXT_SHADOW, false, 0.129999995f, -0.129999995f, 128, 128, 128, 255,
        GLS_TEXT_STRING,
            "152.12",
        GLS_TEXT_UPPERCASE, false,
        GLS_TEXT_WRAP, true,
        NULL);

    // Call initialize on the object after the Set methods so that the grid
    // will be sized properly before any row,column specific (individual characters) calls are made.
    text8->Initialize();
    text8->VerticalAlignment(GlsTextBox::ALIGN_CENTER);
    text8->LeftToRight(true);

   // Call GlsTextBox methods to set up individual character attributes.
    text8->Baseline(0.000000000f);
    text8->BgColor(GlsColor(255,255,255,0));
    text8->TextColor(GlsColor(255,255,255,255));
    text8->CharScaling(0.980000079f);
    text8->CharSpacing(1.000000000f);
    text8->FauxBold(false);
    text8->Inverse(false);
    text8->StrikeThru(false);
    text8->Underline(false);

    // Call initialize on the object after all character attribute methods
    // in case character settings affect the extents of the grid.
    text8->Initialize();

    // End of initialization code for GlsTextBox text8
    //--------------------------------------------------------------------

    DisplayFrame::InsertObject(text8,true,false);

    // Initialization code for GlsPushButton pushButton1
    pushButton1 = new GlsPushButton();
    // Initialization code generated by DisplayObject class
    pushButton1->SetAvailableAttributes(frameAvailableAttributes);
    pushButton1->Set(
        GLS_INSTANCE_NAME,           "pushButton1",
        GLS_LOCATION,                215.500000000f, 419.500000000f, 0.000000000f,
        GLS_TEXTURE_POINTS,          17.500000000f, -17.500000000f, 0.000000000f,
                                     -17.500000000f, -17.500000000f, 0.000000000f,
                                     -17.500000000f, 17.500000000f, 0.000000000f,
                                     17.500000000f, 17.500000000f, 0.000000000f,
        NULL);

    pushButton1->PerformGroupCullCheck(false);
    pushButton1->CullTestChildren(true);
    pushButton1->InitialGroupCount(2);
    // Initialization code for GLPolygon btn1
    btn1 = new GLPolygon();
    btn1->VaSetVertices(4,
        255,255,255,255,    0.000000f,    0.000001f,    0.000000f,
        255,255,255,255,   35.000000f,    0.000001f,    0.000000f,
        255,255,255,255,   35.000000f,   35.000000f,    0.000000f,
        255,255,255,255,    0.000000f,   35.000000f,    0.000000f);

    btn1->VaSetTexCoords(4,
            0.000000f,    0.000000f,    0.000000f,
            1.000000f,    0.000000f,    0.000000f,
            1.000000f,    1.000000f,    0.000000f,
            0.000000f,    1.000000f,    0.000000f);

    btn1->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    btn1->SetAvailableAttributes(frameAvailableAttributes);
    btn1->Set(
        GLS_INSTANCE_NAME,           "btn1",
        GLS_LOCATION,                198.000000000f, 402.000000000f, 0.000000000f,
        GLS_TEXTURE_INDEX,           1,
        GLS_TEXTURE_REPEAT,          FALSE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          35.000000000f, 0.000001013f, 0.000000000f,
                                     0.000000000f, 0.000001013f, 0.000000000f,
                                     0.000000000f, 35.000000000f, 0.000000000f,
                                     35.000000000f, 35.000000000f, 0.000000000f,
        NULL);

    pushButton1->Group::InsertObject(btn1,true,false);
    pushButton1->CalculateBoundingBox();
    // Specific Button Initialization code pushButton1
    pushButton1->Set(
        GLS_GLSBUTTON_TOGGLE, true,
        GLS_GLSBUTTON_WHICH_OBJ_POS_UP, 0,
        GLS_GLSBUTTON_WHICH_OBJ_POS_DOWN, 0,
        GLS_GLSBUTTON_STATE, 1,
        GLS_GLSBUTTON_EMIT_STATE_CHANGE_EVENT, true,
		NULL);
    DisplayFrame::InsertObject(pushButton1,true,false);

    // Initialization code for GlsPushButton pushButton2
    pushButton2 = new GlsPushButton();
    // Initialization code generated by DisplayObject class
    pushButton2->SetAvailableAttributes(frameAvailableAttributes);
    pushButton2->Set(
        GLS_INSTANCE_NAME,           "pushButton2",
        GLS_LOCATION,                215.500000000f, 304.500000000f, 0.000000000f,
        GLS_TEXTURE_POINTS,          17.500000000f, -17.500000000f, 0.000000000f,
                                     -17.500000000f, -17.500000000f, 0.000000000f,
                                     -17.500000000f, 17.500000000f, 0.000000000f,
                                     17.500000000f, 17.500000000f, 0.000000000f,
        NULL);

    pushButton2->PerformGroupCullCheck(false);
    pushButton2->CullTestChildren(true);
    pushButton2->InitialGroupCount(2);
    // Initialization code for GLPolygon btn1_1
    btn1_1 = new GLPolygon();
    btn1_1->VaSetVertices(4,
        255,255,255,255,    0.000000f,    0.000001f,    0.000000f,
        255,255,255,255,   35.000000f,    0.000001f,    0.000000f,
        255,255,255,255,   35.000000f,   35.000000f,    0.000000f,
        255,255,255,255,    0.000000f,   35.000000f,    0.000000f);

    btn1_1->VaSetTexCoords(4,
            0.000000f,    0.000000f,    0.000000f,
            1.000000f,    0.000000f,    0.000000f,
            1.000000f,    1.000000f,    0.000000f,
            0.000000f,    1.000000f,    0.000000f);

    btn1_1->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    btn1_1->SetAvailableAttributes(frameAvailableAttributes);
    btn1_1->Set(
        GLS_INSTANCE_NAME,           "btn1_1",
        GLS_LOCATION,                198.000000000f, 287.000000000f, 0.000000000f,
        GLS_TEXTURE_INDEX,           1,
        GLS_TEXTURE_REPEAT,          FALSE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          35.000000000f, 0.000001013f, 0.000000000f,
                                     0.000000000f, 0.000001013f, 0.000000000f,
                                     0.000000000f, 35.000000000f, 0.000000000f,
                                     35.000000000f, 35.000000000f, 0.000000000f,
        NULL);

    pushButton2->Group::InsertObject(btn1_1,true,false);
    pushButton2->CalculateBoundingBox();
    // Specific Button Initialization code pushButton2
    pushButton2->Set(
        GLS_GLSBUTTON_TOGGLE, true,
        GLS_GLSBUTTON_WHICH_OBJ_POS_UP, 0,
        GLS_GLSBUTTON_WHICH_OBJ_POS_DOWN, 0,
        GLS_GLSBUTTON_STATE, 1,
        GLS_GLSBUTTON_EMIT_STATE_CHANGE_EVENT, true,
		NULL);
    DisplayFrame::InsertObject(pushButton2,true,false);

    // Initialization code for GlsPushButton pushButton3
    pushButton3 = new GlsPushButton();
    // Initialization code generated by DisplayObject class
    pushButton3->SetAvailableAttributes(frameAvailableAttributes);
    pushButton3->Set(
        GLS_INSTANCE_NAME,           "pushButton3",
        GLS_LOCATION,                215.500000000f, 189.500000000f, 0.000000000f,
        GLS_TEXTURE_POINTS,          17.500000000f, -17.500000000f, 0.000000000f,
                                     -17.500000000f, -17.500000000f, 0.000000000f,
                                     -17.500000000f, 17.500000000f, 0.000000000f,
                                     17.500000000f, 17.500000000f, 0.000000000f,
        NULL);

    pushButton3->PerformGroupCullCheck(false);
    pushButton3->CullTestChildren(true);
    pushButton3->InitialGroupCount(2);
    // Initialization code for GLPolygon btn1_1_1
    btn1_1_1 = new GLPolygon();
    btn1_1_1->VaSetVertices(4,
        255,255,255,255,    0.000000f,    0.000001f,    0.000000f,
        255,255,255,255,   35.000000f,    0.000001f,    0.000000f,
        255,255,255,255,   35.000000f,   35.000000f,    0.000000f,
        255,255,255,255,    0.000000f,   35.000000f,    0.000000f);

    btn1_1_1->VaSetTexCoords(4,
            0.000000f,    0.000000f,    0.000000f,
            1.000000f,    0.000000f,    0.000000f,
            1.000000f,    1.000000f,    0.000000f,
            0.000000f,    1.000000f,    0.000000f);

    btn1_1_1->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    btn1_1_1->SetAvailableAttributes(frameAvailableAttributes);
    btn1_1_1->Set(
        GLS_INSTANCE_NAME,           "btn1_1_1",
        GLS_LOCATION,                198.000000000f, 172.000000000f, 0.000000000f,
        GLS_TEXTURE_INDEX,           1,
        GLS_TEXTURE_REPEAT,          FALSE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          35.000000000f, 0.000001013f, 0.000000000f,
                                     0.000000000f, 0.000001013f, 0.000000000f,
                                     0.000000000f, 35.000000000f, 0.000000000f,
                                     35.000000000f, 35.000000000f, 0.000000000f,
        NULL);

    pushButton3->Group::InsertObject(btn1_1_1,true,false);
    pushButton3->CalculateBoundingBox();
    // Specific Button Initialization code pushButton3
    pushButton3->Set(
        GLS_GLSBUTTON_TOGGLE, true,
        GLS_GLSBUTTON_WHICH_OBJ_POS_UP, 0,
        GLS_GLSBUTTON_WHICH_OBJ_POS_DOWN, 0,
        GLS_GLSBUTTON_STATE, 1,
        GLS_GLSBUTTON_EMIT_STATE_CHANGE_EVENT, true,
		NULL);
    DisplayFrame::InsertObject(pushButton3,true,false);

    // Initialization code for GlsPushButton pushButton4
    pushButton4 = new GlsPushButton();
    // Initialization code generated by DisplayObject class
    pushButton4->SetAvailableAttributes(frameAvailableAttributes);
    pushButton4->Set(
        GLS_INSTANCE_NAME,           "pushButton4",
        GLS_LOCATION,                215.500000000f, 74.500000000f, 0.000000000f,
        GLS_TEXTURE_POINTS,          17.500000000f, -17.500000000f, 0.000000000f,
                                     -17.500000000f, -17.500000000f, 0.000000000f,
                                     -17.500000000f, 17.500000000f, 0.000000000f,
                                     17.500000000f, 17.500000000f, 0.000000000f,
        NULL);

    pushButton4->PerformGroupCullCheck(false);
    pushButton4->CullTestChildren(true);
    pushButton4->InitialGroupCount(2);
    // Initialization code for GLPolygon btn1_1_1_1
    btn1_1_1_1 = new GLPolygon();
    btn1_1_1_1->VaSetVertices(4,
        255,255,255,255,    0.000000f,    0.000001f,    0.000000f,
        255,255,255,255,   35.000000f,    0.000001f,    0.000000f,
        255,255,255,255,   35.000000f,   35.000000f,    0.000000f,
        255,255,255,255,    0.000000f,   35.000000f,    0.000000f);

    btn1_1_1_1->VaSetTexCoords(4,
            0.000000f,    0.000000f,    0.000000f,
            1.000000f,    0.000000f,    0.000000f,
            1.000000f,    1.000000f,    0.000000f,
            0.000000f,    1.000000f,    0.000000f);

    btn1_1_1_1->VaSetNormals(4,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f,
            0.000000f,    0.000000f,    1.000000f);

    // Initialization code generated by DisplayObject class
    btn1_1_1_1->SetAvailableAttributes(frameAvailableAttributes);
    btn1_1_1_1->Set(
        GLS_INSTANCE_NAME,           "btn1_1_1_1",
        GLS_LOCATION,                198.000000000f, 57.000000000f, 0.000000000f,
        GLS_TEXTURE_INDEX,           1,
        GLS_TEXTURE_REPEAT,          FALSE,
        GLS_TEXTURE_MAP_MODE,        TEXTURE_MAP_REPLACE,
        GLS_TEXTURE_MIN_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_TEXTURE_MAG_FILTER,      TEXTURE_FILTER_LINEAR,
        GLS_POLYGON_MODE,            POLY_MODE_FILLED,
        GLS_LIGHTING_ENABLED,        false,
        GLS_MATERIAL_INDICES,          1, 0,
        GLS_TEXTURE_POINTS,          35.000000000f, 0.000001013f, 0.000000000f,
                                     0.000000000f, 0.000001013f, 0.000000000f,
                                     0.000000000f, 35.000000000f, 0.000000000f,
                                     35.000000000f, 35.000000000f, 0.000000000f,
        NULL);

    pushButton4->Group::InsertObject(btn1_1_1_1,true,false);
    pushButton4->CalculateBoundingBox();
    // Specific Button Initialization code pushButton4
    pushButton4->Set(
        GLS_GLSBUTTON_TOGGLE, true,
        GLS_GLSBUTTON_WHICH_OBJ_POS_UP, 0,
        GLS_GLSBUTTON_WHICH_OBJ_POS_DOWN, 0,
        GLS_GLSBUTTON_STATE, 1,
        GLS_GLSBUTTON_EMIT_STATE_CHANGE_EVENT, true,
		NULL);
    DisplayFrame::InsertObject(pushButton4,true,false);


    objects->CalculateBoundingBox();


    CullingEnabled(true);

    Initialize();

}

void GLStudio_CommsPanelClass::Create(void)
{
  theWindow = new OpenGLWindow(0,0,_width,_height,Name(),this);
  theWindow->end();
  WindowFlags(FL_RGB|FL_DOUBLE|FL_DEPTH|FL_STENCIL|FL_ACCUM|FL_ALPHA);
  BackgroundColor(173,173,173,255);
  FrameInterval(33333);
  theWindow->resize(0,0,_width,_height);
  theWindow->show();
  theWindow->make_current();
}

#ifndef GLS_CREATEOBJECTS_OPTIMIZE
#ifdef WIN32
#pragma optimize("", on)
#endif
#endif
GLStudio_CommsPanelClass::GLStudio_CommsPanelClass(const char *name,int width,int height)
       : glsDisplayFrame(name,width,height)
{
    // Cause link time version check between header files and library.
    GLS_CHECK_VERSION_ID();

    static const char initializeLibraryData[] = 
#    ifdef GLS_FORCE_LICENSE_REQUIREMENT
    "";
#    else
    /* ETC_PA_156873_2104
RT_UNLIMITED: true
CLASS_NAME: GLStudio_CommsPanelClass */
    "\220i\240Lv\355\203\175\222\227s\242\226\203\257u\211l\206b\201\324\233a\242\206K\263\253\212\305\243\226z\271\264\307\217\227\243a\334\307\266\334W\230\235z\272\202\302\236\213"
    "\226\246qi\237\255\203\346\253\317\334\320\222\262\331\300\306\260\235\244\236\250\262\205\274\245\307\251\000MC0CFBPDT6N+Nui0rRAaW+pUJ1lksJSiAhUAwMUQ9g/cPJIa7IXa0r6ksa3ojSY=";
#    endif

    InitializeLibrary(initializeLibraryData,this,true);
    Create();

    CreateSplash();
    texturePalette->PaletteSize(2);
    texturePalette->SetInlineTexture(0, image_data_0);
    texturePalette->SetInlineTexture(1, image_data_1);
    _materialPalette[0] = Material(GlsColor(51, 51, 51, 255), GlsColor(204, 204, 204, 255), GlsColor(0, 0, 0, 255), GlsColor(0, 0, 0, 255), 1.000000000f);
    _materialPalette[0]._colorMaterialMode = (disti::ColorMaterialMode_e)0;
    _sound_player = NULL;
    RemoveSplash();
}
int main(int argc,char *argv[])
{
  try
  {

    glsCommandLine::Instance()->ReadCommandLine(argc,argv);

    gLStudio_CommsPanel = new GLStudio_CommsPanelClass("GLStudio-CommsPanel",267,500);
    gLStudio_CommsPanel->CreateObjects();

//////////////////// User Code from section: "Main Initialization" ////////////
///////////////////////////////////////////////////////////////////////////////
    gLStudio_CommsPanel->SetRedraw();

    Timer frameTimer;
    do
    {
//////////////////// User Code from section: "Main Loop" //////////////////////
///////////////////////////////////////////////////////////////////////////////
        gLStudio_CommsPanel->RecordCalculateStart();
        gLStudio_CommsPanel->Calculate(frameTimer.ElapsedSecondsDouble());
        gLStudio_CommsPanel->RecordCalculateEnd();
    }
    while(gLStudio_CommsPanel->FrameAnimate());

    // Delete the instance
    delete gLStudio_CommsPanel;

  }
  catch(DistiException e)
  {
    Error(e.what());
  }
  return 0;
}
